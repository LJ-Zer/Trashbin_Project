/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.03.2025 07:20:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74400;
#else
constexpr int kTensorArenaSize = 73376;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 17645, -26663, -21161, -26069, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00020751163538079709, 0.00017319859762210399, 0.00022515928139910102, 0.00017396468319930136, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 45,-34,-47,-46,95,-16,25,-48,76,24,119,47,-65,-8,55,31,5,9,-127,36,3,102,-38,118,-6,13,9,89,81,-39,38,-22, 
  /* [1][0][][] */ 62,79,-78,-14,-38,42,114,43,-42,-87,-102,32,93,-52,95,-116,117,-127,26,-54,8,-79,-73,-17,-2,-79,65,-88,-60,-100,-24,-17, 
  /* [2][0][][] */ -22,84,21,70,-21,-3,74,33,-62,-127,65,-56,-65,59,-78,46,41,37,66,-51,-8,12,-17,-25,29,-27,70,-100,-17,20,51,59, 
  /* [3][0][][] */ 75,-72,81,19,-12,109,26,-4,4,-124,34,125,82,-3,-127,-27,110,-109,117,-1,-115,-9,5,-25,99,-3,-113,67,-78,117,33,59, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0039936574175953865, 0.0033332870807498693, 0.0043332944624125957, 0.0033480306155979633, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 255, 172, -173, 125, -470, 58, 31, 99, -11, 1281, 673, 426, -6, -40, 594, 4, 161, 744, 359, -14, -151, 1064, -305, 637, 282, -352, 381, 906, -9, -239, -551, 258, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.2861956899287179e-05, 5.9610410971799865e-05, 4.6462315367534757e-05, 4.9697016947902739e-05, 4.2717580072348937e-05, 4.5110806240700185e-05, 4.5018907258054242e-05, 4.7011864808155224e-05, 4.2118943383684382e-05, 7.0288740971591324e-05, 4.5503893488785252e-05, 5.412554310169071e-05, 4.8148034693440422e-05, 5.7015382481040433e-05, 4.2282197682652622e-05, 4.4347056245896965e-05, 4.3558531615417451e-05, 4.5997661800356582e-05, 4.1500723455101252e-05, 4.4988235458731651e-05, 4.8258283641189337e-05, 5.0114802434109151e-05, 4.1755589336389676e-05, 5.1894494390580803e-05, 4.2514304368523881e-05, 4.1528081055730581e-05, 5.0558359362185001e-05, 6.0461687098722905e-05, 6.8595152697525918e-05, 4.7438570618396625e-05, 4.340848681749776e-05, 4.4316173443803564e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -21,-41,107,6,99,0,-88,-103,86,-91,-98,0,68,20,-22,50,-48,-20,-64,-66,-53,-89,0,107,-118,3,86,-44,109,6,-16,-66,83,-50,-87,75,-112,-101,-85,33,101,-94,-127,109,61,-113,115,-30,37,-59,-29,96,-85,-31,-91,114,10,75,108,-103,-74,94,-44,40,-5,28,75,102,66,89,104,-107,107,-104,46,87,-101,-8,-58,32,51,13,77,5,-59,-39,-67,86,18,88,-8,-107,24,82,43,-10, 
  /* [1][0][][] */ -44,31,-43,0,-26,66,22,21,68,-102,-64,84,50,-23,24,64,88,-32,29,92,-26,-5,33,23,7,-1,-18,84,5,13,83,-43,31,77,-14,26,45,40,4,-46,-55,9,6,-60,-28,49,-18,-24,-49,-72,100,64,16,62,-48,-44,27,79,50,81,-28,86,-38,-58,-28,27,68,36,84,32,12,9,-81,56,-25,38,70,-30,-20,62,-51,66,-29,-127,29,89,-68,-28,54,68,74,22,52,86,26,-14, 
  /* [2][0][][] */ 50,43,-52,56,-36,-63,74,86,-79,80,-42,86,82,-7,81,-105,-70,-28,24,34,-77,-19,107,3,-37,65,90,6,-74,85,63,83,-73,-15,-87,-127,-96,61,100,-31,-94,-90,-43,1,-62,108,-33,-92,97,21,59,-122,-59,85,20,19,-84,80,-71,-17,-20,65,-18,53,67,51,35,80,-87,29,5,-68,32,-82,32,30,-54,-44,17,13,11,-108,-49,-17,-6,-76,0,-20,81,98,-18,-3,-37,-87,-66,-90, 
  /* [3][0][][] */ 75,11,44,-25,-75,49,-103,51,57,-11,72,-5,82,91,70,25,84,70,-34,9,111,-77,-45,-127,-44,-107,-59,90,28,-72,91,9,-67,-25,-22,-15,-90,-27,55,25,-23,-76,-92,10,64,55,-39,-54,8,-86,52,7,88,39,92,-92,-87,-103,-94,-30,-75,31,-9,65,61,-26,-41,-22,-18,-72,4,87,17,-104,62,-41,29,38,101,-41,-77,-97,26,49,35,54,-41,-82,-69,54,11,-105,81,-62,-94,26, 
  /* [4][0][][] */ 41,93,-11,47,-34,-33,25,7,48,81,-17,48,18,-48,-22,-76,-34,-13,-67,7,97,-103,77,18,-16,-11,55,-68,-57,26,-75,-62,61,105,6,-109,-56,-13,-125,41,-56,-68,-79,-100,25,94,25,48,15,-49,-24,-85,-96,34,-96,10,31,-103,20,6,-2,-84,-50,-73,-54,46,-8,-47,17,-106,-108,-92,-65,15,90,43,52,-24,-18,-67,-2,-52,-99,9,-11,60,82,-9,-127,-84,33,36,20,90,-105,-24, 
  /* [5][0][][] */ 101,-80,73,69,38,-98,25,46,112,-107,-1,-67,29,97,43,32,63,67,-85,86,38,57,17,-25,-127,-72,-8,-83,43,35,15,-84,-41,10,-63,14,-108,-68,46,28,-68,-58,2,101,-17,13,31,-66,-85,83,20,16,32,30,37,-15,73,52,-59,-42,34,-53,41,-73,-30,105,-28,31,77,-7,107,-62,-40,51,-24,-69,14,-67,13,76,95,24,-1,97,-79,79,8,22,54,-125,110,91,-15,26,72,-120, 
  /* [6][0][][] */ 25,-39,117,76,-76,-39,-2,75,-10,-96,18,-70,89,53,118,-97,50,4,0,98,-66,-111,107,58,-81,-86,8,-50,-29,-94,62,-61,-98,-106,-49,-91,-3,24,-87,80,94,55,38,-2,-100,123,-79,-33,-108,4,-5,-41,64,-44,107,-27,13,2,-58,127,-75,11,73,-65,-32,72,106,-38,88,6,-98,1,57,-84,-75,-35,-66,-101,-51,-26,38,-20,40,-69,-63,-81,-43,-79,64,89,95,24,-50,-38,82,-46, 
  /* [7][0][][] */ 109,71,-26,-39,-65,120,-27,11,122,-25,-79,23,57,-85,51,82,60,20,-5,109,59,35,0,83,-97,72,52,60,-76,109,-8,41,8,27,55,96,-87,65,5,-20,85,-72,96,75,51,18,98,-88,38,-73,-83,-37,-18,87,25,24,101,-73,9,-37,22,2,85,-108,-50,-44,74,28,-89,33,63,80,81,2,64,57,-47,51,-83,50,88,-34,-15,-127,87,36,-112,101,63,10,85,65,-61,-15,4,-84, 
  /* [8][0][][] */ 10,34,-53,-87,62,21,-68,-24,2,78,41,98,-1,-44,-92,-80,-76,100,-65,17,28,-38,84,108,-96,117,37,73,-67,14,-93,116,107,-35,49,-6,114,13,-25,69,100,108,-124,-127,-16,-38,-32,106,35,-79,-72,-17,-67,-9,-31,-111,53,107,-94,97,105,40,46,116,-39,-50,-28,99,-92,50,33,3,76,82,3,26,-57,112,83,69,32,85,-108,-48,21,48,84,-47,44,-35,-87,101,-69,-120,-45,80, 
  /* [9][0][][] */ 5,19,81,57,77,-74,3,-64,20,48,19,44,-12,-33,-68,-9,-6,-10,-44,-23,4,68,-39,-58,127,31,-21,27,17,-38,-34,61,60,7,35,8,-21,64,3,-45,38,16,47,-68,49,7,-51,66,25,17,-26,-6,87,-52,-31,75,84,-39,33,0,-69,61,65,-6,-32,3,67,37,-23,60,84,-28,16,101,-51,-31,-50,-56,-8,79,53,39,107,67,-18,-36,48,-15,113,69,-2,69,81,-11,78,31, 
  /* [10][0][][] */ -34,82,110,-61,-16,92,121,54,43,31,44,-77,98,96,-23,35,-54,64,-63,-66,-7,25,66,-94,19,66,-111,-115,-43,91,-68,-74,77,109,113,81,-62,16,-9,12,-16,116,-127,-30,-95,-22,-1,-49,-23,11,35,-5,70,30,-32,-35,-70,-17,27,-23,-1,74,125,57,115,-68,-69,-6,32,-56,-89,-55,82,65,-58,119,-26,25,83,37,80,23,41,126,-82,78,99,-2,48,23,16,-75,-23,-45,-59,-54, 
  /* [11][0][][] */ 104,23,1,86,96,49,42,34,127,89,-58,106,18,-52,50,-59,-32,-55,47,33,59,76,31,-79,-95,-79,7,65,63,13,18,4,-69,-39,57,40,-46,50,-11,-25,3,67,-90,30,-4,-48,-60,-98,104,81,79,15,-87,-38,22,37,-77,-27,-32,-92,-52,98,77,-1,25,92,-39,35,89,52,-37,-28,52,85,-69,50,-40,2,-14,72,-88,-34,-79,-14,35,-44,43,-27,-87,-31,17,-57,-57,-18,-46,-50, 
  /* [12][0][][] */ 19,68,-58,-3,85,24,-30,9,-49,70,-16,18,-30,14,54,-83,-76,-15,-65,-74,33,8,12,97,-55,-52,98,-80,87,17,-36,117,-72,-53,-30,21,9,-94,-22,50,120,29,-127,-28,1,-95,-29,90,-14,-116,-70,98,22,15,-76,90,-41,-44,47,53,57,116,0,42,100,42,-49,109,59,90,57,71,85,94,-18,-5,-23,44,-107,-92,-59,76,33,14,-35,31,67,77,-99,-125,77,49,92,-8,45,43, 
  /* [13][0][][] */ 80,-26,85,57,55,78,54,65,64,-109,10,-45,57,51,45,-9,-100,-64,-53,19,54,-35,96,-58,-63,16,6,14,-78,-54,66,17,10,73,-40,16,-76,-33,34,36,-58,60,-51,14,-41,57,-5,1,8,66,-25,-80,-73,28,82,-81,-32,11,-17,-52,-15,82,-34,10,-37,-52,-61,69,-28,-19,58,-12,-76,10,-46,-26,-80,41,82,-28,32,-73,62,3,-53,-46,49,127,-6,-16,-41,24,76,-25,29,-17, 
  /* [14][0][][] */ -34,-83,100,83,101,8,2,-119,-49,8,88,98,-18,-64,-80,-88,-38,-47,23,25,-23,50,10,72,-100,-39,-29,48,-103,-109,-48,68,127,6,-24,25,100,126,42,-107,34,-96,31,98,84,-102,69,-93,112,68,101,71,109,3,6,25,-35,21,64,111,-12,-67,-1,89,-81,19,80,-99,-73,-94,-79,116,12,92,52,-54,68,-117,61,32,57,-5,-98,-34,-116,-83,-92,104,120,13,95,-35,112,115,27,73, 
  /* [15][0][][] */ 16,-30,-20,89,92,-85,68,-98,45,-1,-68,15,98,8,-97,-107,82,2,-78,21,36,18,67,100,79,79,32,89,28,51,78,-102,5,4,-61,-2,-66,121,108,-74,24,119,-20,-29,18,-76,-38,-73,-17,-71,0,42,-84,-106,-37,-7,85,46,-45,104,-50,-70,3,121,-33,91,-75,1,-61,9,55,-74,16,-11,55,-95,-8,53,98,77,-69,71,-103,-5,-114,-42,-84,34,87,69,-106,-43,60,95,-102,127, 
  /* [16][0][][] */ -58,9,107,-60,46,125,-52,45,63,41,-98,77,-3,-44,-39,-52,116,87,65,66,121,87,-33,56,-54,44,-54,71,-98,26,48,25,-108,85,60,63,-27,38,-38,-59,34,-45,69,101,74,109,104,-10,-48,-119,17,118,-36,127,76,51,14,98,70,21,126,119,43,62,64,25,-28,99,55,105,-22,-2,37,78,70,90,-1,87,-100,-8,17,-85,49,-10,16,104,109,12,71,6,-9,119,71,-15,-71,2, 
  /* [17][0][][] */ 33,-109,40,96,-13,-114,-41,-99,22,-65,79,45,94,60,-107,44,30,46,114,127,-88,-12,10,-34,26,93,-74,27,123,-45,-27,69,-2,-20,43,31,-34,105,-93,-31,-97,-38,0,-8,22,9,76,-104,63,122,5,41,-8,54,105,-62,-72,85,-88,-105,39,-82,72,108,-71,-69,61,-87,-102,6,98,35,16,-106,-60,80,112,-27,39,-52,35,14,-64,-68,-112,64,72,-20,29,76,-83,-108,16,93,22,43, 
  /* [18][0][][] */ -80,115,124,-68,-4,-96,-102,18,17,79,-98,-42,-26,50,77,-46,32,-13,73,-21,121,-35,35,-78,-1,-106,0,123,32,52,16,58,45,-15,-105,-106,-29,16,-14,73,-16,6,-52,6,-100,38,36,10,26,-46,87,45,-104,11,26,97,-45,46,-1,-112,100,127,38,41,-57,-108,-21,102,85,-73,-56,122,-88,-58,-76,-97,67,35,14,-61,-53,-12,-26,-65,112,-18,94,80,-109,-64,-50,117,101,-36,51,-56, 
  /* [19][0][][] */ 16,29,72,43,62,-73,102,84,92,-39,30,-9,-92,33,-54,53,66,-99,113,55,-18,74,-52,13,93,-53,24,-61,-81,-113,-52,45,87,-78,31,6,10,-61,-54,-98,79,-95,-71,7,-84,29,71,-89,78,44,-31,49,-29,14,10,-14,46,91,1,-24,50,-54,103,67,-64,3,-27,-3,-8,47,76,-40,-62,-110,-56,-68,-23,-101,14,100,60,-98,-24,127,-87,-3,19,-7,91,29,-5,63,-18,107,88,-37, 
  /* [20][0][][] */ -13,61,57,89,-77,79,16,60,12,20,-74,9,-10,75,31,-61,-43,-33,-33,-26,19,-39,-68,-66,104,-55,-95,39,21,8,-33,97,89,34,-16,53,40,-10,-11,-98,-72,-24,-43,-95,-39,-46,-57,112,49,-93,-83,80,45,88,49,-8,111,63,97,83,97,-56,-54,-29,-24,-64,-42,11,-77,-47,-60,70,-59,-63,25,20,93,98,98,96,77,13,127,-11,56,99,-21,72,22,104,25,54,22,27,9,28, 
  /* [21][0][][] */ 101,67,84,-59,95,-70,87,20,-5,-24,-45,33,10,55,-42,-69,-106,-34,41,-15,96,-41,68,-73,58,-40,-39,64,20,0,2,-16,30,32,-73,-73,84,111,-92,-42,5,25,21,-15,-85,-56,-62,78,-29,-13,-1,79,46,60,-77,27,-11,38,-40,111,33,-69,10,6,74,30,-26,-44,-87,-26,62,76,29,1,72,77,-99,-44,59,100,37,127,16,-7,30,-80,64,-74,-68,74,107,-97,6,-64,55,11, 
  /* [22][0][][] */ 25,-62,-81,-103,84,-64,104,52,-102,83,-84,-103,110,-118,-126,-95,33,80,-59,-69,83,-85,27,25,105,-9,-126,98,-67,-88,-73,-121,44,56,11,5,-3,-16,-66,-127,-5,-19,2,91,51,-126,103,-27,-70,-95,-1,-24,-73,-101,-52,27,52,-39,-26,-38,106,-86,-85,-124,-75,12,-127,-54,108,114,-29,-11,-76,10,60,-100,39,-25,61,93,104,-105,0,-108,75,83,98,-40,-62,28,-71,55,12,16,-38,107, 
  /* [23][0][][] */ 51,-80,6,76,103,-113,41,-93,26,-33,79,70,9,-83,6,-39,60,-38,-61,88,70,-71,85,-28,33,37,54,12,72,29,73,-36,-6,35,19,56,81,30,-93,-11,-57,36,16,-104,-69,-86,92,24,55,-61,-58,0,80,-65,-21,70,20,-25,90,37,-109,-86,-46,15,28,24,-95,-87,45,-23,97,-46,-9,5,-35,-49,26,-11,71,95,-29,-9,45,27,72,6,98,-41,-55,43,91,-9,127,-54,8,120, 
  /* [24][0][][] */ -58,-42,-94,-72,-87,-103,-66,-91,81,122,90,47,127,77,-26,-114,-84,49,29,-60,111,-71,-48,-44,17,-37,85,62,104,67,14,-51,-6,23,56,26,-59,-110,74,-17,-54,-102,70,17,42,-31,44,57,-81,-57,-23,-22,73,80,85,-64,-35,85,24,0,97,9,48,100,-97,112,-45,-84,-92,43,-49,-17,-32,13,107,107,67,-117,-94,-77,-81,-96,-92,-105,5,74,6,-106,26,-113,15,-74,-5,31,-96,10, 
  /* [25][0][][] */ -99,-67,-91,-20,88,-86,-115,46,38,-119,-50,15,64,-10,-124,-33,-86,54,29,-122,61,78,-21,-69,19,-58,-117,31,71,-103,32,109,90,-124,36,67,92,-72,-33,-29,-95,91,-117,-7,93,34,59,28,-115,87,-82,-5,36,-30,-74,0,-25,44,-119,68,113,35,45,38,-9,69,-28,-17,-104,-17,-33,-127,26,-121,64,14,65,73,7,12,43,44,-52,87,-89,-57,-114,-104,-31,-47,98,14,-127,-23,-29,-87, 
  /* [26][0][][] */ 43,-88,-2,-1,-73,6,-8,17,-76,-126,114,89,-59,-40,21,16,111,23,-55,-42,27,64,95,21,30,50,30,51,16,23,-57,7,-33,-47,-89,-72,-40,76,-19,93,-90,99,88,43,-66,97,-22,112,-60,23,25,119,29,-38,14,-97,100,68,59,58,26,-75,69,-11,122,-13,-23,62,-58,88,78,91,71,-89,-55,19,56,-80,-65,25,-7,78,95,-95,85,12,-60,45,-64,119,23,24,-50,127,61,70, 
  /* [27][0][][] */ 15,0,-26,-53,-72,-54,-36,2,34,76,48,-58,-11,55,68,-23,37,-27,62,-57,-50,20,-10,-20,11,47,-76,-2,56,24,-15,-6,52,56,-51,-46,-42,3,-65,59,-65,41,35,11,78,14,62,70,45,67,57,-45,-21,-61,-2,-16,87,-16,-60,-51,-59,-40,-34,52,37,-30,-68,78,43,4,-68,35,49,36,4,-51,30,-71,73,83,100,-8,105,127,-51,-64,-12,-8,3,23,-17,-27,52,7,103,95, 
  /* [28][0][][] */ 54,-6,61,36,-71,-45,-61,-47,-9,-66,34,45,-52,-53,2,62,58,66,-5,44,-13,23,-71,-46,1,53,-56,-41,-37,-50,-5,-15,-61,8,49,79,0,-46,-29,16,63,23,-23,28,-76,-4,12,29,11,-34,-48,12,-57,10,35,24,77,-10,47,32,-5,-31,-66,1,32,41,-8,51,-52,25,-64,-31,42,87,-5,-53,-74,-39,-58,35,-42,-47,127,45,38,-72,39,-51,-60,-15,-16,-44,4,78,-18,2, 
  /* [29][0][][] */ 59,51,56,-72,-93,4,-109,8,91,-3,-88,-98,98,-81,-38,-47,-106,90,23,-76,-61,-31,55,-11,-44,7,-45,-31,-99,4,86,-6,43,7,-67,-75,-26,73,-5,83,56,77,-98,80,16,88,-52,-48,26,-11,27,-127,51,-66,104,50,-108,45,-55,77,-115,97,-77,-51,-73,-49,35,78,87,-109,28,-62,105,62,59,20,95,-81,-15,29,-27,-89,-41,-50,52,112,60,73,-31,80,66,67,-81,-1,-23,33, 
  /* [30][0][][] */ 16,-64,-71,22,-102,15,-70,-13,103,-25,-4,-51,-111,6,49,7,-15,31,81,-114,29,-107,-115,3,-111,14,-77,116,-19,-108,-98,-4,-94,-81,-127,-61,15,-30,-5,24,89,-83,-17,95,91,-53,90,53,-70,63,14,-103,92,-56,-21,90,-80,-62,-80,-61,-105,-13,-74,-33,-115,-93,-102,78,-68,96,32,-38,-98,93,36,-92,-66,-73,-74,-70,17,13,-105,-22,-110,19,-111,102,-37,-116,64,46,-43,-13,7,-83, 
  /* [31][0][][] */ 97,-78,51,96,44,66,-56,-77,-15,-32,-62,-89,106,-103,-33,127,-59,-88,55,49,77,41,-15,93,13,-115,51,43,-73,-53,63,113,8,33,-86,-13,90,-36,-45,-108,71,-65,-33,47,16,-26,-32,35,51,13,100,-37,-103,-36,-58,27,-110,73,9,125,-27,8,108,-68,79,120,-30,-65,85,-120,-110,18,-86,-50,21,14,-51,-82,69,104,-69,-39,42,59,65,111,-78,36,24,-37,-68,-52,18,114,-26,-36, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018216331955045462, 0.0025334423407912254, 0.001974648330360651, 0.0021121231839060783, 0.0018154970603063703, 0.001917209243401885, 0.0019133035093545914, 0.0019980042707175016, 0.0017900550737977028, 0.0029872714076191187, 0.0019339154241606593, 0.0023003355599939823, 0.002046291483566165, 0.0024231537245213985, 0.0017969933105632663, 0.0018847498577088118, 0.0018512376118451357, 0.0019549005664885044, 0.0017637807177379727, 0.0019120000069960952, 0.0020509769674390554, 0.0021298790816217661, 0.0017746124649420381, 0.0022055159788578749, 0.0018068578792735934, 0.0017649433575570583, 0.0021487302146852016, 0.0025696216616779566, 0.0029152939096093178, 0.0020161392167210579, 0.0018448607297614217, 0.0018834373913705349, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1651, -98, 3294, 5192, 5247, -2430, 4442, -1926, -2749, -327, 4422, -2070, 5609, 5888, 3036, 2413, -861, -504, -1801, 5150, 3009, -417, 2687, -643, -769, 3733, 2027, 2339, 5985, 3335, 4297, 1601, 1542, 7526, 5357, 3666, -559, 4011, 3852, -6136, -172, 1410, 221, 2560, -1408, 558, -1852, 1048, -8048, 2373, 1388, -3283, 6477, -973, 1804, 1685, 1428, 4929, -827, -2224, 390, 2224, 462, 4502, 6206, 3918, 4381, 7299, 5408, -724, 3589, 6256, 4374, -1623, 7783, 9118, 851, -4789, 701, 1366, 8438, 2291, -290, -2195, 1581, 714, 1562, -2952, 5538, -369, 4550, 1428, 145, -3440, -125, 1692, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0001083898896467872, 0.00023779933690093458, 0.00017991931235883385, 0.0001463345397496596, 0.00012311972386669368, 0.00015940278535708785, 0.00013192232290748507, 0.00012826202146243304, 0.00013798486907035112, 0.00019242145936004817, 0.00014341669157147408, 0.00019598097424022853, 9.9556222266983241e-05, 9.9469216365832835e-05, 0.00010018899047281593, 0.0001639561087358743, 0.000147681959788315, 0.00015344761777669191, 0.00017516528896521777, 0.00011855947377625853, 0.00014591836952604353, 0.00015792825433891267, 0.00013137522910255939, 0.0001431141427019611, 0.00018586679652798921, 0.00016899548063520342, 0.00012193501606816426, 0.00015696430637035519, 0.00012272434832993895, 0.00012591670383699238, 0.00011924481077585369, 0.00014078825188335031, 0.00019419996533542871, 8.5728366684634238e-05, 0.00012167349632363766, 0.00013634687638841569, 0.00016208464512601495, 0.00012511937529779971, 9.2265479906927794e-05, 8.241575415013358e-05, 0.00018470748909749091, 0.00015514111146330833, 0.00019937442266382277, 0.0001101154339266941, 0.00017501004913356155, 0.00014205834304448217, 0.0001416275481460616, 0.00014788976113777608, 8.95966004463844e-05, 0.00012183642684249207, 0.00018350101890973747, 0.00013815266720484942, 0.00011611638183239847, 0.00016444979701191187, 0.0001879973424365744, 0.00015389187319669873, 0.00017182230658363551, 8.4232742665335536e-05, 0.00016121134103741497, 0.00013907179527450353, 0.00016478990437462926, 0.00012293047620914876, 0.00021694965835195035, 0.00014817115152254701, 0.00010925246169790626, 0.00011980559065705165, 9.2838658019900322e-05, 9.9430202681105584e-05, 0.00012279354268684983, 0.00017291067342739552, 0.00013588437286671251, 0.00011143779556732625, 0.00011049512249883264, 0.00013396138092502952, 8.4049941506236792e-05, 8.750240522203967e-05, 0.00011144790914840996, 0.0001250415516551584, 0.00013395446876529604, 0.00016401339962612838, 0.00010211026528850198, 0.00012820935808122158, 0.00018588050443213433, 0.00016275321831926703, 0.00013834012497682124, 0.00016234470240306109, 0.00019423705816734582, 0.000131268534460105, 0.00012048224016325548, 0.00014246253704186529, 0.00013019338075537235, 0.00016409147065132856, 0.00013762935122940689, 0.00011909689783351496, 0.00019771706138271838, 0.00021180462499614805, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -8,127,-78,21,60,-34,100,84,-50,-11,27,-108,84,123,-80,20, 
  /* [1][0][][] */ -27,5,-50,-37,-7,50,36,-127,20,-60,-22,-63,-6,-29,-59,0, 
  /* [2][0][][] */ -23,-9,24,68,18,43,-98,127,-17,0,73,-56,-16,-70,-52,70, 
  /* [3][0][][] */ 99,-93,81,-7,-5,-33,-43,127,-28,56,71,56,-3,61,12,10, 
  /* [4][0][][] */ -41,-21,9,28,-82,30,-11,-127,0,-21,37,-17,33,59,98,98, 
  /* [5][0][][] */ 127,25,-45,-22,-73,9,21,66,23,0,56,91,97,10,-91,17, 
  /* [6][0][][] */ 22,-34,-54,-41,-61,12,-8,-40,-53,-44,-31,23,96,58,127,-13, 
  /* [7][0][][] */ -52,40,-47,-89,0,-67,-71,17,-89,43,-61,-57,-127,-45,-9,108, 
  /* [8][0][][] */ 47,64,72,5,60,29,83,29,68,-31,44,0,-127,-29,-95,17, 
  /* [9][0][][] */ -40,74,40,-75,-38,-36,39,-8,-44,34,-36,13,44,127,12,41, 
  /* [10][0][][] */ 83,40,-42,69,-25,-16,41,-60,-65,-20,-66,-112,-127,-74,29,85, 
  /* [11][0][][] */ 51,2,50,7,-21,-35,9,92,-71,19,-17,14,-19,-13,61,127, 
  /* [12][0][][] */ -56,-1,-3,-8,34,1,127,63,-60,22,-2,-24,-7,79,-57,113, 
  /* [13][0][][] */ 38,61,-16,41,87,21,95,91,-31,80,-68,-39,30,61,-127,-2, 
  /* [14][0][][] */ -116,127,-10,-25,-7,-7,67,-1,-21,26,123,5,-114,12,-69,65, 
  /* [15][0][][] */ -11,-22,-127,-22,76,-43,-82,-33,-15,-5,-16,-54,-12,-77,-41,41, 
  /* [16][0][][] */ 121,-24,-8,-2,30,-44,39,-20,-28,24,127,65,37,-9,-47,30, 
  /* [17][0][][] */ 9,33,-34,-112,-16,-67,127,-114,-5,-28,-55,23,43,75,-1,51, 
  /* [18][0][][] */ 19,127,-9,-47,45,-73,-20,-40,-37,120,-26,-6,-32,51,-18,-27, 
  /* [19][0][][] */ -74,-120,104,-89,40,-127,30,-27,48,36,87,113,17,-21,62,-23, 
  /* [20][0][][] */ -20,110,52,-4,4,1,30,-22,64,-12,108,-23,-127,-34,-93,0, 
  /* [21][0][][] */ -75,32,19,13,65,27,71,45,-127,55,-34,22,-24,15,-63,-19, 
  /* [22][0][][] */ 15,-65,28,7,25,-127,107,15,22,-53,-36,-72,39,-93,-62,-41, 
  /* [23][0][][] */ -57,-92,34,49,21,-22,27,-47,17,-38,78,14,1,59,58,127, 
  /* [24][0][][] */ 1,1,24,83,43,17,-52,-127,62,15,-41,13,2,6,-24,-24, 
  /* [25][0][][] */ -11,24,24,-40,-25,-2,0,-38,-26,69,-54,-20,52,127,37,1, 
  /* [26][0][][] */ -65,73,11,12,24,-77,5,-37,13,18,18,76,13,10,-85,127, 
  /* [27][0][][] */ -19,-127,-67,5,-62,84,-8,-56,27,-37,63,-28,25,-64,-121,-11, 
  /* [28][0][][] */ -37,-1,45,77,25,15,-32,-127,-115,48,107,-6,64,14,-44,-22, 
  /* [29][0][][] */ -127,111,-24,-43,-26,27,-114,-65,-46,-41,2,1,5,-60,-115,63, 
  /* [30][0][][] */ 56,91,-63,72,-96,-99,-72,-9,-34,-8,3,-114,127,24,-24,99, 
  /* [31][0][][] */ 127,27,-35,-45,-71,32,118,29,-61,-28,71,55,46,37,-22,-2, 
  /* [32][0][][] */ -20,-25,127,14,-20,65,56,16,-13,-6,-19,10,12,69,70,27, 
  /* [33][0][][] */ -4,48,-102,-58,-17,20,127,49,0,-12,27,-78,117,122,-65,67, 
  /* [34][0][][] */ -81,-28,95,22,23,-55,95,-16,-127,40,35,-44,47,62,-38,-35, 
  /* [35][0][][] */ -1,25,-61,0,-83,127,-19,-26,-24,112,16,108,-90,69,10,49, 
  /* [36][0][][] */ -7,-79,127,-48,-49,6,-45,-13,15,20,-51,77,-2,-78,-36,43, 
  /* [37][0][][] */ 81,-2,58,-47,125,-100,-45,41,-66,127,-56,10,-102,-62,109,0, 
  /* [38][0][][] */ 49,53,27,-114,1,-51,-106,59,-92,48,-117,-68,-74,-127,-119,56, 
  /* [39][0][][] */ -85,32,-64,-45,-80,-80,78,20,-127,-42,24,82,32,-3,-15,60, 
  /* [40][0][][] */ 127,21,18,-127,-92,10,40,-47,-54,-45,-32,-62,13,56,29,61, 
  /* [41][0][][] */ 92,-70,-60,-42,0,-4,-61,-15,55,-17,3,-56,127,-65,55,-32, 
  /* [42][0][][] */ -32,-101,-62,127,5,-113,-108,23,-5,5,25,73,-76,62,-69,13, 
  /* [43][0][][] */ -96,-32,-50,-127,-55,10,8,84,40,-125,-32,39,-22,-47,-43,102, 
  /* [44][0][][] */ -30,44,55,-29,-44,-11,54,111,115,-62,73,86,127,61,-16,-4, 
  /* [45][0][][] */ 26,93,-100,103,127,-111,-45,-57,117,-67,71,-68,-23,-8,-87,73, 
  /* [46][0][][] */ -33,-35,7,-12,104,-18,46,24,-14,127,-22,-112,33,73,-60,82, 
  /* [47][0][][] */ 83,-54,-25,-20,88,-16,-48,-72,-3,127,-33,35,-13,-106,-81,6, 
  /* [48][0][][] */ 25,26,-7,-127,-12,-54,93,-119,2,-2,-41,34,52,60,10,27, 
  /* [49][0][][] */ -30,127,-63,39,41,-51,61,55,-17,28,37,-99,-25,65,118,-98, 
  /* [50][0][][] */ 11,50,-31,-2,-127,0,-68,-51,54,73,33,30,-36,-46,-5,41, 
  /* [51][0][][] */ 127,-28,-56,-26,-61,88,-88,-41,44,-24,-32,73,-31,-75,-10,55, 
  /* [52][0][][] */ -11,-41,41,89,-42,-97,-127,-2,-36,-29,-44,-75,12,-61,29,64, 
  /* [53][0][][] */ 29,102,43,-127,3,105,93,-24,-2,-28,-2,-31,72,-121,-8,66, 
  /* [54][0][][] */ 24,127,-3,-25,0,-88,-92,60,10,-28,-44,107,67,71,4,60, 
  /* [55][0][][] */ -37,-4,64,18,39,-21,127,93,-87,-17,24,5,126,54,-19,4, 
  /* [56][0][][] */ 127,28,7,22,-53,120,-34,-82,-18,51,-71,16,-74,101,-26,61, 
  /* [57][0][][] */ -52,-24,-70,-53,-78,-120,68,-16,-127,-44,66,64,11,29,-19,72, 
  /* [58][0][][] */ 52,-57,57,15,-1,-78,-21,5,24,-19,-127,-22,23,-46,-44,57, 
  /* [59][0][][] */ 83,11,-127,94,2,23,67,-22,-61,-37,21,-96,-106,-66,28,104, 
  /* [60][0][][] */ -4,27,-13,12,-22,-21,-14,-3,-38,-73,67,127,-41,-107,-42,3, 
  /* [61][0][][] */ -37,34,80,-112,-62,60,15,127,5,-110,42,65,79,-12,0,121, 
  /* [62][0][][] */ 82,63,-15,-127,-25,7,9,-32,-5,37,-38,43,28,-25,-92,-73, 
  /* [63][0][][] */ 10,-19,8,-13,-66,-60,-51,3,-74,-21,-35,-24,127,12,51,-19, 
  /* [64][0][][] */ 26,20,-34,49,-93,-40,-12,-77,56,126,45,11,24,-65,-60,127, 
  /* [65][0][][] */ -30,16,-11,-19,-83,78,35,-17,55,-113,87,-62,64,62,-127,61, 
  /* [66][0][][] */ -123,85,-110,-69,32,-47,-125,-76,-93,127,101,27,-127,-75,46,76, 
  /* [67][0][][] */ 0,-29,-127,-123,64,76,16,-28,-22,-11,52,-14,20,35,9,57, 
  /* [68][0][][] */ 51,26,-13,-51,-65,35,23,38,-48,63,116,-9,-16,-47,-127,3, 
  /* [69][0][][] */ 80,-112,56,-48,11,-115,-23,127,-6,72,90,95,-25,80,-36,3, 
  /* [70][0][][] */ 56,-13,127,39,97,-10,118,-20,31,19,-59,61,-76,65,-60,28, 
  /* [71][0][][] */ 11,27,81,-68,-127,-86,13,6,-16,-10,23,-90,-78,-7,5,38, 
  /* [72][0][][] */ -59,-83,30,-127,61,-1,24,50,-73,8,-119,-22,59,126,-64,121, 
  /* [73][0][][] */ 27,22,51,-6,125,-93,-58,4,-34,95,-100,30,-89,-70,127,-18, 
  /* [74][0][][] */ -108,14,-110,-78,64,-35,-33,34,-91,-4,-127,-48,-35,-49,-48,71, 
  /* [75][0][][] */ 96,-8,40,-61,19,1,-127,-18,-10,-115,83,8,-4,-23,-18,1, 
  /* [76][0][][] */ 6,-56,-54,115,48,59,80,-47,88,-124,67,127,25,-114,-74,55, 
  /* [77][0][][] */ -41,-30,112,-43,33,-29,-8,-127,15,15,48,96,40,42,-6,17, 
  /* [78][0][][] */ -50,7,18,-37,6,-66,29,-12,32,-15,12,-110,-117,-73,-127,-63, 
  /* [79][0][][] */ -89,-54,-20,24,127,19,-24,25,29,33,-23,32,-57,-74,-53,-20, 
  /* [80][0][][] */ 13,-99,48,127,-35,-17,-106,67,-6,26,52,-10,-79,0,-5,48, 
  /* [81][0][][] */ 127,49,-28,95,-10,24,26,111,22,16,119,62,105,34,71,-11, 
  /* [82][0][][] */ -59,1,5,-34,37,-127,-121,-82,6,88,-49,-35,-27,91,-80,-21, 
  /* [83][0][][] */ 103,-13,88,-33,-15,3,-127,-10,10,-117,19,-48,-23,11,19,-36, 
  /* [84][0][][] */ 14,-68,-108,17,127,13,42,29,-95,14,-95,-12,28,-52,-89,31, 
  /* [85][0][][] */ 2,111,29,-61,89,-11,56,-110,127,-48,46,-7,92,-99,-9,14, 
  /* [86][0][][] */ 111,-31,127,40,-1,-46,86,50,-69,-61,-93,-47,39,32,-72,14, 
  /* [87][0][][] */ -3,7,16,-85,63,-20,-41,6,33,-46,78,-32,-82,-127,-14,29, 
  /* [88][0][][] */ -59,-27,29,-6,16,20,-66,-47,-6,5,-77,-127,-43,-46,-21,-12, 
  /* [89][0][][] */ -80,21,-3,-85,28,-14,-127,22,76,19,-59,-3,-17,-100,-54,-6, 
  /* [90][0][][] */ -11,-11,-41,-90,127,21,-55,43,45,56,37,-4,32,17,-84,-11, 
  /* [91][0][][] */ -38,-56,15,33,-45,-16,-1,56,-29,-56,31,-24,-7,47,5,127, 
  /* [92][0][][] */ -25,72,-7,-6,-16,67,-95,51,-33,-3,69,11,-39,127,51,29, 
  /* [93][0][][] */ 0,58,-62,-60,55,69,-87,-4,68,69,70,69,-127,12,-42,87, 
  /* [94][0][][] */ 33,61,88,19,-127,-36,12,-10,32,-14,31,-9,-53,-35,12,-16, 
  /* [95][0][][] */ -16,26,20,-9,127,-22,-76,73,7,5,-56,84,9,11,78,-16, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015253676101565361, 0.0033465428277850151, 0.0025319990236312151, 0.0020593616645783186, 0.0017326601082459092, 0.0022432706318795681, 0.0018565389327704906, 0.0018050274811685085, 0.0019418568117544055, 0.0027079414576292038, 0.0020182987209409475, 0.0027580342721194029, 0.0014010517625138164, 0.0013998273061588407, 0.0014099566033110023, 0.0023073493503034115, 0.002078323857858777, 0.002159463707357645, 0.0024650958366692066, 0.0016684839501976967, 0.0020535048097372055, 0.002222519600763917, 0.0018488395726308227, 0.0020140409469604492, 0.0026156979147344828, 0.0023782684002071619, 0.0017159878043457866, 0.0022089539561420679, 0.0017270960379391909, 0.0017720219912007451, 0.0016781286103650928, 0.0019813089165836573, 0.0027329702861607075, 0.0012064527254551649, 0.0017123074503615499, 0.001918805530294776, 0.0022810122463852167, 0.0017608011839911342, 0.001298449351452291, 0.0011598344426602125, 0.0025993830058723688, 0.0021832962520420551, 0.0028057901654392481, 0.0015496511477977037, 0.0024629111867398024, 0.0019991828594356775, 0.0019931201823055744, 0.0020812482107430696, 0.001260890276171267, 0.0017146003665402532, 0.0025824042968451977, 0.0019442182965576649, 0.0016341023147106171, 0.002314297016710043, 0.0026456809137016535, 0.0021657156758010387, 0.0024180500768125057, 0.0011854048352688551, 0.0022687222808599472, 0.0019571532029658556, 0.0023190833162516356, 0.0017299968749284744, 0.0030531259253621101, 0.0020852081943303347, 0.0015375065850093961, 0.0016860205214470625, 0.0013065156526863575, 0.0013992782915011048, 0.0017280697356909513, 0.0024333666078746319, 0.001912296749651432, 0.0015682607190683484, 0.0015549944946542382, 0.0018852344946935773, 0.0011828322894871235, 0.001231418689712882, 0.0015684030950069427, 0.0017597060650587082, 0.00188513717148453, 0.0023081556428223848, 0.001436994643881917, 0.0018042863812297583, 0.0026158906985074282, 0.0022904211655259132, 0.0019468565005809069, 0.0022846721112728119, 0.0027334922924637794, 0.0018473380478098989, 0.0016955429455265403, 0.0020048709120601416, 0.0018322074320167303, 0.0023092543706297874, 0.0019368536304682493, 0.0016760471044108272, 0.0027824663557112217, 0.0029807200189679861, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 11098, 16375, -5581, -752, -738, 5212, 2798, 6300, 19446, -7908, -5295, 9021, -12259, 12637, 572, 13923, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.8385932788951322e-05, 9.2883346951566637e-05, 7.2649272624403238e-05, 7.2766750236041844e-05, 7.9238408943638206e-05, 7.4702176789287478e-05, 7.3467112088110298e-05, 6.1613653087988496e-05, 9.7659300081431866e-05, 7.7981334470678121e-05, 5.6775013945298269e-05, 5.2647879783762619e-05, 7.6928568887524307e-05, 6.6095832153223455e-05, 0.00010056739120045677, 6.5406507928855717e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -127,45,77,-19,-64,-16,-60,-21,-39,-2,-10,-27,49,61,44,-42,13,-7,109,17,23,-51,121,73,70,16,7,39,-66,-112,-84,23,-48,-53,37,-6,12,30,2,35,-10,9,-77,-2,-68,-43,1,106,-28,-5,-42,-14,-19,-15,20,-57,-121,2,-13,81,44,18,-4,16,-35,-65,-50,24,-51,-83,29,6,-8,2,-79,-55,-35,22,-50,8,-62,89,82,-79,13,41,10,69,30,-22,-11,-38,-44,-33,-53,15, 
  /* [1][0][][] */ 54,2,33,-39,-74,-22,-22,22,-46,26,34,-42,-17,-16,-52,-30,-20,7,-66,21,-22,-60,24,45,-23,-56,-21,-32,59,-103,95,-76,44,21,-8,45,34,52,-15,-36,42,5,7,-6,12,56,-127,-52,-56,-50,-19,-12,43,-34,-33,35,1,-16,-41,3,19,37,-11,-82,-29,-9,-53,-9,4,-5,-71,-30,-34,-27,17,-69,12,22,42,-64,-29,-31,-68,-19,49,-57,-33,12,-76,-10,-63,43,43,41,-48,35, 
  /* [2][0][][] */ 77,-24,26,12,33,-71,62,4,6,-27,-2,-12,-92,-36,10,-33,-94,-45,-42,41,19,-73,-70,16,-4,-76,14,-31,-33,60,-60,123,-54,127,-31,49,-16,-5,-25,-37,-106,82,67,13,-82,-5,-9,-22,40,8,-34,-49,48,-3,-19,77,35,3,50,2,20,56,-33,20,96,30,-17,5,35,64,-63,22,62,42,68,47,27,-87,71,71,93,-1,-40,26,-79,45,8,91,30,5,-15,18,-54,56,-42,51, 
  /* [3][0][][] */ -7,-2,-41,4,28,-5,6,-73,1,59,48,57,58,-2,-60,35,15,-38,26,13,17,127,31,-53,18,23,-11,2,69,-42,67,-1,-19,43,-31,-24,21,55,29,19,-86,-20,-40,21,-33,31,30,10,-12,-49,11,-27,43,-89,-23,-35,17,98,-17,7,-3,-22,-32,10,48,30,-39,11,-22,-2,10,-51,-43,-43,33,-11,12,-4,-44,-49,-19,3,-55,6,-22,-26,31,-28,9,29,35,-17,37,34,-43,63, 
  /* [4][0][][] */ 29,9,-45,19,26,28,-45,6,-25,83,90,-9,13,7,8,-59,12,-21,-30,47,22,-36,62,81,-59,-2,-127,14,-49,-65,8,27,-70,-42,18,69,11,32,23,32,-40,-42,51,-22,-2,5,-24,58,-47,53,23,15,55,-8,-85,20,64,-19,2,-5,35,-14,29,14,-50,8,-26,13,-47,27,-43,49,30,-67,-37,-54,28,-52,-12,13,-49,78,-78,9,-25,27,22,-66,42,4,27,14,-62,-24,52,21, 
  /* [5][0][][] */ -80,50,53,-20,45,-21,56,-43,-5,23,-2,-31,29,-34,-21,-32,-9,-22,51,29,-122,-35,-92,42,-57,0,49,19,45,-73,-12,52,64,117,-7,48,-2,40,32,-20,-22,108,62,-39,-3,50,39,-1,9,19,-17,42,0,-41,28,-88,33,-48,-52,-68,71,96,-48,-7,90,-38,-93,-59,-54,-8,-76,-5,-8,17,-26,-44,22,-49,-27,-8,127,-10,33,-89,-86,33,34,7,-42,39,30,-19,-14,41,-11,91, 
  /* [6][0][][] */ 48,-11,-76,16,-46,-89,72,82,-66,66,-5,61,-127,-83,39,41,4,-46,-18,-2,-19,-32,-55,-61,-63,55,62,21,27,19,83,-50,34,13,5,-41,19,3,13,67,1,11,-63,-22,-6,-52,-77,1,40,-88,-22,61,23,18,-27,-54,66,35,13,-8,-69,48,-68,1,21,29,-13,56,26,40,-21,-50,-36,24,90,44,43,-40,50,-60,-4,-41,-50,47,-2,-55,35,17,-32,61,39,21,-23,8,-45,101, 
  /* [7][0][][] */ 44,79,-27,-57,-35,-23,28,17,-88,30,-56,-59,-58,11,13,0,-43,-41,-27,69,-13,127,9,32,-14,5,13,34,47,49,78,-41,78,34,-16,10,2,-21,6,19,-53,-19,5,-51,6,-43,72,-28,36,-64,-98,-32,-44,14,2,-4,14,5,-105,11,0,121,24,-32,-43,14,-54,14,-50,-17,-118,19,27,62,-43,45,-59,55,23,-67,-22,-59,59,-70,52,-33,-9,-1,-23,65,-95,41,72,-46,-61,13, 
  /* [8][0][][] */ -2,78,-55,48,-29,-21,-82,23,-88,-25,-3,10,-20,39,40,92,0,-60,4,11,42,11,20,-5,-28,67,-8,21,-18,-20,-41,-27,-31,-65,-31,-82,-47,33,49,11,-7,-29,44,11,-27,-41,5,-5,-30,-27,48,77,-2,-33,-82,97,-29,40,-18,-42,-55,-3,12,60,-32,-87,-36,-12,-40,9,15,15,-35,-46,-121,-25,-48,45,-80,-57,-37,-2,-39,-40,-1,-7,26,13,12,60,-64,1,-88,-127,36,-57, 
  /* [9][0][][] */ -32,30,-86,49,-16,-40,83,39,20,41,-14,105,-5,-1,26,127,21,14,76,9,33,16,28,-104,-22,-1,36,-8,11,-11,46,69,-33,2,7,-116,23,-11,-17,-17,-26,35,41,-30,-11,-4,31,26,37,87,40,-5,-61,-83,5,4,5,-2,82,-12,-76,56,-58,-23,99,-25,-17,13,-58,11,48,59,-24,91,-30,-29,-21,26,-51,-12,51,-24,62,-5,23,-2,-17,-24,-48,27,5,-7,57,46,-40,-2, 
  /* [10][0][][] */ 72,-7,-27,7,-41,-40,82,7,-5,-37,-30,-6,-115,-10,9,-1,-82,-33,39,22,48,44,25,9,-35,81,31,0,-51,-68,-33,-17,73,-45,50,-2,77,-98,92,125,20,-68,3,10,-16,-101,-12,71,20,84,-79,-41,-23,21,6,43,14,-74,71,40,-24,44,-78,-17,-40,-50,25,44,27,-31,-6,48,127,31,19,-91,37,-44,50,14,-58,26,35,26,-32,-25,-1,49,-56,-20,24,54,60,61,-20,6, 
  /* [11][0][][] */ -61,-39,69,-64,17,-23,-18,-39,45,-59,5,-8,-43,-4,1,8,-71,-1,76,14,-46,12,-90,-71,33,23,-36,49,37,-52,30,-35,22,-4,9,-46,-74,19,-123,13,-74,66,-54,46,12,-5,-13,-35,12,-36,-65,-47,-1,15,71,-57,-32,-70,18,-55,-39,-43,-37,-111,-11,-51,66,72,127,17,76,-3,-32,-18,62,-33,108,48,18,78,26,2,-20,83,73,-2,-7,4,-82,-69,-9,8,41,39,66,81, 
  /* [12][0][][] */ 49,-26,12,-42,19,108,-21,48,27,58,-7,54,-12,29,19,7,-69,59,16,45,115,-9,70,-70,11,22,-77,-72,-20,76,-1,-9,33,-5,11,-28,46,-10,-36,-52,29,-34,35,62,-28,39,0,-29,-63,27,-11,23,-18,-14,13,12,-44,46,1,47,37,-76,4,-104,-17,127,-18,-37,-10,-36,45,-10,7,9,-10,50,-16,37,-56,3,-16,23,126,24,-13,63,-36,-66,61,2,-84,50,75,-2,-33,-95, 
  /* [13][0][][] */ -15,40,-1,-57,-37,-20,1,-18,13,-36,-30,-93,42,-127,-38,-72,-26,-12,-84,-20,-93,-48,-3,97,-45,-2,112,2,20,-40,50,35,7,10,-108,127,-22,-58,21,-83,100,10,-25,29,-24,-91,66,-45,98,-18,-48,38,26,9,5,78,55,-50,-30,-10,67,62,-12,-99,21,65,-47,55,-60,-22,-96,1,-53,14,-42,-83,-105,-2,41,87,-1,66,53,-91,35,57,20,-1,-8,-11,-13,7,-62,19,-41,5, 
  /* [14][0][][] */ -21,31,-90,-33,90,95,-85,-16,51,-42,86,-13,35,-27,-42,-66,-60,21,27,127,9,-31,-13,2,1,38,-19,62,14,-9,-17,17,67,5,-40,12,-18,63,63,13,46,13,20,-4,-13,-48,57,-33,38,-8,0,-21,35,12,-25,36,14,70,-76,-12,-6,-59,-34,-93,39,-50,-51,7,-70,53,-20,43,1,-20,-18,-32,33,-19,-47,-42,37,18,0,-20,-25,60,-6,-10,-20,70,72,11,-10,-29,-60,-57, 
  /* [15][0][][] */ -68,-54,69,-50,14,-40,-35,-82,-31,9,-18,70,-40,-18,40,101,-121,-24,32,-79,24,-23,-7,-79,54,-13,42,-51,-64,-101,-72,25,-41,49,87,-118,-9,-49,33,-36,-13,-14,39,-11,4,8,54,102,-63,-10,4,-49,-45,56,2,-72,-109,-38,97,7,-38,27,-110,20,-105,10,11,13,58,-82,95,-33,74,-44,-41,-42,21,31,50,30,-23,71,54,36,11,-35,-127,15,-22,-64,-95,35,55,-45,-3,65, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0024814021307975054, 0.0039475420489907265, 0.0030875939410179853, 0.0030925867613404989, 0.003367632394656539, 0.0031748425681143999, 0.0031223522964864969, 0.0026185803581029177, 0.0041505200788378716, 0.0033142066095024347, 0.0024129380472004414, 0.002237534848973155, 0.0032694640103727579, 0.002809072844684124, 0.0042741140350699425, 0.0027797764632850885, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -1901, -264, -5318, -5901, -579, 6077, -1151, 1217, -1527, -2806, 7622, -2052, -2784, 10985, 9158, -4689, 18555, 3991, -5160, 63, -2272, -306, -3291, -1688, 526, -4596, -1087, -5320, 2931, -9396, 3258, 103, 13598, 1639, -4558, -37, -3031, -1674, -903, 8679, 256, -479, -969, -5835, 8960, 16065, 2830, 10077, 1717, 13463, 18078, -3286, -481, -1910, -1440, 10713, -2166, 1462, 12971, 8630, 7342, 13369, 11207, -9329, -155, -2094, -3454, 1879, -3148, -2144, 587, 4068, 13478, -55, -1660, 13997, -1151, -409, 8023, -1197, 192, 18075, -832, 1517, 17026, 680, -5044, -4067, -1196, -5793, 16907, 350, -1597, -572, -4559, -4533, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00023291040270123631, 0.00017169378406833857, 0.00011396617628633976, 0.0001247944455826655, 0.00016479319310747087, 0.00024487017071805894, 0.00026491339667700231, 0.00020148967450950295, 0.00017083689454011619, 0.00013792036043014377, 0.00011101002019131556, 0.00031748515903018415, 0.00019002860062755644, 0.00012234103633090854, 0.0001393118582200259, 0.00011754697334254161, 9.4409311714116484e-05, 0.00017380669305566698, 0.00014887223369441926, 9.9768847576342523e-05, 0.00013946571561973542, 0.00021330684830900282, 0.00017438021313864738, 0.00017929346358869225, 0.00047844619257375598, 0.00019124599930364639, 0.00020776665769517422, 9.3308364739641547e-05, 0.00013069620763417333, 7.1721224230714142e-05, 0.00023741682525724173, 0.00024930445943027735, 0.00014648056821897626, 0.00016156575293280184, 0.00019032697309739888, 0.00040394550887867808, 0.00018149371317122132, 0.00025550497230142355, 0.00023267228971235454, 0.00011413116590119898, 0.00016050916747190058, 0.00022165296832099557, 0.00018349556194152683, 0.0001038931732182391, 0.00013127320562489331, 8.7585125584155321e-05, 0.00018541749159339815, 0.00014261039905250072, 0.00014038161316420883, 6.5471678681205958e-05, 7.431615813402459e-05, 0.00011743885988835245, 0.00014336091408040375, 0.00013681677228305489, 0.00019311069627292454, 0.00013500251225195825, 0.00016722634609322995, 0.00015493937826249748, 0.00012090279051335528, 0.00010236124944640324, 0.00016660684195812792, 0.00014019962691236287, 0.00012362517009023577, 9.704930562293157e-05, 0.00012912305828649551, 0.00023688972578383982, 0.00019223499111831188, 0.00016470771515741944, 0.00018979929154738784, 0.00016892726125661284, 0.00021551539248321205, 0.00010997594654327258, 0.00011276717123109847, 0.00019513994629960507, 0.00026080754469148815, 8.7632477516308427e-05, 0.0001140446838689968, 0.00021650563576258719, 0.00014279664901550859, 0.00024057998962234706, 0.00022248114692047238, 8.1353762652724981e-05, 0.00016757159028202295, 0.00014058066881261766, 9.3419483164325356e-05, 0.00015435299428645521, 0.0001062787341652438, 0.00016910239355638623, 0.00015350077592302114, 0.00018665232346393168, 6.681805825792253e-05, 0.00026420946232974529, 0.00018385617295280099, 0.00025961108622141182, 0.00013545692490879446, 0.00025116855977103114, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 46,127,12,27,-36,-10,38,30,65,-73,-111,39,-25,-1,22,-63,-102,3,19,30,40,71,104,68,16,-10,-49,-4,-30,3,11,-12,-63,-14,-17,101,14,65,2,-8,14,-46,-4,43,-127,-53,16,4,-37,-89,-41,-14,10,51,-37,-6,-89,-86,-54,-127,-104,-11,-98,13,-30,60,69,-13,-21,45,63,-6,-30,-2,39,12,6,-22,-113,50,-8,-92,62,-8,-85,-53,-27,18,-121,15,-125,55,72,1,69,13, -37,-28,7,111,-19,93,-21,-10,55,35,-127,64,-32,-67,-102,125,-127,54,36,81,127,2,127,127,37,13,15,49,-17,110,-22,-127,71,74,19,31,98,115,-28,-127,127,-10,104,127,-51,-84,127,-42,-18,-127,-127,-42,14,127,-24,-127,34,21,-93,-94,43,-127,-68,78,-20,87,127,-33,13,127,127,-3,-81,19,-35,-71,33,-51,-9,127,-14,-72,127,-63,-127,-29,98,60,127,93,-127,0,127,-25,127,28, 41,-103,28,-1,-19,-31,-10,38,56,86,-90,22,-22,55,-21,-108,-41,21,-7,13,50,50,69,74,17,-35,17,28,2,43,-25,-36,-57,-86,-16,70,22,-11,10,-18,-14,14,-14,50,-33,-16,-1,19,11,-59,8,13,9,9,26,-1,79,-91,-46,-86,-127,11,-70,7,34,23,-8,-2,-22,24,22,0,-21,-50,-5,0,15,2,-118,21,1,-88,39,-4,3,-43,1,-11,-110,5,-35,37,30,43,42,-5, 
  /* [0][1][][] */ 102,-2,69,127,7,-61,127,32,-14,-127,-75,127,11,-127,-52,25,-52,-68,78,42,-94,3,-126,-73,-19,54,-127,127,-102,67,126,71,3,60,23,127,-127,70,-16,-38,52,-127,27,46,-121,-105,4,-127,-127,-101,-108,12,127,-47,102,3,-127,-5,-54,-13,-80,-56,-52,61,-93,-8,91,-99,-48,19,-41,-127,-119,65,127,-79,127,80,-73,-32,127,-127,-34,98,-49,-15,1,96,5,15,-55,37,4,-82,54,-5, -127,20,-87,120,-96,-127,-109,-127,63,16,7,29,-46,-90,-47,127,-82,-127,127,127,36,-127,-125,81,-127,127,22,79,-99,-56,-127,49,-127,71,127,-11,15,127,127,-101,-55,30,39,37,-8,-127,-89,-104,17,-113,-79,127,35,68,74,-62,53,11,95,-39,-15,-42,-127,127,12,-127,61,127,17,47,-96,-79,-34,63,-93,-127,119,127,127,-72,-74,-22,-107,79,-93,-82,127,127,114,127,-95,-127,-96,-53,29,127, 74,-15,93,52,10,-42,9,22,-23,122,-64,82,9,-35,-127,42,3,-37,31,2,-97,17,-88,-76,0,1,115,-19,127,127,1,-82,-40,-127,0,109,-112,-9,-44,-42,-20,84,23,85,8,-25,-15,-59,108,-80,-92,-3,56,-70,-127,38,118,-8,-127,59,-52,-43,9,43,127,-29,2,-12,-60,-14,-25,-50,-127,-127,9,-60,-12,-19,-115,-22,-80,-124,-19,127,-100,15,-3,12,-39,-17,16,55,-7,127,41,-5, 
  /* [0][2][][] */ 34,-123,62,14,29,-2,32,53,-47,-57,13,-32,37,-12,-5,24,-35,14,0,47,-3,52,38,-32,31,76,-10,-5,-41,31,0,-2,-35,-20,-12,2,68,-11,12,-17,5,24,-6,-45,-35,-43,-19,10,-46,35,-57,19,-32,7,-33,-15,-15,-9,22,34,-67,-10,26,5,-44,68,-62,-16,34,9,16,66,-42,4,23,-8,-36,-35,-30,23,19,-22,-14,-37,-61,33,-42,-8,-82,38,21,8,-4,7,4,-11, -44,15,127,26,127,62,-20,20,-127,3,-33,-31,127,-25,-49,0,-17,66,14,-41,22,34,106,-10,65,-39,-4,61,-20,114,-20,9,-39,11,24,-20,85,24,31,-102,-19,-2,-127,11,18,-11,-65,-24,-1,-61,-104,84,111,-47,-24,-80,-36,127,-13,1,67,-119,77,53,-18,38,-45,21,127,-12,30,83,-75,16,-16,-65,-9,-97,-43,-43,5,-101,-37,-64,-53,127,54,-4,100,33,72,14,-26,-9,-14,-7, 25,60,56,-28,16,-18,-10,36,-8,48,54,-3,20,9,-41,47,-41,1,6,10,-13,29,9,-39,10,78,16,31,3,25,-33,-53,-49,-20,-8,2,48,-60,7,9,-7,17,16,-2,-24,-4,-20,8,2,31,-82,-3,-8,-15,19,14,-20,8,15,61,-66,10,13,-9,55,34,-62,25,28,-12,17,69,-14,-18,-2,-16,-34,-5,-19,22,-16,-67,-9,-2,-36,26,-41,-14,-102,49,58,14,-9,11,-16,-11, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012118159793317318, 0.0089331036433577538, 0.0059295776300132275, 0.0064929644577205181, 0.0085740704089403152, 0.012740417383611202, 0.01378325279802084, 0.010483361780643463, 0.0088885203003883362, 0.0071758967824280262, 0.0057757711037993431, 0.016518523916602135, 0.0098870508372783661, 0.0063653155229985714, 0.0072482950054109097, 0.0061158840544521809, 0.0049120481126010418, 0.0090430369600653648, 0.007745714858174324, 0.0051909009926021099, 0.0072563006542623043, 0.011098201386630535, 0.0090728765353560448, 0.0093285096809267998, 0.024893209338188171, 0.0099503910169005394, 0.010809948667883873, 0.0048547666519880295, 0.0068000289611518383, 0.0037316032685339451, 0.012352625839412212, 0.012971131131052971, 0.0076212780550122261, 0.008406149223446846, 0.0099025750532746315, 0.021016992628574371, 0.0094429869204759598, 0.013293738476932049, 0.012105771340429783, 0.0059381620958447456, 0.0083511760458350182, 0.011532443575561047, 0.0095471413806080818, 0.005405486561357975, 0.0068300501443445683, 0.0045569906942546368, 0.0096471384167671204, 0.0074199163354933262, 0.0073039541020989418, 0.0034064440988004208, 0.0038666161708533764, 0.0061102588661015034, 0.0074589643627405167, 0.0071184774860739708, 0.010047409683465958, 0.007024083286523819, 0.0087006660178303719, 0.0080613838508725166, 0.0062904846854507923, 0.0053257816471159458, 0.0086684338748455048, 0.0072944853454828262, 0.0064321286045014858, 0.0050494051538407803, 0.006718179676681757, 0.01232520118355751, 0.010001847520470619, 0.0085696233436465263, 0.0098751196637749672, 0.0087891630828380585, 0.011213109828531742, 0.0057219690643250942, 0.0058671943843364716, 0.010152989998459816, 0.01356962788850069, 0.004559454508125782, 0.005933662410825491, 0.011264631524682045, 0.0074296062812209129, 0.012517202645540237, 0.011575533077120781, 0.0042327772825956345, 0.0087186284363269806, 0.0073143108747899532, 0.0048605483025312424, 0.0080308746546506882, 0.0055296057835221291, 0.0087982751429080963, 0.0079865343868732452, 0.0097113857045769691, 0.0034764951560646296, 0.013746626675128937, 0.0095659038051962852, 0.013507376424968243, 0.0070477258414030075, 0.013068118132650852, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 5682, 3394, 1684, -1260, 5961, 8157, 8597, 1478, -196, 8472, 689, -4281, 2577, 3456, 804, -203, 3882, 7771, -1506, -151, 5268, 9091, 7894, -1447, -3364, -1288, 15436, -25, 2219, 1292, 15833, -1405, 9250, 2714, 5667, -3755, 1394, -4513, 48, 1506, 2465, 1304, 1359, -421, 1447, 1825, 3026, 3759, 3891, 3502, 6898, 2770, -2695, 1542, 1256, 1815, 2364, 3311, 7081, 1416, -1235, 5184, 3035, 3976, 4337, 6496, -4288, 2189, 5317, -628, 7411, 2775, 2573, 3579, 3504, 2475, -757, 1906, 3298, 2449, 2788, 3138, 9941, 513, 2105, 4383, 1020, -1007, 10587, -415, 945, -1288, 11018, 2445, 25, -951, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00013020729238633066, 0.00010027681855717674, 0.00011560611164895818, 0.0001795958960428834, 0.00012412537762429565, 9.5011986559256911e-05, 9.9242060969118029e-05, 0.00017423716781195253, 0.00015386048471555114, 9.4828457804396749e-05, 0.00024305093393195421, 0.00010295264655724168, 0.00017152604414150119, 0.00014048533921595663, 0.0001327646168647334, 0.00015708054706919938, 0.00016848677478265017, 0.00010037681931862608, 0.00010124751861440018, 0.00014942292182240635, 0.00010817871225299314, 9.2353628133423626e-05, 0.00010710091737564653, 0.0001756933779688552, 0.00016133484314195812, 0.00010667627066140994, 6.0287205997155979e-05, 0.000133662557345815, 0.00012841953139286488, 0.00016978898202069104, 5.7035795180127025e-05, 0.00019312649965286255, 9.0226290922146291e-05, 0.00019200889801140875, 0.0001179311511805281, 0.00016159085498657078, 0.00012832315405830741, 0.00013521984510589391, 0.00014886648568790406, 0.00018697504128795117, 0.00016336738190148026, 0.00020672794198617339, 0.00024244064115919173, 0.0002062363491859287, 0.00021197635214775801, 0.00019978608179371804, 0.00017684281920082867, 0.00015281808737199754, 0.00015563557099085301, 0.00014237717550713569, 0.00010535147885093465, 0.0001507011620560661, 0.00014159241982270032, 0.00020418866188265383, 0.00016936096653807908, 0.00020799515186809003, 0.00014031397586222738, 0.00011883070692420006, 0.00010962087981170043, 0.00013579090591520071, 0.00017454942280892283, 0.00013592792674899101, 0.00019114585302304476, 0.00015925511252135038, 0.00012799302930943668, 0.00011351422290317714, 0.00013237143866717815, 0.00018833580543287098, 0.00012158863682998344, 0.00020315617439337075, 9.3335220299195498e-05, 8.4126208093948662e-05, 0.00014942185953259468, 0.00011820578220067546, 0.00015976998838596046, 0.00010334315447835252, 0.00012830809282604605, 0.0001775787677615881, 0.00012538970622699708, 0.00020420599321369082, 0.00016739736020099372, 0.00012691825395449996, 8.1947335274890065e-05, 0.00014166640175972134, 0.00016920424241106957, 0.00014679139712825418, 0.00015860761050134897, 0.00022452330449596047, 8.6505555373150855e-05, 0.00019419380987528712, 0.00021687726257368922, 0.00018487652414478362, 7.8701370512135327e-05, 0.00015967681247275323, 0.00024656055029481649, 0.00013945443788543344, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -65,64,-37,16,-35,-49,-44,2,56,-12,37,-59,92,-104,25,-127, 
  /* [1][0][][] */ -99,57,-86,-100,-91,33,-17,57,-41,20,71,-57,63,127,36,28, 
  /* [2][0][][] */ -41,-20,-85,-23,-9,-53,28,-48,-102,113,62,10,71,44,-62,127, 
  /* [3][0][][] */ -43,-69,8,-49,-76,-6,-62,-112,-18,15,39,-87,-72,-43,-127,-47, 
  /* [4][0][][] */ 67,6,-11,46,-72,-22,-127,24,8,71,22,60,-11,18,-19,-85, 
  /* [5][0][][] */ -115,77,-118,-13,41,-55,-16,-69,117,4,-5,-55,-9,-127,-89,-118, 
  /* [6][0][][] */ -28,-54,-26,37,-98,85,50,-43,-21,-41,123,-30,15,8,-127,-5, 
  /* [7][0][][] */ -18,127,127,-88,51,79,-14,-66,47,71,-73,-19,61,-2,18,85, 
  /* [8][0][][] */ -40,12,25,-27,49,-5,91,127,-58,-11,-53,-87,44,59,-93,-27, 
  /* [9][0][][] */ 30,31,68,25,-90,-30,-77,-90,75,6,127,24,-19,-80,24,3, 
  /* [10][0][][] */ -1,-111,25,-66,-127,62,25,0,-36,-44,-32,36,-10,53,-114,7, 
  /* [11][0][][] */ 127,-47,-6,88,-108,-44,46,-8,109,86,-52,35,19,-91,-23,98, 
  /* [12][0][][] */ -61,-22,127,-14,50,-11,19,56,64,-25,78,60,-59,11,-100,23, 
  /* [13][0][][] */ -12,-37,36,15,-21,15,127,43,-125,27,-7,-14,-10,113,82,-89, 
  /* [14][0][][] */ 127,-89,127,26,59,68,88,60,80,87,62,35,83,-25,38,-65, 
  /* [15][0][][] */ 6,127,-7,-46,39,96,-65,56,-53,-25,-42,-7,-67,98,-13,-40, 
  /* [16][0][][] */ -35,71,110,-39,14,75,15,-4,-13,18,-22,42,100,23,90,127, 
  /* [17][0][][] */ 5,122,59,-125,19,-29,20,-82,-64,78,-7,67,-71,-1,127,-50, 
  /* [18][0][][] */ -75,-19,-69,-76,126,57,-48,-71,38,94,121,85,-10,127,-21,-3, 
  /* [19][0][][] */ 61,127,106,81,58,-33,-29,1,-56,110,54,113,82,90,-62,32, 
  /* [20][0][][] */ 124,17,-12,100,-94,4,-25,43,-40,-77,-127,-31,73,-64,48,5, 
  /* [21][0][][] */ -103,-127,-34,99,-14,-8,-113,51,23,-10,34,33,-46,9,-86,20, 
  /* [22][0][][] */ -12,-30,-54,-34,127,-3,-37,42,54,60,42,61,-25,21,-2,36, 
  /* [23][0][][] */ -56,27,-22,20,2,69,88,82,-12,127,-19,-31,6,25,-40,-31, 
  /* [24][0][][] */ 30,-90,31,4,127,26,83,-23,50,23,47,24,-69,33,-12,-8, 
  /* [25][0][][] */ 122,-51,82,12,4,-13,-37,87,112,-11,-68,8,127,-59,93,39, 
  /* [26][0][][] */ 57,32,104,86,72,-27,-62,-7,5,68,8,127,20,-89,29,-64, 
  /* [27][0][][] */ -45,22,-59,33,-29,74,7,-77,28,-73,127,25,46,-27,116,119, 
  /* [28][0][][] */ -37,33,-85,-127,21,-74,-4,-56,-91,78,-46,28,-35,22,-31,78, 
  /* [29][0][][] */ 78,114,-62,34,32,89,-47,-14,41,51,2,36,-127,21,-31,55, 
  /* [30][0][][] */ -25,97,-123,-51,76,-31,1,35,-85,64,-89,-11,-8,65,-1,127, 
  /* [31][0][][] */ 15,-119,77,43,47,-68,-79,42,-11,-22,41,-35,-60,47,30,127, 
  /* [32][0][][] */ -64,69,-10,28,-96,59,18,43,9,-127,27,-82,28,40,40,51, 
  /* [33][0][][] */ -75,-14,45,76,-12,13,-47,16,-34,-61,24,-7,-18,-9,3,127, 
  /* [34][0][][] */ 0,27,-86,-91,55,-5,-10,59,33,-9,-6,-13,-70,-29,-41,127, 
  /* [35][0][][] */ 67,0,25,-20,0,12,-66,-12,-23,-127,-40,12,-6,-22,34,-17, 
  /* [36][0][][] */ -18,12,-127,-36,35,83,-1,39,-43,2,77,22,24,22,-70,62, 
  /* [37][0][][] */ 40,36,58,-47,66,-112,34,-19,-127,64,-79,-20,21,44,103,37, 
  /* [38][0][][] */ -30,127,46,-37,48,18,59,-101,21,12,-117,42,-47,-96,-99,4, 
  /* [39][0][][] */ 113,51,-107,-96,-28,-29,-7,-60,33,-4,-11,-56,60,-19,-127,-82, 
  /* [40][0][][] */ -59,19,-72,-72,-61,-15,31,-127,8,-4,0,-32,43,88,49,49, 
  /* [41][0][][] */ -42,-80,2,127,11,-3,-63,-3,-12,-61,66,-64,-65,12,-10,25, 
  /* [42][0][][] */ -29,49,-27,-127,18,8,18,-30,52,-10,-35,21,63,-17,-22,24, 
  /* [43][0][][] */ 2,47,20,28,127,37,15,22,10,53,-6,-76,-108,-36,-14,-20, 
  /* [44][0][][] */ 90,-25,39,50,-24,0,-6,50,27,-36,34,9,127,10,-46,-21, 
  /* [45][0][][] */ -1,-101,-44,36,-42,-92,3,47,32,-12,16,34,-82,127,26,-22, 
  /* [46][0][][] */ -2,-74,60,74,-8,13,-102,46,25,-39,17,-44,55,63,56,127, 
  /* [47][0][][] */ -37,-56,23,90,6,3,51,25,5,-64,-127,-37,48,-15,-55,9, 
  /* [48][0][][] */ -49,113,-25,-51,-18,61,-10,-127,12,-63,66,-39,39,-119,-67,27, 
  /* [49][0][][] */ -63,7,42,-44,4,7,124,127,-32,-36,-7,28,-50,40,-57,26, 
  /* [50][0][][] */ 69,52,-94,19,25,-119,-46,-22,-85,91,-68,-2,22,-99,-127,-62, 
  /* [51][0][][] */ -57,67,-30,127,-39,54,-67,-80,-69,-84,-6,-79,16,49,-6,126, 
  /* [52][0][][] */ -127,-5,27,6,31,42,55,12,17,-98,-49,-44,-118,-69,-126,-18, 
  /* [53][0][][] */ -37,-74,-58,-127,-37,-2,9,74,62,-79,-55,47,-50,25,55,102, 
  /* [54][0][][] */ -8,-69,7,13,-61,77,80,-30,-9,-93,67,37,-30,-19,-127,47, 
  /* [55][0][][] */ -8,-38,-29,37,64,-27,55,69,-44,-36,-127,-22,60,-26,-10,22, 
  /* [56][0][][] */ 67,-49,-41,-24,-116,26,-127,-4,-8,-12,-40,4,108,-40,40,6, 
  /* [57][0][][] */ -75,10,36,-34,110,29,62,50,-13,54,9,-4,-60,80,-127,-11, 
  /* [58][0][][] */ 30,7,18,-6,37,-6,-62,-57,52,-127,-80,-13,-77,-42,-17,38, 
  /* [59][0][][] */ -57,-25,2,0,24,49,-110,-47,73,127,-101,-8,-17,-5,-18,-12, 
  /* [60][0][][] */ 25,-78,-10,23,-127,-67,30,4,-2,39,-13,65,-13,-50,35,61, 
  /* [61][0][][] */ 20,31,-85,-12,-49,-7,-127,-77,-14,15,38,76,67,-50,101,49, 
  /* [62][0][][] */ 29,-26,60,-25,-11,14,26,103,-39,127,1,54,13,35,71,67, 
  /* [63][0][][] */ 24,-127,-15,3,-55,14,31,-15,-5,-2,-1,-4,-47,119,114,33, 
  /* [64][0][][] */ 10,-16,-106,-55,10,36,11,-7,10,-127,47,-14,53,-70,-71,126, 
  /* [65][0][][] */ -15,36,45,59,64,-43,81,88,-53,-17,-81,-64,42,127,-55,-12, 
  /* [66][0][][] */ -41,-127,-6,-96,-42,-121,44,-27,-5,-33,19,87,-54,-33,-61,68, 
  /* [67][0][][] */ -33,-85,-75,-17,-79,95,-1,-127,-58,-14,-60,-98,3,-35,-51,31, 
  /* [68][0][][] */ 125,56,15,-31,-56,17,-59,-34,-91,-127,-27,-15,59,-32,29,-63, 
  /* [69][0][][] */ 46,-3,44,-36,-19,-50,-54,37,-32,127,-28,-9,14,42,78,-30, 
  /* [70][0][][] */ 26,-34,-35,59,-98,29,2,-123,110,127,34,68,47,-88,-37,49, 
  /* [71][0][][] */ 119,-79,87,127,-92,-33,36,-51,110,18,-59,61,77,-62,38,7, 
  /* [72][0][][] */ -10,-47,54,105,54,-7,-127,77,82,-19,48,9,-39,-56,-58,77, 
  /* [73][0][][] */ 67,12,52,-110,70,-77,-76,47,-9,127,-47,10,11,-90,23,-45, 
  /* [74][0][][] */ 102,27,41,54,-127,-7,45,-13,-93,-29,7,-45,40,-58,23,2, 
  /* [75][0][][] */ 81,127,-109,8,56,52,-18,-35,-22,-33,60,78,-117,44,54,95, 
  /* [76][0][][] */ -76,-39,-1,-41,-77,-2,112,-20,-69,29,119,69,-68,-127,-9,107, 
  /* [77][0][][] */ -48,127,-10,16,-47,-49,34,65,39,-51,-9,52,-34,60,-5,59, 
  /* [78][0][][] */ 107,23,-43,45,-57,22,-127,-26,7,-12,-63,6,35,-99,41,51, 
  /* [79][0][][] */ -50,-38,127,53,-36,-78,-59,-32,-25,26,13,1,-68,101,-35,68, 
  /* [80][0][][] */ 67,113,28,-127,-6,45,71,-39,3,13,-42,40,83,-59,-17,-16, 
  /* [81][0][][] */ 46,-59,28,-107,100,50,-27,127,120,35,-28,-58,-28,27,-81,-90, 
  /* [82][0][][] */ 88,48,78,12,118,-104,29,59,2,127,-52,17,-5,-35,50,-115, 
  /* [83][0][][] */ -27,91,4,9,86,75,127,85,15,50,-23,-43,-91,86,-59,-74, 
  /* [84][0][][] */ 1,-80,-10,114,0,-51,-72,18,-92,62,-70,-25,-127,72,-8,-78, 
  /* [85][0][][] */ -66,77,-41,1,-23,-29,-22,-48,-21,26,30,-34,-127,-46,-55,56, 
  /* [86][0][][] */ -19,78,107,115,50,-25,46,9,-10,28,-48,-82,36,105,-127,-69, 
  /* [87][0][][] */ -14,65,127,-31,-112,-22,29,14,40,-26,11,52,-67,14,-14,4, 
  /* [88][0][][] */ -39,-55,-120,6,29,50,-6,20,-32,-79,-91,-108,127,0,4,44, 
  /* [89][0][][] */ 28,18,14,-123,18,-66,-45,57,127,-18,36,-94,-4,-33,49,-75, 
  /* [90][0][][] */ 4,91,18,2,-34,48,44,113,20,-50,-27,127,36,-1,-55,86, 
  /* [91][0][][] */ -58,22,-24,34,73,53,-47,-101,-62,56,-21,1,-114,-127,-74,-25, 
  /* [92][0][][] */ -46,63,9,-35,-127,-24,-87,47,-40,63,94,86,-22,-20,60,12, 
  /* [93][0][][] */ 98,57,95,41,-127,-70,17,31,-28,-44,-30,-77,11,-44,-5,0, 
  /* [94][0][][] */ -44,-127,13,-107,25,14,-16,13,77,-12,-1,43,-1,40,-45,41, 
  /* [95][0][][] */ -67,-94,-25,-55,109,102,-31,43,127,68,-92,63,-51,117,-94,37, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0018810215406119823, 0.001448635128326714, 0.0016700875712558627, 0.0025945070665329695, 0.001793159986846149, 0.0013725773897022009, 0.0014336865860968828, 0.0025170929729938507, 0.0022227240260690451, 0.0013699261471629143, 0.0035112013574689627, 0.0014872910687699914, 0.0024779271334409714, 0.0020295018330216408, 0.0019179654773324728, 0.0022692421916872263, 0.0024340206291526556, 0.0014500797260552645, 0.0014626581687480211, 0.0021586173679679632, 0.0015627887332811952, 0.0013341738376766443, 0.0015472185332328081, 0.0025381299201399088, 0.00233070133253932, 0.001541083911433816, 0.00087093072943389416, 0.0019309375202283263, 0.0018551948014646769, 0.002452832879498601, 0.00082395965000614524, 0.002789975143969059, 0.0013034415896981955, 0.0027738297358155251, 0.0017036759527400136, 0.0023343998473137617, 0.0018538024742156267, 0.0019534346647560596, 0.0021505788899958134, 0.0027011088095605373, 0.0023600640706717968, 0.0029864665120840073, 0.0035023849923163652, 0.0029793647117912769, 0.0030622868798673153, 0.0028861816972494125, 0.0025547351688146591, 0.0022076652385294437, 0.002248367527499795, 0.0020568319596350193, 0.0015219454653561115, 0.0021770833991467953, 0.0020454952027648687, 0.0029497831128537655, 0.0024466495960950851, 0.0030047730542719364, 0.0020270263776183128, 0.0017166712787002325, 0.0015836227685213089, 0.0019616843201220036, 0.0025216038338840008, 0.0019636638462543488, 0.002761361887678504, 0.0023006568662822247, 0.0018490334041416645, 0.0016398674342781305, 0.0019122855737805367, 0.0027207669336348772, 0.0017565132584422827, 0.0029348672833293676, 0.0013483542716130614, 0.0012153175193816423, 0.0021586020011454821, 0.0017076433869078755, 0.0023080948740243912, 0.0014929324388504028, 0.001853585010394454, 0.0025653669144958258, 0.0018114249687641859, 0.0029500334057956934, 0.0024182826746255159, 0.0018335068598389626, 0.0011838407954201102, 0.00204656389541924, 0.0024443855509161949, 0.0021206014789640903, 0.0022913026623427868, 0.0032435446046292782, 0.0012496904237195849, 0.0028053938876837492, 0.0031330871861428022, 0.0026707928627729416, 0.0011369483545422554, 0.0023067488800734282, 0.0035619025584310293, 0.0020146090537309647, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -27316, 539, -3367, -20496, 11522, -15555, 25665, -9258, 10703, -11571, 16627, 15566, -2262, -30697, -3356, 9658, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.5731797046028078e-05, 6.6435255575925112e-05, 7.5700409070122987e-05, 6.7768443841487169e-05, 7.5415307946968824e-05, 0.00012540614989120513, 6.3335712184198201e-05, 9.5779607363510877e-05, 0.00010615200881147757, 9.9651049822568893e-05, 7.8167540777940303e-05, 8.4046201664023101e-05, 0.00011097676178906113, 7.5068433943670243e-05, 8.2873673818539828e-05, 8.5025218140799552e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 16,36,7,20,-20,-80,-19,-1,-23,-69,11,-1,55,-50,57,21,-87,-26,37,15,87,15,-74,6,-1,72,127,67,7,69,36,-26,10,6,17,-11,47,40,-9,-13,98,13,31,-15,-29,4,6,-33,25,-29,88,-7,-56,-7,28,20,4,-46,10,24,-5,36,-53,-22,19,3,64,22,27,-27,20,29,-3,39,11,35,60,-33,54,26,-13,52,33,29,-48,-1,-15,64,10,11,-90,-24,23,-8,111,75, 
  /* [1][0][][] */ 26,42,-49,-23,11,-48,104,-111,-74,-34,-72,-62,8,-65,-13,-54,-37,-27,-43,-31,-24,-121,116,-36,-10,16,17,81,-50,12,-44,18,-31,28,28,1,-34,40,-70,91,28,11,-12,-41,66,-71,-18,20,-105,18,53,-121,-42,43,74,63,35,24,-69,10,-57,-11,-25,-21,28,9,114,6,-48,-127,8,4,19,55,-32,33,-71,-38,108,-43,38,-35,64,-70,-30,-61,-21,3,-16,-33,12,-15,68,-38,-32,57, 
  /* [2][0][][] */ 7,-13,13,-1,55,47,-55,45,-43,46,25,-26,36,-9,34,24,43,-30,-127,5,-20,-43,-17,19,1,-5,-49,15,-36,-20,-21,74,-22,-32,-11,22,-49,37,-17,-23,70,11,8,44,20,65,17,5,-80,12,-18,13,-19,47,14,-68,36,26,50,43,-20,-8,-10,49,50,12,-25,-13,0,-10,-13,-39,21,51,39,81,-52,-12,-16,-32,48,32,55,-8,-9,-42,-11,-54,-18,-39,-14,74,6,-11,88,-41, 
  /* [3][0][][] */ 39,-30,-23,-110,-30,-39,98,-10,41,124,-62,-12,3,-25,-4,54,68,61,-16,37,-44,38,31,16,-35,77,38,-23,-38,-14,-85,78,-3,-15,28,-15,15,-37,-26,67,12,5,-25,22,68,-36,4,47,53,-33,28,-39,118,41,25,-3,7,-15,-8,-27,-29,47,91,0,-18,-11,123,-46,-16,-19,-44,26,13,-67,13,-64,29,-45,127,6,-1,-48,-27,-37,-31,-42,77,67,-44,45,-70,15,14,-85,-30,27, 
  /* [4][0][][] */ -25,81,28,18,-26,11,-29,-14,17,-34,10,-15,26,55,-15,18,-18,-46,-25,-63,39,-24,-68,33,-29,-22,-25,14,-34,127,-74,-16,2,-31,12,-29,68,63,-48,0,25,15,21,-45,-45,4,67,-22,35,-4,-66,-10,-70,23,53,19,12,66,-20,34,-43,-52,-9,-8,67,21,-76,8,6,-15,15,-71,-19,65,68,83,-38,20,-70,46,30,64,42,-60,54,-67,-42,-84,-59,-56,-54,-8,-1,4,46,-38, 
  /* [5][0][][] */ -7,-14,31,-9,-14,-26,-18,3,43,14,-12,-6,-22,-27,15,-11,-6,4,-48,-26,-28,8,-13,13,24,-54,67,-22,-4,47,8,70,-8,-84,21,11,-36,-20,-30,2,-37,-4,-25,11,5,22,-57,27,-22,14,57,-9,27,-65,-2,22,-25,-43,4,-30,37,23,20,50,-28,11,106,-22,-3,-27,16,16,-1,28,41,5,1,-8,127,44,-20,-12,-26,40,35,70,10,100,-1,-32,-4,10,12,-18,-37,14, 
  /* [6][0][][] */ 30,-71,64,14,-38,113,-43,-118,-18,-59,-90,55,-8,1,-55,112,7,31,22,-63,-124,-18,-69,-53,8,-80,1,70,-127,55,-6,-46,26,78,-31,-12,-37,-63,13,-19,-34,33,21,-11,36,31,-95,-13,34,8,-67,-108,71,27,-41,5,14,-11,13,-27,-15,-55,19,22,62,-100,-69,-70,-107,15,-4,-88,-21,-121,25,-121,97,21,-75,49,-31,73,24,-95,64,-22,-2,15,-73,85,-98,89,55,-32,56,-117, 
  /* [7][0][][] */ -7,-17,-54,68,-17,5,52,-16,-96,3,76,36,1,-56,-5,-27,-4,-13,12,-12,-70,-32,-31,-48,61,47,5,77,-3,34,32,17,-50,-127,23,86,-27,1,-39,4,-7,-7,-2,-54,38,44,66,69,-22,45,-32,6,9,-29,43,-36,-28,41,-72,-23,41,0,-2,-26,60,-57,102,-15,-79,-20,66,-6,-6,-27,-74,-32,18,-37,97,-37,-2,-16,-64,-31,44,18,-63,48,-3,21,1,35,50,0,86,-10, 
  /* [8][0][][] */ -16,-52,8,7,-12,-17,15,-14,-20,6,42,33,4,28,-37,-5,62,6,12,3,-13,-62,-35,-26,-19,-33,64,-2,-26,39,1,-24,-11,3,1,2,-40,-6,10,-16,-1,43,16,-38,3,-9,21,-1,50,-4,45,5,9,8,-37,0,-10,106,-56,8,-16,-58,-44,-2,-74,-17,-18,24,-14,8,43,-19,-23,-127,40,-104,16,13,-54,18,-13,-5,11,62,60,-57,-38,45,-33,89,2,-21,-54,6,-5,-53, 
  /* [9][0][][] */ -33,-25,-35,19,-1,30,1,50,-33,4,53,62,-30,62,26,-52,-18,35,-25,-30,9,55,-15,16,-29,26,6,19,45,-5,16,1,-29,-13,12,58,-9,1,38,-2,-9,-34,24,-10,11,48,2,32,-39,15,-11,36,127,10,-21,-10,12,-20,37,22,-22,2,85,-3,17,32,56,1,50,-8,-15,32,1,-122,-35,-117,-29,-12,34,1,-11,36,-1,-37,39,9,-56,-6,-10,103,48,33,58,25,-12,25, 
  /* [10][0][][] */ 19,38,13,-1,-5,23,-37,-26,57,4,-44,24,20,20,-8,-58,-39,-5,15,-10,28,-16,-25,-38,9,-15,-89,50,-22,54,0,14,17,19,-25,-3,15,6,11,-5,35,-10,72,-47,-35,-9,9,20,11,6,8,-25,-30,-18,-5,30,-19,2,-10,-11,-17,-46,-17,5,-11,-22,-91,-31,-54,-14,39,-9,-24,28,29,11,46,-22,-91,6,-20,34,-6,-12,10,4,-75,-127,-21,27,27,15,48,-30,25,36, 
  /* [11][0][][] */ 6,-34,-10,8,-45,34,17,8,55,-13,-22,-39,14,26,7,-5,-21,47,21,-68,11,31,15,-37,32,7,68,4,24,-53,-32,22,6,98,-114,13,22,-9,74,4,-56,37,2,12,-52,-1,-14,-18,40,-15,-28,-10,-31,13,-86,76,-35,-6,5,-27,26,-8,-29,-69,-15,-41,-127,-98,0,-30,-89,41,48,12,-16,-5,40,60,-105,-36,-16,-1,-29,-12,-20,-10,61,77,16,-52,24,4,-34,21,81,29, 
  /* [12][0][][] */ 18,25,-35,-23,20,-22,7,34,58,-40,26,-9,10,-17,-1,16,16,-36,-29,10,7,43,-1,46,-46,-40,-127,-2,73,-16,32,-7,-26,-79,66,-11,34,-23,-3,13,-1,-53,0,29,56,-6,29,-15,-86,2,-49,86,69,-17,39,-70,6,20,-36,-43,4,44,65,6,-16,-21,24,18,102,36,19,20,1,-20,-13,-6,-39,-53,34,-67,17,-48,21,-39,-4,9,6,-94,3,35,-39,19,18,71,12,37, 
  /* [13][0][][] */ -13,16,-72,36,24,36,-7,23,38,67,-37,50,-47,-28,73,-56,28,54,59,31,-33,-44,-11,23,43,56,-25,29,9,44,57,-11,-31,61,-17,53,15,-44,-43,-68,-1,-24,29,12,72,53,-23,44,-67,37,-3,-2,-28,-51,72,32,1,-54,-7,-12,27,19,9,-26,14,92,127,30,26,4,-61,-20,44,59,-90,59,19,-81,123,-48,-23,-44,15,-7,28,57,-39,-29,-19,-30,22,67,46,16,72,58, 
  /* [14][0][][] */ -6,58,11,31,-72,-48,3,60,-59,-20,78,25,-80,-12,83,-18,-24,36,-50,43,-23,34,-96,18,-44,-3,-59,-127,12,3,18,85,-58,28,14,-4,-11,-54,-4,-47,32,-42,42,-26,-9,64,-60,31,-1,-44,83,26,-3,34,-40,24,-56,39,-3,47,50,69,10,45,26,-37,-1,-76,61,54,76,32,-54,39,20,21,39,-7,32,25,-60,110,4,-116,86,-5,-1,3,-111,-11,-31,6,-23,2,33,28, 
  /* [15][0][][] */ 67,-37,25,30,53,9,-2,-23,5,24,-65,-19,63,63,-17,-13,-7,-5,-71,32,-4,-38,10,15,58,-28,89,34,35,-24,-24,56,61,44,-13,-79,48,54,67,41,77,42,-6,9,-45,-127,25,-42,-40,-22,-11,-3,-20,-41,-26,50,-16,1,-13,8,-4,-59,-49,25,27,31,-67,38,-19,-29,-13,-5,1,-112,-50,-100,-26,16,-110,22,68,-38,40,16,-47,-8,-6,-8,43,78,25,-66,-34,-32,39,-33, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0040686014108359814, 0.0028234983328729868, 0.0032172673381865025, 0.0028801588341593742, 0.0032051505986601114, 0.0053297611884772778, 0.0026917676441371441, 0.004070633091032505, 0.0045114601962268353, 0.0042351693846285343, 0.0033221202902495861, 0.0035719634033739567, 0.004716512281447649, 0.0031904084607958794, 0.0035221311263740063, 0.0036135716363787651, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 7195, -1790, -8668, 7675, -2677, -1582, 2335, 37, 690, -5313, 2368, -2453, 10720, -4462, -586, -5954, -454, 870, -11906, -2240, -1633, 1958, -6834, 921, 75, 8061, -9932, -9851, -887, -4316, -1883, -1844, 14756, -1137, 1228, 3026, -2026, 10183, -259, 10267, -1986, 5650, -2218, 13382, 3102, 1, 6612, 1147, -6744, 258, -4479, 401, 1054, -4251, 1633, 1174, 1242, 3160, 1445, 2600, -696, 920, 111, 14817, 12071, -1317, 18285, 12120, -3508, 291, 9199, -2230, 341, 683, -3544, -226, 22099, 10353, 13454, 16708, 12593, -848, 6940, 10526, -355, -3193, 14337, -5693, 12834, -1177, -9244, -1463, -731, 3177, 17425, -2805, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00013569777365773916, 0.00022065982921048999, 0.00012024764146190137, 0.00015021137369330972, 0.00023270738893188536, 0.00035348610254004598, 9.1573630925267935e-05, 0.00025222127442248166, 0.00028835469856858253, 0.00020746506925206631, 0.00019986544793937355, 0.00020410277647897601, 9.5203846285585314e-05, 0.00014338601613417268, 0.00017693608242552727, 0.00017211720114573836, 0.00025734613882377744, 0.00025224467390216887, 0.00011113826622022316, 0.00046405586181208491, 0.00026015724870376289, 0.00018478384299669415, 0.00013173211482353508, 0.00015566065849270672, 0.0020396462641656399, 0.00016806329949758947, 0.0002295710874022916, 0.0001114922997658141, 0.00025768508203327656, 0.00015563193301204592, 0.00015627412358298898, 0.00030261202482506633, 9.9617056548595428e-05, 0.00034319242695346475, 0.00015155004803091288, 0.00012706177949439734, 0.00026308160158805549, 9.9160766694694757e-05, 0.00024803640553727746, 0.00010172246402362362, 0.00036801872192882001, 0.00018423660367261618, 0.00019302802684251219, 7.8587800089735538e-05, 0.00019991486624348909, 0.00019070609414484352, 0.00013121012307237834, 0.00031346554169431329, 0.00016642217815387994, 0.00032107549486681819, 0.00021086190827190876, 0.00014197247219271958, 0.00012893542589154094, 0.00020867654529865831, 0.00026816647732630372, 0.00022586573322769254, 0.00018173830176237971, 0.00026138804969377816, 0.00028120094793848693, 0.00028449259116314352, 0.00026475216145627201, 0.00023849158606026322, 0.00013180998212192208, 8.139685814967379e-05, 0.00018914049724116921, 0.00047123024705797434, 9.6522147941868752e-05, 0.00012655477621592581, 0.00013159302761778235, 0.00021004075824748725, 0.00010744207975221798, 0.00022945438104216009, 0.0004367899673525244, 0.0001560009695822373, 0.00016338075511157513, 0.00018503885075915605, 6.9989611802157015e-05, 0.00012541782052721828, 0.00011306970554869622, 0.00010572220344329253, 8.151411748258397e-05, 0.00031437826692126691, 9.5265393611043692e-05, 0.00021203902724664658, 9.2007991042919457e-05, 0.00024685141397640109, 9.4826398708391935e-05, 0.00025979653582908213, 9.4523413281422108e-05, 0.00017977853713091463, 0.00010124877007910982, 0.00016855154535733163, 0.00031806080369278789, 0.00015321793034672737, 0.00011964404257014394, 0.00019624097330961376, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -33,0,23,-69,93,10,16,-20,0,-9,-23,-25,-9,5,-18,-28,-19,2,5,-15,-10,22,32,38,-8,-17,-38,17,27,9,28,-5,16,11,-21,-51,5,-86,-30,-15,-1,-8,44,-73,-41,41,-77,-17,-31,-2,-4,48,-69,-3,23,-6,0,-11,6,-31,-1,-21,-5,-80,-50,-16,-54,-40,-23,30,-3,10,13,-3,-7,7,-26,36,127,-46,-127,1,-122,-14,-44,-19,-5,0,-9,-10,36,-31,1,28,-37,-1, 0,41,72,-95,-30,11,127,-54,2,-36,-50,7,-52,-7,-97,69,-10,75,54,-31,-31,127,100,127,24,6,46,89,127,43,127,-27,-127,-13,-114,-42,-14,-127,127,-50,-19,-127,-1,-90,61,-30,-47,5,28,-4,25,127,-91,32,-89,2,-77,-11,-6,17,3,-127,-109,-79,-76,7,-11,-94,-20,20,-74,127,-127,-12,4,-23,-127,-104,-9,-127,-120,14,16,-64,90,71,-92,22,-127,0,43,-6,14,107,-72,-91, -24,8,6,-21,83,8,31,-28,-15,11,-23,-6,-10,11,-24,-33,-11,1,-10,-28,-6,9,32,25,-11,-8,-12,7,14,18,20,9,-35,8,-32,59,8,-88,-19,-9,-5,10,45,-41,-31,-33,-59,-15,-5,-16,-2,33,-6,-15,-1,-14,60,-21,10,-43,-5,-11,-64,-67,-43,-28,127,-20,-14,26,-14,20,23,6,-1,14,-33,55,-52,-31,-107,-4,-127,-18,-8,-32,-12,-28,-57,-27,19,54,6,35,-16,9, 
  /* [0][1][][] */ -91,-2,58,-63,38,105,-64,0,2,-21,-29,-7,-108,34,22,54,-15,39,114,24,32,-20,99,-28,36,12,68,42,-19,3,-6,-14,-85,-9,51,-42,-1,-118,-40,-127,-18,-16,98,-42,-89,127,-100,-80,73,73,16,-48,-127,77,61,-25,18,-35,37,-19,18,-16,81,-72,-50,14,-33,-82,-6,-3,-115,23,58,127,8,-69,-106,-73,-72,-64,-68,-11,-33,-76,42,26,-127,50,-109,127,87,-84,127,-4,-59,2, 66,127,127,122,-127,-127,121,-61,127,127,-81,-62,-102,127,-24,127,127,-127,127,127,127,-77,127,-110,-127,-127,127,127,-119,127,-20,127,-50,127,127,-122,127,95,16,-12,127,-12,-127,-127,127,-20,127,127,127,-127,127,-119,108,127,-127,127,-127,127,-127,127,-87,111,101,-127,127,127,-19,127,-100,-127,-10,-122,1,114,127,73,39,-127,96,-127,63,127,89,127,127,83,-120,127,-111,46,-20,-22,-85,-14,-127,-26, -127,-23,49,-61,18,65,-83,17,-31,-16,-5,127,-127,38,21,44,-14,46,111,6,24,-23,98,-20,33,2,41,22,-17,-1,23,-1,-116,-27,74,127,8,-121,-55,-102,-31,-18,50,-59,-73,-70,-92,-98,63,74,0,-32,114,10,86,-45,91,-31,49,-54,-6,-29,-127,-36,-72,-7,-61,-88,-10,3,-127,6,46,-96,2,127,-84,-51,-67,-4,-94,-22,-64,-104,-4,39,-104,32,-89,-64,127,127,-37,-21,-51,3, 
  /* [0][2][][] */ -26,-40,-22,-6,45,11,-27,25,-6,20,30,-20,16,9,-15,-40,-7,-8,-27,-12,-17,-31,16,-38,1,-5,1,30,16,0,-13,11,21,2,-8,-44,5,-14,3,2,-22,-2,46,-9,2,12,-60,-6,-15,2,-13,-25,-11,-39,35,-9,9,-26,6,-14,4,11,-2,-55,-26,-21,112,-16,46,19,-6,3,-14,-8,-8,-23,-22,25,-38,-58,-6,-6,-90,-13,-14,-1,46,-20,46,12,15,-29,-6,-23,-26,1, -26,-56,27,-127,-32,7,32,127,-50,88,127,-24,-76,22,127,68,-13,-37,58,-31,-42,-55,108,2,17,-1,43,33,5,10,-65,-42,-59,-27,-113,-25,-83,-104,59,-39,-18,-123,-26,126,9,-20,-51,-6,49,-7,-7,-14,59,24,-52,-27,-57,-63,44,-49,127,31,99,-33,-91,-48,-28,-116,127,28,-45,14,14,-20,28,-16,-69,-47,-3,45,-100,-36,-105,-93,54,-127,15,12,-28,6,58,-5,16,-127,-86,127, -31,6,-13,23,46,3,-27,19,-18,19,10,40,5,8,-15,-43,-2,10,0,-12,-6,-20,0,-26,-8,2,-19,9,15,2,-17,14,-6,5,-12,-18,5,-43,-5,32,-27,-18,17,-6,-2,-13,-60,7,-16,-2,-8,-28,-14,-48,22,-5,49,-18,8,-18,-3,14,-19,-15,-9,-27,-33,10,50,10,-31,2,-23,-32,-3,-12,-49,20,80,-23,10,-18,-57,-22,-21,9,52,4,58,6,2,16,8,-16,0,3, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0066716982983052731, 0.010848931036889553, 0.0059120790101587772, 0.0073852716013789177, 0.011441259644925594, 0.017379449680447578, 0.0045022964477539062, 0.012400676496326923, 0.01417720690369606, 0.010200198739767075, 0.0098265567794442177, 0.010034888982772827, 0.0046807792969048023, 0.0070496969856321812, 0.0086992150172591209, 0.0084622902795672417, 0.012652644887566566, 0.012401827611029148, 0.0054642087779939175, 0.022815706208348274, 0.012790855020284653, 0.0090850573033094406, 0.0064767231233417988, 0.0076531902886927128, 0.10028097033500671, 0.0082629770040512085, 0.01128706056624651, 0.0054816151969134808, 0.012669309042394161, 0.0076517779380083084, 0.0076833521015942097, 0.014878180809319019, 0.0048977583646774292, 0.016873352229595184, 0.0074510886333882809, 0.0062471018172800541, 0.012934633530676365, 0.0048753246665000916, 0.012194924056529999, 0.0050012725405395031, 0.018093958497047424, 0.0090581513941287994, 0.0094903893768787384, 0.0038638368714600801, 0.0098289866000413895, 0.0093762297183275223, 0.0064510591328144073, 0.015411803498864174, 0.0081822900101542473, 0.015785953029990196, 0.010367207229137421, 0.0069801989011466503, 0.0063392212614417076, 0.010259762406349182, 0.013184636831283569, 0.011104883626103401, 0.0089353201910853386, 0.012851369567215443, 0.013825486414134502, 0.013987324200570583, 0.013016768731176853, 0.011725644581019878, 0.0064805513247847557, 0.0040019466541707516, 0.009299255907535553, 0.023168440908193588, 0.0047455946914851665, 0.0062221749685704708, 0.0064698844216763973, 0.010326835326850414, 0.005282482597976923, 0.011281322687864304, 0.021475154906511307, 0.0076699224300682545, 0.0080327559262514114, 0.0090975947678089142, 0.003441099775955081, 0.0061662751249969006, 0.0055591696873307228, 0.0051979231648147106, 0.0040077120065689087, 0.015456679277122021, 0.004683805163949728, 0.010425081476569176, 0.0045236521400511265, 0.012136662378907204, 0.0046622217632830143, 0.012773120775818825, 0.0046473252587020397, 0.0088389664888381958, 0.0049779829569160938, 0.0082869818434119225, 0.015637733042240143, 0.0075330915860831738, 0.005882402416318655, 0.0096483565866947174, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1830, 9854, 368, 1732, 5654, 21585, 203, 2560, 12104, -1566, 25084, 3655, 3569, 717, 4331, 524, 2355, 5543, 35, 14199, 1723, 10912, -1702, 1757, -17861, 1724, 2422, 2112, 5701, 1495, 3335, 5419, 1800, 12729, 4034, 5408, 4799, 2278, 4265, 2491, 20823, 1385, 2541, 1811, 4157, 12734, 7281, 13676, 1075, -856, 2520, 8675, 2889, -4408, 11148, 198, 2926, 20420, 1907, 2082, 2977, 15038, 4812, -8, 23259, 22146, 1610, 5267, 6075, 5854, 2625, 1833, -5187, 4105, 2835, 3481, 406, 13340, 3871, 6507, 2375, 1565, 4575, 12452, -28, 11837, 10660, 1710, -820, 2441, 1533, 15835, 3879, 3904, 8131, 8118, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00015080366574693471, 7.4727286119014025e-05, 0.00027390447212383151, 0.0001821076002670452, 0.00011991038627456874, 4.411557165440172e-05, 0.00019120094657409936, 0.00012018639245070517, 7.1655507781542838e-05, 0.00011720367183443159, 3.6596189602278173e-05, 0.0001226629683515057, 9.8044118203688413e-05, 0.00027318845968693495, 0.00014115594967734069, 9.9805831268895417e-05, 0.00024882119032554328, 0.00011522104614414275, 0.00013966122060082853, 6.2892242567613721e-05, 0.0001297182752750814, 7.1375201514456421e-05, 0.00014677019498776644, 0.0001282901648664847, 4.3998250475851819e-05, 0.00011191851808689535, 0.00019700069969985634, 0.00015524383343290538, 0.0001387761440128088, 0.00019521152717061341, 0.00016044701624196023, 0.00010483259393367916, 0.00021164558711461723, 6.5211024775635451e-05, 0.00012912394595332444, 0.00012552835687529296, 0.00011666375939967111, 0.00015913537936285138, 0.00010031640704255551, 0.00015380368859041482, 4.4758249714504927e-05, 0.00017356917669530958, 0.0001438653125660494, 0.0001031983774737455, 9.4971430371515453e-05, 6.6311804403085262e-05, 9.0198031102772802e-05, 5.8717792853713036e-05, 0.00024427304742857814, 0.00026301582693122327, 0.00015535965212620795, 8.7351865659002215e-05, 0.00016944365052040666, 8.2144775660708547e-05, 7.0942776801530272e-05, 0.00029365814407356083, 0.00012538381270132959, 4.260838613845408e-05, 8.9918408775702119e-05, 0.000141863216413185, 0.0001374171843053773, 6.2401588365901262e-05, 0.00013460396439768374, 0.00016540988872293383, 4.2279832996428013e-05, 3.9602655306225643e-05, 0.00024275014584418386, 0.00011669872037600726, 0.00011257272126385942, 8.4525709098670632e-05, 0.0001685449096839875, 0.00011742239439627156, 0.00010843444033525884, 0.00014504927094094455, 0.0001353889238089323, 0.00016805328777991235, 0.00017148513870779425, 5.8372766943648458e-05, 0.00015121742035262287, 0.00012774164497386664, 0.00016772936214692891, 0.00013414221757557243, 0.00010557140922173858, 7.1634443884249777e-05, 9.9732227681670338e-05, 6.1575490690302104e-05, 6.7870401835534722e-05, 0.00021078748977743089, 0.0001588197483215481, 0.00022206312860362232, 0.00015410425839945674, 5.6893557484727353e-05, 0.00012089314986951649, 0.0001147296279668808, 7.5296848081052303e-05, 7.723768794676289e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 52,-16,26,80,-125,-42,95,56,91,127,-46,56,14,-3,55,82, 
  /* [1][0][][] */ -24,36,-106,-3,127,109,-6,13,-48,9,-61,29,-47,74,-68,-35, 
  /* [2][0][][] */ -34,63,79,-3,65,84,11,29,35,-6,32,-13,55,-127,-6,6, 
  /* [3][0][][] */ 127,-33,32,9,30,22,-8,8,52,39,-52,-10,-32,51,-14,38, 
  /* [4][0][][] */ -72,6,-9,21,-114,-7,-89,-25,1,31,-21,-67,-35,24,-49,127, 
  /* [5][0][][] */ -106,-4,54,14,127,23,-5,16,-69,37,-43,13,-46,51,-104,-44, 
  /* [6][0][][] */ -127,27,-36,26,-3,-61,68,17,14,-23,-46,42,16,10,-43,12, 
  /* [7][0][][] */ 5,127,66,-89,116,32,97,33,85,53,0,58,75,5,-18,-20, 
  /* [8][0][][] */ -43,-48,-65,82,-53,97,-66,-74,47,-42,99,40,124,50,-127,-3, 
  /* [9][0][][] */ -25,-127,-16,85,-46,-60,-20,58,53,48,10,66,-87,1,-10,-38, 
  /* [10][0][][] */ -64,-25,-117,45,-72,127,30,-64,33,-33,71,-37,1,94,-100,71, 
  /* [11][0][][] */ -29,-111,-3,49,0,90,33,0,22,29,21,-71,30,122,-127,81, 
  /* [12][0][][] */ -38,-98,-62,96,-103,-127,18,56,93,73,-48,109,-3,-54,-18,-21, 
  /* [13][0][][] */ -76,-25,-41,-11,-7,8,43,14,-25,127,-11,-26,41,35,11,-6, 
  /* [14][0][][] */ -127,-24,-61,-30,-1,95,-22,-91,121,-54,87,27,87,-43,-87,-89, 
  /* [15][0][][] */ 8,-127,98,-49,-51,-42,2,58,21,-44,-87,-29,80,-35,-21,-52, 
  /* [16][0][][] */ -21,-41,24,-43,41,31,-17,-15,62,-127,36,-18,1,-5,-72,-95, 
  /* [17][0][][] */ -14,9,25,-68,3,-6,-46,5,96,-53,30,67,92,-75,-18,-127, 
  /* [18][0][][] */ 68,1,-38,-127,23,-22,119,-45,18,70,-15,61,-8,71,-20,-122, 
  /* [19][0][][] */ -47,-29,-24,-70,-80,62,0,-4,13,-46,5,-127,-2,-27,-45,-4, 
  /* [20][0][][] */ 12,66,68,-88,69,-12,-53,103,-116,-127,31,-87,-33,111,-16,-12, 
  /* [21][0][][] */ 7,-83,-127,-6,89,38,72,101,-69,-71,4,15,61,-89,-29,42, 
  /* [22][0][][] */ 55,-10,79,4,7,1,63,42,19,127,43,25,-1,-1,121,-4, 
  /* [23][0][][] */ -127,-56,-17,57,55,41,21,-5,4,8,8,-82,-12,72,64,127, 
  /* [24][0][][] */ 25,-13,47,31,11,-104,10,-60,24,127,-126,70,-34,-88,97,-71, 
  /* [25][0][][] */ 126,-45,115,127,57,-10,-22,33,-125,106,72,-63,-23,43,84,-15, 
  /* [26][0][][] */ -16,25,13,44,-55,112,-17,34,-53,-34,-80,34,4,24,46,-127, 
  /* [27][0][][] */ 33,-2,-10,-47,-44,9,-81,-1,-114,-23,-70,-43,-80,42,-27,127, 
  /* [28][0][][] */ -62,11,31,7,19,-19,-127,-2,-6,-28,-2,-10,10,-43,-59,-27, 
  /* [29][0][][] */ -35,-118,-27,95,-33,12,127,5,77,57,-108,63,29,-16,-51,80, 
  /* [30][0][][] */ 43,-38,-46,4,-127,17,46,-39,21,6,13,-6,-18,39,3,75, 
  /* [31][0][][] */ -127,-19,10,108,-41,25,-57,-18,-32,-67,15,-35,-12,-74,-51,113, 
  /* [32][0][][] */ -118,-80,-77,5,-88,-61,9,-27,127,64,-57,-51,41,59,44,-26, 
  /* [33][0][][] */ -31,2,-92,46,-127,-100,45,8,-120,11,-52,-72,-31,106,68,83, 
  /* [34][0][][] */ 54,50,0,43,-58,-42,50,1,-9,-127,-32,36,-3,7,45,90, 
  /* [35][0][][] */ 29,-4,-61,0,-127,10,81,-17,9,40,-5,-1,19,69,37,57, 
  /* [36][0][][] */ -17,2,-64,54,127,-16,49,73,-90,16,-73,-85,22,-11,11,37, 
  /* [37][0][][] */ -108,45,9,-52,37,-107,-39,-37,4,-13,-2,68,57,-58,29,-127, 
  /* [38][0][][] */ 63,79,56,-33,-79,-73,-127,-80,-19,-53,28,60,-66,-108,69,-22, 
  /* [39][0][][] */ 3,-58,16,85,7,60,82,-39,-16,38,21,-19,-12,127,56,99, 
  /* [40][0][][] */ 89,34,78,91,-42,-60,-19,19,-75,69,-20,-2,-42,-22,127,-3, 
  /* [41][0][][] */ -25,-6,15,60,-102,109,7,49,-55,32,-106,14,7,41,64,-127, 
  /* [42][0][][] */ 24,-118,10,-14,127,43,66,5,-59,-99,-102,-37,-14,-15,-5,39, 
  /* [43][0][][] */ -53,-76,-49,8,127,27,2,96,-61,-69,-117,-73,112,-6,-75,60, 
  /* [44][0][][] */ 5,-78,-109,-87,9,62,41,19,-28,-127,-53,74,-35,26,53,107, 
  /* [45][0][][] */ -9,-66,-84,-14,-127,92,-49,-54,55,-63,39,-53,-15,-8,-36,64, 
  /* [46][0][][] */ 26,-87,3,11,75,-84,7,75,-5,-23,39,71,-33,-35,60,-127, 
  /* [47][0][][] */ -69,2,-46,81,-13,36,41,49,6,125,110,90,-44,71,-18,127, 
  /* [48][0][][] */ 35,-11,-86,-91,38,-70,13,73,44,-84,2,29,-61,17,-42,-127, 
  /* [49][0][][] */ 50,25,8,26,-11,-31,44,56,-38,127,-46,39,-29,-28,65,70, 
  /* [50][0][][] */ 2,-3,15,18,-127,-15,-16,-44,56,18,27,49,-24,-59,11,0, 
  /* [51][0][][] */ 11,14,-16,-127,-37,82,35,-39,8,11,49,-62,62,68,-29,18, 
  /* [52][0][][] */ 29,-17,-4,-83,84,-110,-11,-30,47,-6,127,-62,45,-10,-44,95, 
  /* [53][0][][] */ -54,-58,46,-27,-48,-127,21,-108,-11,91,-100,82,-34,-19,23,-89, 
  /* [54][0][][] */ 60,85,48,-23,-127,-47,-100,-104,-2,15,41,44,-72,-58,58,13, 
  /* [55][0][][] */ 11,5,-21,61,-27,20,27,-16,8,127,17,51,-5,-2,2,33, 
  /* [56][0][][] */ 40,-101,-55,87,-76,44,-8,54,127,14,54,50,-30,-26,51,68, 
  /* [57][0][][] */ 41,24,127,-94,88,-12,-2,-44,54,-18,-8,117,61,-60,108,-82, 
  /* [58][0][][] */ 116,-78,39,-82,41,19,11,122,89,127,-14,84,64,18,118,-25, 
  /* [59][0][][] */ -78,52,21,-51,9,-79,5,26,-17,23,-105,-93,-127,-40,55,-4, 
  /* [60][0][][] */ 38,-7,13,14,6,-19,28,-62,1,127,-2,68,-15,-18,-13,-21, 
  /* [61][0][][] */ 64,69,-3,-39,-94,-127,-7,-58,-82,-38,-15,22,-67,-57,80,111, 
  /* [62][0][][] */ -11,85,-49,39,-56,127,-48,22,-56,-5,-31,25,-36,17,50,-75, 
  /* [63][0][][] */ 24,3,-75,-127,-14,-28,71,-19,-18,-90,-29,21,-46,64,24,-17, 
  /* [64][0][][] */ -43,21,5,-13,47,-61,42,82,-127,-32,-60,-25,-16,101,63,71, 
  /* [65][0][][] */ -71,2,-53,-43,56,47,-29,-70,-127,-63,24,-29,-119,96,-41,65, 
  /* [66][0][][] */ -11,55,-11,32,-34,127,-26,21,-50,22,-30,51,-26,42,46,-78, 
  /* [67][0][][] */ 17,-40,-36,-29,0,-90,88,-94,-14,22,17,125,-59,-18,-14,-127, 
  /* [68][0][][] */ 10,-127,-31,94,-27,8,27,61,68,40,73,17,-99,38,-9,-15, 
  /* [69][0][][] */ 27,85,94,-102,55,2,-21,75,37,114,67,111,112,-86,44,-127, 
  /* [70][0][][] */ 50,13,65,-29,94,1,-96,-66,-127,-91,-11,55,-21,68,-97,-13, 
  /* [71][0][][] */ 7,-74,38,-36,61,-30,20,19,-69,100,-127,-37,17,82,14,28, 
  /* [72][0][][] */ 11,3,62,10,-58,-30,-104,-43,-8,67,-37,47,32,111,-127,-15, 
  /* [73][0][][] */ -4,-36,-25,-53,42,-92,39,-39,56,76,106,-9,30,-18,-87,127, 
  /* [74][0][][] */ -9,5,-38,99,-97,-6,99,47,80,68,45,127,124,38,-60,16, 
  /* [75][0][][] */ -30,51,-37,31,-57,127,-15,27,-42,19,-31,45,-16,56,27,-62, 
  /* [76][0][][] */ -80,88,-58,30,-99,-12,-5,35,52,50,-46,-49,35,-44,-127,28, 
  /* [77][0][][] */ 99,95,-127,125,75,85,85,63,50,-8,123,-30,78,46,78,33, 
  /* [78][0][][] */ 23,-35,-7,-58,64,-112,27,-50,49,43,127,-15,14,-22,-35,124, 
  /* [79][0][][] */ -38,47,7,26,-8,-45,-40,-14,-127,-1,48,11,102,39,-63,-47, 
  /* [80][0][][] */ -65,24,73,12,59,40,-5,-127,-61,57,-47,-28,-2,-62,21,56, 
  /* [81][0][][] */ 72,70,-24,1,44,-22,68,127,-103,122,-64,-41,-31,35,103,125, 
  /* [82][0][][] */ 50,82,-17,-35,-7,-61,98,-83,21,20,-50,84,127,-3,73,-53, 
  /* [83][0][][] */ -14,-26,31,12,-1,35,-14,-104,59,-21,95,11,32,-46,-49,-127, 
  /* [84][0][][] */ -127,-93,-43,-17,-21,106,111,-1,107,71,110,116,82,105,-83,7, 
  /* [85][0][][] */ 127,-12,108,-73,89,-6,-31,87,28,114,-81,-8,-21,47,98,3, 
  /* [86][0][][] */ -86,85,-47,-9,18,93,30,9,82,32,127,-37,-30,56,-12,-12, 
  /* [87][0][][] */ 14,-57,29,-39,42,-127,23,-32,48,-5,60,-30,36,-36,-33,62, 
  /* [88][0][][] */ -84,71,37,-20,87,-27,50,15,-57,-82,105,-85,69,116,107,-127, 
  /* [89][0][][] */ -24,31,-17,35,-23,127,-22,30,-44,14,-44,16,-3,56,24,-82, 
  /* [90][0][][] */ 33,-48,6,10,127,5,64,40,-27,-94,-107,-28,-9,4,-56,43, 
  /* [91][0][][] */ -14,72,-21,-27,6,-57,-83,28,-62,23,-97,-127,-111,-63,-8,16, 
  /* [92][0][][] */ 66,50,66,43,-127,-82,3,10,-21,40,-30,-30,-31,-77,28,-9, 
  /* [93][0][][] */ 9,-127,-86,60,-53,-60,-20,108,101,61,-2,63,-60,50,-15,-35, 
  /* [94][0][][] */ 93,17,127,-41,34,-29,5,36,37,100,-14,42,6,0,109,-20, 
  /* [95][0][][] */ -81,-42,-45,-31,127,13,67,91,-43,-34,-92,-53,7,20,-74,52, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0033857000526040792, 0.0016777056735008955, 0.0061494419351220131, 0.0040885061025619507, 0.0026921136304736137, 0.00099044071976095438, 0.0042926613241434097, 0.0026983101852238178, 0.0016087410040199757, 0.0026313450653105974, 0.00082162272883579135, 0.0027539117727428675, 0.0022011930122971535, 0.0061333663761615753, 0.0031690986361354589, 0.0022407453507184982, 0.0055862958543002605, 0.0025868329685181379, 0.0031355402898043394, 0.0014119966654106975, 0.0029123108834028244, 0.001602447940967977, 0.0032951442990452051, 0.002880248473957181, 0.00098780670668929815, 0.0025126878172159195, 0.0044228718616068363, 0.0034853864926844835, 0.0031156695913523436, 0.0043827029876410961, 0.0036022034473717213, 0.0023536013904958963, 0.0047516645863652229, 0.0014640556182712317, 0.0028989675920456648, 0.0028182428795844316, 0.0026192234363406897, 0.0035727557260543108, 0.0022522083017975092, 0.0034530535340309143, 0.0010048694675788283, 0.0038968094158917665, 0.003229926573112607, 0.0023169114720076323, 0.0021322078537195921, 0.0014887694269418716, 0.0020250400993973017, 0.0013182758120819926, 0.0054841851815581322, 0.0059049804694950581, 0.0034879867453128099, 0.0019611406605690718, 0.0038041872903704643, 0.0018442361615598202, 0.0015927396016195416, 0.0065929321572184563, 0.002814997686073184, 0.00095660280203446746, 0.0020187622867524624, 0.0031849774532020092, 0.0030851594638079405, 0.0014009809819981456, 0.0030219997279345989, 0.0037136250175535679, 0.00094922649441286922, 0.00088912103092297912, 0.0054499944671988487, 0.0026200083084404469, 0.0025273752398788929, 0.0018976905848830938, 0.003784009488299489, 0.0026362554635852575, 0.0024344664998352528, 0.003256507683545351, 0.003039622912183404, 0.0037729721516370773, 0.0038500207010656595, 0.0013105296529829502, 0.003394989063963294, 0.0028679333627223969, 0.0037656996864825487, 0.003011633176356554, 0.0023701884783804417, 0.0016082682413980365, 0.0022390927188098431, 0.0013824341585859656, 0.0015237614279612899, 0.0047323997132480145, 0.0035656692925840616, 0.0049855494871735573, 0.0034598016645759344, 0.0012773198541253805, 0.002714177593588829, 0.0025758000556379557, 0.0016904929652810097, 0.0017340668709948659, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -3550, 13708, -23247, -198, 13284, -14939, -45487, -8733, -6946, 9333, -17694, -16465, 6044, -12250, -4604, -809, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00013475428568199277, 0.00012370212061796337, 0.00011728087702067569, 0.00010826432117028162, 9.0013258159160614e-05, 0.00014315149746835232, 9.5300769316963851e-05, 0.00014527175517287105, 8.7751628598198295e-05, 8.2789265434257686e-05, 0.00013716178364120424, 0.00012850339408032596, 9.4589944637846202e-05, 6.1443432059604675e-05, 0.00012285933189559728, 0.00010990507871611044, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 28,39,21,-35,70,59,-41,57,-13,102,-1,36,-37,32,-17,43,27,73,45,-61,-67,74,-2,51,61,37,36,50,-42,-52,-10,85,-24,12,-60,47,51,-127,-34,13,10,-33,67,-7,-4,-54,-63,-23, 
  /* [1][0][][] */ -52,2,-82,-44,5,92,-59,17,-11,-34,-43,34,54,-14,-31,-29,-28,-32,-6,17,-66,44,-106,-51,-52,-39,45,67,-25,-25,43,-34,8,-56,-33,50,10,-57,127,-41,-25,29,-50,-19,26,54,24,14, 
  /* [2][0][][] */ 7,9,62,-30,-15,-81,17,23,108,75,-67,24,118,-56,127,93,-60,-24,-25,32,80,-80,-36,-113,18,-35,45,-72,41,42,-46,12,40,-20,51,45,-65,8,0,-28,35,31,69,-15,28,-93,102,-50, 
  /* [3][0][][] */ 40,1,-21,-28,32,109,20,-16,48,-50,25,-26,-49,8,15,42,-42,-64,35,-122,-13,-4,-23,-20,-42,91,127,65,-14,-50,28,38,62,-30,100,37,-49,-57,3,42,26,23,-10,3,28,18,-3,-20, 
  /* [4][0][][] */ 103,-9,-4,-40,85,89,61,20,66,-23,-104,37,52,-20,19,-17,-93,-123,-18,-102,-17,22,-37,-39,-93,120,-117,127,-54,-53,29,89,47,-40,8,-36,-8,15,-18,34,-58,-16,6,61,-42,114,-39,-62, 
  /* [5][0][][] */ 4,-5,-51,8,-14,53,18,-24,65,52,41,91,48,-24,28,-2,-41,127,-19,34,10,-1,-69,-13,35,-3,-62,-34,-18,31,21,-13,-40,-1,40,15,-47,4,-89,-2,86,-23,23,50,-24,12,-44,30, 
  /* [6][0][][] */ 55,15,9,69,3,-21,100,-43,8,64,127,90,44,51,-46,53,51,-38,-74,89,50,-61,-31,60,-90,89,78,-2,119,45,-31,0,97,-51,-113,-4,88,32,9,8,11,52,64,-26,69,118,39,-1, 
  /* [7][0][][] */ -93,-9,-27,24,-62,-49,22,46,69,109,-50,-66,-97,11,-22,-20,-74,96,-2,112,-41,38,19,42,-21,-92,-35,-77,24,45,-3,7,-20,10,15,-19,9,-53,127,6,7,38,20,-10,50,72,-34,-4, 
  /* [8][0][][] */ -13,-83,39,-67,63,-51,72,-32,-25,-118,27,11,-38,9,34,31,-7,3,-43,112,8,31,-14,26,59,-14,-66,-33,-127,-29,-57,-127,13,-56,-1,90,-15,32,114,21,19,4,82,113,1,-72,-36,83, 
  /* [9][0][][] */ 28,-50,26,-66,41,84,-36,54,22,-43,-37,-20,24,-52,125,-13,10,-122,43,44,-74,39,58,-40,-24,-91,-29,86,61,75,-43,-28,-55,39,-6,127,-28,-53,-54,-23,-32,0,36,114,55,87,-73,13, 
  /* [10][0][][] */ -18,19,-24,-5,21,27,-62,-42,47,39,63,-4,-33,-8,45,-49,-58,127,3,47,2,-13,15,30,-43,45,7,90,36,10,-30,-6,67,8,-4,25,-11,-42,-38,20,-80,-6,23,-18,11,46,31,31, 
  /* [11][0][][] */ -25,50,-13,37,35,54,1,16,23,11,-127,-75,77,19,-7,-41,1,28,-50,-53,-3,-9,118,15,54,9,-11,36,-3,18,-7,56,33,2,-41,3,41,78,101,16,36,-28,73,7,-54,-15,91,1, 
  /* [12][0][][] */ -64,-2,34,22,-59,-56,9,9,-28,-40,-127,14,66,-92,26,37,53,106,85,-116,-38,48,-36,-94,0,-16,35,-34,8,9,-16,71,73,86,32,-38,-67,-29,26,-3,-32,20,71,-4,40,-17,-37,-33, 
  /* [13][0][][] */ -63,-127,-48,-92,5,20,64,7,-126,25,124,-57,55,47,117,-1,123,33,-5,-102,76,-86,108,4,-83,10,-29,12,-40,-92,-103,26,40,-34,-61,48,23,-49,86,-79,-16,55,62,49,54,-23,99,-67, 
  /* [14][0][][] */ 67,21,-46,6,-35,11,-81,-26,-24,49,54,41,-11,-63,14,-42,56,-106,24,6,80,-58,28,-3,-6,125,-77,4,-58,-35,-92,4,127,41,94,-19,-79,12,-21,65,-16,-40,109,-23,-51,-48,-53,58, 
  /* [15][0][][] */ -68,9,41,20,94,5,-1,29,17,78,-17,56,58,-16,-39,-22,11,41,1,-40,22,-34,-56,-56,52,-65,-39,64,-33,14,19,13,-68,-7,127,-6,-83,19,51,-20,-46,-29,13,-4,-44,-31,-15,10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0062673301436007023, 0.0057533015497028828, 0.00545465387403965, 0.0050353002734482288, 0.0041864556260406971, 0.0066578788682818413, 0.004432374145835638, 0.0067564910277724266, 0.0040812687948346138, 0.0038504726253449917, 0.0063793016597628593, 0.0059766056947410107, 0.0043993140570819378, 0.0028576923068612814, 0.0057141045108437538, 0.0051116105169057846, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 14972, -1223, 16667, -998, 15594, -1737, 37367, 477, 10242, 33506, 2661, 20688, 1240, 13146, 37620, 28772, 600, 1373, 291, 50370, -499, 16830, 758, 15918, 20776, 36694, 482, -819, -2588, 13675, 19321, -150, 923, -88, 797, 17053, 9151, 34578, 2834, 22381, 25460, -1535, 755, 15419, -576, 1870, 47747, 19207, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.3282106313854456e-05, 9.6020310593303293e-05, 7.4714087531901896e-05, 0.00018620937771629542, 0.00010094438039232045, 7.2629649366717786e-05, 5.2528543164953589e-05, 0.00031009840313345194, 0.00010801481403177604, 6.1617247411049902e-05, 6.1042628658469766e-05, 0.00011691672989400104, 6.8169880250934511e-05, 8.6500134784728289e-05, 4.6763536374783143e-05, 6.1933656979817897e-05, 0.00013199522800277919, 5.7970526540884748e-05, 0.00015548102965112776, 4.3724438000936061e-05, 7.1606038545724005e-05, 7.5846568506676704e-05, 0.00010225966252619401, 0.00013707521429751068, 5.7457280490780249e-05, 6.1146420193836093e-05, 7.4749717896338552e-05, 3.7275418435456231e-05, 0.00017854699399322271, 9.1432419139891863e-05, 7.1670110628474504e-05, 0.00029545824509114027, 0.00012005643657175824, 0.00014207724598236382, 8.0134959716815501e-05, 8.6623716924805194e-05, 9.5037648861762136e-05, 4.9370461056241766e-05, 8.1459409557282925e-05, 8.5708445112686604e-05, 5.7284447393612936e-05, 0.00023795229208189994, 0.00018446239118929952, 8.3417558926157653e-05, 0.00015034231182653457, 5.1622555474750698e-05, 4.1758386942092329e-05, 8.3040358731523156e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -85,94,-127,106,-122,85,-72,66,-79,-63,71,-54,63,-101,-14,-58,69,80,99,-99,108,-117,79,-92,-126,-58,57,127,-112,-48,-110,58,82,-86,50,-111,-73,-104,80,-59,-27,-70,127,-98,113,70,-87,-60, -124,127,-66,114,-67,127,-53,84,-127,-97,108,-78,86,-127,-63,-93,93,107,127,-127,100,-127,89,-105,-104,-80,72,124,33,-61,-127,68,108,-127,102,-120,-99,-127,107,-81,-107,115,119,-95,-24,115,-125,-53, -53,70,-5,19,-11,71,-35,48,-52,-26,55,-33,39,-64,-37,-20,54,58,65,-24,29,-29,43,-38,-76,-42,13,41,118,-17,-68,41,43,-84,31,-18,-31,-44,38,-69,-127,-23,71,-37,-69,73,-34,-16, 
  /* [0][1][][] */ -87,87,-42,109,-61,104,-114,76,-82,-103,70,-72,88,-124,-89,-92,79,89,-28,-113,123,-106,94,-79,-105,-89,94,112,-127,-83,-80,25,94,39,98,-113,-104,-105,105,-94,-85,-94,88,-108,127,81,-111,-83, -127,127,-79,127,-127,101,-127,127,-109,-127,127,-127,127,-125,-127,-127,127,127,-40,-125,127,-95,127,-127,-127,-127,127,111,18,-127,-123,73,127,36,127,-127,-127,-121,127,-127,-112,127,113,-87,-52,127,-127,-127, -79,94,-84,48,-54,40,-70,52,-47,-33,65,-48,62,-53,-46,-24,72,62,-29,-34,39,-41,44,-41,-123,-61,46,58,105,-52,-43,49,45,10,59,-43,-47,-39,47,-77,-51,-62,35,-36,-96,91,-39,-62, 
  /* [0][2][][] */ -45,68,-1,50,-35,50,-74,-9,-38,-45,28,-48,70,-65,-51,-74,46,48,-58,-42,29,-30,40,-27,-65,-34,33,8,-83,-76,-50,91,49,51,63,-53,-29,-68,40,-76,-101,-33,53,-110,77,45,-88,-37, -73,85,-73,75,-82,31,-69,19,-55,-55,40,-80,71,-61,-85,-73,48,59,-95,-52,22,-20,52,-25,-77,-54,44,40,5,-120,-90,127,53,59,81,-65,-33,-76,43,-97,-54,81,62,-127,-30,68,-101,-54, -30,67,-83,18,-59,2,-46,23,-12,0,16,-27,48,3,-45,-10,12,29,-62,-17,19,7,9,9,-58,-38,18,37,53,-53,3,56,9,37,46,-7,-9,-31,17,-50,-1,-21,12,-55,-56,58,-40,-34, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031144893728196621, 0.0040808632038533688, 0.0031753487419337034, 0.0079138986766338348, 0.0042901360429823399, 0.0030867601744830608, 0.0022324630990624428, 0.013179182074964046, 0.0045906295999884605, 0.002618732862174511, 0.0025943117216229439, 0.0049689607694745064, 0.0028972197324037552, 0.0036762556992471218, 0.0019874502904713154, 0.0026321802288293839, 0.0056097973138093948, 0.0024637472815811634, 0.0066079436801373959, 0.0018582885386422276, 0.0030432567000389099, 0.003223479026928544, 0.0043460354208946228, 0.0058256965130567551, 0.002441934309899807, 0.0025987229309976101, 0.0031768628396093845, 0.0015842053107917309, 0.0075882473029196262, 0.0038858777843415737, 0.0030459796544164419, 0.012556975707411766, 0.0051023983396589756, 0.006038282997906208, 0.0034057358279824257, 0.0036815078929066658, 0.0040390999056398869, 0.0020982446148991585, 0.0034620247315615416, 0.0036426088772714138, 0.0024345889687538147, 0.010112971998751163, 0.0078396517783403397, 0.0035452460870146751, 0.0063895480707287788, 0.0021939584985375404, 0.0017747314414009452, 0.0035292152315378189, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2809, -1236, 1095, -1998, 4083, -693, 3817, -4830, 1229, 511, 2490, 3946, 518, -505, 897, 6645, -2151, 4671, 5279, 782, -760, 2103, -799, 5742, 2512, 2737, 1218, -822, 7257, -514, 2212, -1752, -1126, 3597, -827, 1919, 1526, 1368, 659, 4873, 1898, 9396, -3658, 1624, 7927, 271, 3174, 2695, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00016373001562897116, 0.00028947496321052313, 0.00024310711887665093, 0.00022465943766292185, 0.00019151040760334581, 0.00021267416013870388, 0.00019601960957515985, 0.00011754401202779263, 0.00024932081578299403, 0.00026907032588496804, 0.00018912038649432361, 0.00018538834410719573, 0.00029003669624216855, 0.00026884509134106338, 0.00025199586525559425, 0.00012120794417569414, 0.00022505068045575172, 0.0001726175396470353, 0.00016488315304741263, 0.00030837036320008337, 0.00028405399643816054, 0.0002488201716914773, 0.00020563548605423421, 0.00015554115816485137, 0.00016736982797738165, 0.00016391761892009526, 0.00024845512234605849, 0.00024232793657574803, 0.00012619320477824658, 0.00024906065664254129, 0.00017358889454044402, 0.00017467942961957306, 0.000167641686857678, 0.0002076042874250561, 0.00024059327552095056, 0.00026632341905497015, 0.00024734230828471482, 0.00018622877541929483, 0.0001755503035383299, 0.00016690405027475208, 0.00027839717222377658, 9.3769376690033823e-05, 0.0001435793237760663, 0.00026893414906226099, 0.00010759077122202143, 0.00022023075143806636, 0.00017652260430622846, 0.00022647819423582405, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 65,26,127,-35,70,98,-71,-50, 
  /* [1][0][][] */ 10,-94,-127,5,55,21,38,-2, 
  /* [2][0][][] */ -127,-2,-39,-22,59,24,-79,-39, 
  /* [3][0][][] */ 45,67,113,-84,-22,-127,-2,-14, 
  /* [4][0][][] */ -127,22,-47,-30,49,11,-42,-56, 
  /* [5][0][][] */ -99,26,-51,-9,6,42,-85,-127, 
  /* [6][0][][] */ -33,-127,-113,43,100,10,12,45, 
  /* [7][0][][] */ -63,-127,-96,-79,-70,-73,19,84, 
  /* [8][0][][] */ 84,27,2,0,99,-71,-127,15, 
  /* [9][0][][] */ -33,45,-56,80,-57,-36,127,-30, 
  /* [10][0][][] */ -21,116,47,65,127,-15,-3,48, 
  /* [11][0][][] */ -81,-32,-26,-10,-91,106,127,0, 
  /* [12][0][][] */ 71,45,-127,46,-2,-36,-79,-8, 
  /* [13][0][][] */ 61,-26,-64,4,11,-127,-20,-25, 
  /* [14][0][][] */ 2,-85,71,13,127,-111,-64,14, 
  /* [15][0][][] */ -43,-45,1,127,73,78,-80,31, 
  /* [16][0][][] */ 127,31,-45,18,79,-117,-123,-33, 
  /* [17][0][][] */ 57,127,58,77,47,62,23,-83, 
  /* [18][0][][] */ 32,-13,-11,0,127,-5,21,-5, 
  /* [19][0][][] */ 13,127,32,16,-111,21,28,-35, 
  /* [20][0][][] */ -41,23,71,-127,33,42,-9,114, 
  /* [21][0][][] */ -24,80,50,-127,29,51,-2,97, 
  /* [22][0][][] */ -64,-71,-90,12,-118,126,127,-30, 
  /* [23][0][][] */ 90,23,-127,10,9,-53,-56,-23, 
  /* [24][0][][] */ -45,43,16,17,-21,107,-127,100, 
  /* [25][0][][] */ -110,-56,-127,15,-54,-75,59,106, 
  /* [26][0][][] */ 44,-8,-38,-32,106,-12,127,-43, 
  /* [27][0][][] */ 127,-69,35,100,4,41,-22,96, 
  /* [28][0][][] */ 47,65,50,-7,127,-66,56,-43, 
  /* [29][0][][] */ -15,-5,-23,-37,-66,23,127,-29, 
  /* [30][0][][] */ 60,-127,-68,-75,-122,17,35,-61, 
  /* [31][0][][] */ 7,30,-5,-8,-127,9,-27,-10, 
  /* [32][0][][] */ 45,-58,-61,77,-8,-79,118,-127, 
  /* [33][0][][] */ 47,127,36,40,46,-29,-34,-20, 
  /* [34][0][][] */ -119,-33,127,-7,-21,94,104,8, 
  /* [35][0][][] */ -25,75,127,-7,-66,-72,-42,22, 
  /* [36][0][][] */ -109,12,99,-16,-26,127,90,24, 
  /* [37][0][][] */ -29,-82,-7,-127,-41,-89,65,48, 
  /* [38][0][][] */ 39,-13,81,-53,55,56,-127,11, 
  /* [39][0][][] */ -15,95,-127,-42,-24,-5,1,80, 
  /* [40][0][][] */ 61,-52,23,32,13,1,6,127, 
  /* [41][0][][] */ -32,89,127,0,29,71,-72,13, 
  /* [42][0][][] */ 67,-127,-113,-25,-111,5,17,-90, 
  /* [43][0][][] */ -7,-75,41,-55,127,-34,7,32, 
  /* [44][0][][] */ 11,127,126,23,9,55,-70,-11, 
  /* [45][0][][] */ -38,43,16,81,-106,58,-127,23, 
  /* [46][0][][] */ -44,-45,58,46,-127,-115,-28,-4, 
  /* [47][0][][] */ -9,62,46,-111,-127,34,-25,61, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.001996791223064065, 0.0035303307231515646, 0.0029648453928530216, 0.0027398641686886549, 0.0023355907760560513, 0.002593696117401123, 0.0023905832786113024, 0.0014335237210616469, 0.0030406252481043339, 0.003281483193859458, 0.002306442940607667, 0.0022609282750636339, 0.0035371812991797924, 0.0032787362579256296, 0.0030732492450624704, 0.001478207646869123, 0.0027446355670690536, 0.0021051801741123199, 0.0020108544267714024, 0.0037607718259096146, 0.0034642184618860483, 0.0030345197301357985, 0.0025078549515455961, 0.001896922942250967, 0.0020411810837686062, 0.0019990792497992516, 0.0030300677753984928, 0.0029553426429629326, 0.001539006014354527, 0.0030374524649232626, 0.0021170265972614288, 0.0021303263492882252, 0.0020444965921342373, 0.0025318658445030451, 0.0029341874178498983, 0.0032479828223586082, 0.0030164960771799088, 0.0022711779456585646, 0.0021409471519291401, 0.0020355007145553827, 0.0033952298108488321, 0.0011435769265517592, 0.0017510408069938421, 0.0032798221800476313, 0.0013121375814080238, 0.0026858535129576921, 0.002152804983779788, 0.0027620450127869844, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 2314, 2406, 22685, -2394, 5996, -15363, 708, -14118, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.9214463261887431e-05, 0.00010361362365074456, 0.00016894230793695897, 0.00012200821947772056, 0.00015778400120325387, 0.00012064518523402512, 7.9770157753955573e-05, 8.0320183769799769e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-41,-25,-71,1,-14,86,85,-93,-85,-40,8,-57,-8,-64,37,-89,16,13,127,58,-28,20,95,78,74,29,1,-99,-61,-83,-59,-62,103,33,-51,28,-30,96,0,20,3,1,-103,36,-29,-28,-89, 
  /* [1][0][][] */ -18,47,-27,-37,-77,58,-31,-48,-38,61,-21,13,45,45,-50,-14,-26,-112,69,-51,127,18,-64,31,54,-6,-86,58,33,-18,62,27,-27,-27,-4,-9,5,106,-12,-18,60,35,-8,2,97,24,-26,56, 
  /* [2][0][][] */ -25,-36,97,-3,71,-39,-18,25,-31,-5,-16,36,4,-35,-41,-127,-53,-90,-28,9,-92,25,-34,-26,-49,12,-10,-47,-41,5,-31,-14,2,-10,17,-3,20,-33,-42,12,36,-29,24,-49,-45,-31,-53,-48, 
  /* [3][0][][] */ 44,8,56,10,13,-37,25,66,-59,-26,50,-29,-70,54,-21,39,64,38,-40,21,-107,-72,127,2,5,0,-57,-31,-54,71,116,-69,4,-111,-29,47,-7,-71,-15,77,-84,-58,67,-8,-103,-69,61,-15, 
  /* [4][0][][] */ 16,-17,62,-37,2,-17,-11,-3,-59,-10,-28,3,39,-69,38,-106,39,45,-20,-38,9,34,18,17,-4,-5,49,-16,17,22,-127,-13,-26,-27,3,17,47,-5,38,4,-32,-10,-70,18,-20,-88,6,17, 
  /* [5][0][][] */ 25,-48,71,28,34,16,26,-3,-76,-8,-39,23,27,3,8,-48,91,77,-1,-18,88,-59,127,-89,-18,41,6,50,15,16,-32,-53,-14,-41,-42,9,38,30,71,7,-73,33,39,25,52,-13,83,-3, 
  /* [6][0][][] */ -51,57,-125,110,67,27,58,28,-23,-1,75,-83,-105,-25,-31,50,-117,28,2,108,20,51,-91,-111,4,-25,38,82,-20,-45,-42,15,35,84,-43,-38,-27,-12,87,-14,70,73,-127,-50,-30,111,-64,-34, 
  /* [7][0][][] */ 39,71,-79,2,6,65,114,74,46,71,-109,-3,-38,13,-59,-66,24,33,115,98,81,11,127,36,103,112,-63,96,-77,34,-10,-82,27,-67,-23,28,4,87,-59,91,-60,43,-15,-89,76,-14,54,-37, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0042166146449744701, 0.0044035790488123894, 0.0071800481528043747, 0.005185349378734827, 0.006705820094794035, 0.0051274201832711697, 0.0033902316354215145, 0.0034136075992137194, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -137, 8693, -937, 398, 354, -1959, 2700, -1865, -3172, 52, -3221, -23, -1626, -1068, -2878, 4856, 8903, 2934, -831, -3063, -7364, 319, 18472, -6380, -3088, -652, 7702, -6250, -488, -2276, -7937, 8179, 4864, 990, 4068, -364, 124, -456, 11918, -2204, 7143, -2364, 3748, 5097, -2168, 13515, 349, 36, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00026371161220595241, 0.00018114357953891158, 0.00057960354024544358, 0.00025681380066089332, 0.00022432228433899581, 0.00024886097526177764, 0.00022852682741358876, 0.00024542713072150946, 0.00011246077338000759, 0.00025003845803439617, 0.00033515729592181742, 0.0016971233999356627, 0.00034734839573502541, 0.00062056060414761305, 0.0003813100338447839, 0.00060795003082603216, 0.00014432889292947948, 7.7167896961327642e-05, 0.00025210817693732679, 0.00032684498000890017, 0.00025477228336967528, 0.00026204713503830135, 8.1857528130058199e-05, 0.00038842705544084311, 0.00016774344840086997, 0.00035665242467075586, 0.00051139714196324348, 0.00019453726417850703, 0.00025275221560150385, 0.00036897161044180393, 0.00011966245074290782, 0.00014403191744349897, 0.00013322240556590259, 0.00030240102205425501, 0.00014816166367381811, 0.00039631765685044229, 0.0024027687031775713, 0.00038119402597658336, 0.00015732889005448669, 0.0002075801749015227, 0.0001690935023361817, 0.00013347681669984013, 0.0003183716326020658, 0.00020835045143030584, 0.00033544379402883351, 7.2944691055454314e-05, 6.3945743022486567e-05, 0.00014838714560028166, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 12,-42,12,9,-20,-115,-47,60,-46,4,-26,9,50,-4,-11,-3,92,-3,40,-2,5,-30,-66,26,1,-15,-13,-27,-59,87,-18,-123,49,-19,-58,-59,-15,-31,0,-5,-13,36,10,-5,-11,63,127,-10, -127,-78,-21,127,-70,83,-99,127,20,11,-7,-3,53,26,-2,-45,-37,49,36,6,13,127,18,127,127,-34,-56,39,63,-108,-11,-60,74,-15,-54,-127,17,12,-63,-37,-127,4,-97,-127,42,55,43,126, -17,3,14,8,-24,32,37,60,-2,-41,-8,3,-11,-2,0,1,-63,21,-51,-37,-3,-31,127,27,-45,0,-1,-6,9,54,7,-6,-14,-28,-49,82,5,11,10,100,21,-27,23,-43,-9,23,-28,-9, 
  /* [0][1][][] */ -7,-21,-26,-5,36,-127,127,-83,-20,10,17,36,127,13,4,-37,-25,-32,38,37,64,-75,38,16,-68,127,-80,-20,127,-89,49,-127,-46,-3,-87,11,8,-62,-49,4,118,127,14,-104,-59,-62,-1,91, 96,-127,127,-5,127,74,-68,-68,35,127,127,-127,-88,127,127,127,127,127,116,127,127,113,4,11,111,-99,-127,127,39,127,127,25,-127,127,127,116,-127,127,-127,-127,39,44,-127,-21,127,-127,-8,81, 17,39,-38,-12,-48,124,-119,89,102,-80,18,62,-27,7,15,-63,16,6,-127,10,19,-111,-37,2,72,-12,-29,112,-72,-32,24,-27,-17,7,92,-13,36,-6,-7,-71,106,-1,33,44,-49,96,96,-94, 
  /* [0][2][][] */ 3,17,8,-42,2,-67,-18,1,-4,-3,-12,1,-9,-10,3,-5,-52,5,28,-45,8,-20,84,2,-103,6,38,-24,10,4,-6,15,-1,-20,-74,27,-3,-8,5,64,-30,-7,4,6,-13,9,-11,13, 39,-21,-34,-44,21,57,113,-94,127,-31,-19,5,-65,-15,-20,-68,-20,87,5,25,12,35,-23,-19,-67,60,75,-3,-94,18,-41,6,-11,-10,-31,2,48,-30,-9,127,-120,-3,-17,56,42,51,9,-127, -11,32,5,-30,-17,15,-15,-35,-28,-23,-15,3,24,-12,-11,12,50,23,-33,-23,-8,-21,-45,-1,41,-18,17,-15,-14,12,-19,30,49,-25,-28,-35,-9,0,19,49,-14,-16,2,13,-8,4,65,-63, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011207743547856808, 0.0076986020430922508, 0.024633150547742844, 0.01091458648443222, 0.0095336968079209328, 0.010576591826975346, 0.0097123896703124046, 0.010430652648210526, 0.0047795828431844711, 0.010626634582877159, 0.014244184829294682, 0.072127744555473328, 0.014762306585907936, 0.026373825967311859, 0.016205675899982452, 0.02583787590265274, 0.0061339777894318104, 0.0032796354498714209, 0.010714597068727016, 0.01389091182500124, 0.010827821679413319, 0.01113700307905674, 0.0034789447672665119, 0.016508148983120918, 0.0071290964260697365, 0.015157727524638176, 0.02173437736928463, 0.0082678338512778282, 0.01074196957051754, 0.015681292861700058, 0.0050856540910899639, 0.0061213565059006214, 0.0056619523093104362, 0.01285204291343689, 0.0062968707643449306, 0.01684349961578846, 0.10211766511201859, 0.016200745478272438, 0.0066864774562418461, 0.008822157047688961, 0.0071864738129079342, 0.0056727644987404346, 0.013530793599784374, 0.0088548939675092697, 0.014256360940635204, 0.0031001493334770203, 0.0027176940347999334, 0.0063064536079764366, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2661, 3428, 11384, 2054, 2911, -1769, 6359, 12356, 4122, -908, 3690, -2277, 15119, -1940, 2130, 29178, -465, 1782, 40, 3514, 3893, 3933, 545, 20645, 5203, 3337, 20183, 1662, 6311, 5113, 838, 1474, 663, 2487, -629, 93, -3503, -482, 3078, 2411, 5146, 2106, 4542, 5194, 4426, 2187, 2159, 6408, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0002112472866429016, 0.00023810408310964704, 8.1213562225457281e-05, 0.00016757268167566508, 0.00018646502576302737, 0.00023168089683167636, 0.00012922448513563722, 7.5250376539770514e-05, 0.0001328856305917725, 0.00022882054327055812, 0.00022082164650782943, 0.00021408202883321792, 6.2399682065006346e-05, 0.00021405651932582259, 0.00022144924150779843, 3.9045691664796323e-05, 0.00029215123504400253, 0.00022063261712901294, 0.00026015128241851926, 0.00019255257211625576, 0.00018123237532563508, 0.00018493637617211789, 0.00033313911990262568, 5.1564962632255629e-05, 0.00015701855591032654, 0.00016221996338572353, 5.2724710258189589e-05, 0.00023317658633459359, 0.00012610176054295152, 0.00015036488184705377, 0.00040114179137162864, 0.0003340472758281976, 0.00024100887821987271, 0.00017447353457100689, 0.00022399929002858698, 0.00026898598298430443, 0.000165237404871732, 0.00025378743885084987, 0.00019763172895181924, 0.00022297035320661962, 0.00014991313219070435, 0.00022644006821792573, 0.0001796350406948477, 0.0001621601841179654, 0.00016219614190049469, 0.00029627178446389735, 0.00030930695356801152, 0.00013153384497854859, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 65,127,-62,-93,14,87,19,67, 
  /* [1][0][][] */ 59,-70,53,-127,-55,87,-87,-52, 
  /* [2][0][][] */ -36,127,111,47,112,10,56,4, 
  /* [3][0][][] */ 102,52,-78,61,-8,-86,-127,-26, 
  /* [4][0][][] */ -44,32,21,-69,-17,123,127,50, 
  /* [5][0][][] */ 27,86,-127,-79,47,95,43,-27, 
  /* [6][0][][] */ -12,127,72,62,81,3,16,-94, 
  /* [7][0][][] */ 127,-12,-28,31,25,22,107,14, 
  /* [8][0][][] */ 56,127,61,85,119,87,100,-79, 
  /* [9][0][][] */ 51,101,-127,-88,7,94,12,65, 
  /* [10][0][][] */ -61,-41,25,-49,0,-23,-42,127, 
  /* [11][0][][] */ 12,-103,-127,-8,14,-17,31,-12, 
  /* [12][0][][] */ -27,-92,-113,-35,-127,42,-45,45, 
  /* [13][0][][] */ -7,10,-95,98,-127,-28,1,-17, 
  /* [14][0][][] */ -60,-50,-127,-12,35,-8,-7,-57, 
  /* [15][0][][] */ 30,-97,-127,20,-97,-33,-43,-6, 
  /* [16][0][][] */ 127,-65,-16,70,-76,24,31,108, 
  /* [17][0][][] */ -22,112,127,-27,-41,-10,-22,-14, 
  /* [18][0][][] */ 11,-127,54,81,4,-62,52,-78, 
  /* [19][0][][] */ 127,-40,-58,30,-94,8,42,97, 
  /* [20][0][][] */ -27,-127,84,78,-13,-92,1,-71, 
  /* [21][0][][] */ -6,-52,-16,-33,127,-8,51,25, 
  /* [22][0][][] */ -127,31,-75,55,52,52,-95,-104, 
  /* [23][0][][] */ -77,-55,47,0,-102,111,127,-57, 
  /* [24][0][][] */ -29,70,1,-22,-44,127,111,-10, 
  /* [25][0][][] */ -53,-98,-127,-52,-54,-13,-32,-31, 
  /* [26][0][][] */ -9,60,-6,127,-75,35,-57,5, 
  /* [27][0][][] */ 19,-127,37,77,19,-54,8,-122, 
  /* [28][0][][] */ 22,127,68,43,115,-22,34,-77, 
  /* [29][0][][] */ 99,28,-25,-11,80,-127,-114,44, 
  /* [30][0][][] */ 28,-3,37,-127,24,-22,18,-20, 
  /* [31][0][][] */ 49,-40,5,68,-14,29,10,127, 
  /* [32][0][][] */ -92,-65,14,-50,-70,127,61,84, 
  /* [33][0][][] */ -33,46,45,-35,35,127,-109,73, 
  /* [34][0][][] */ 29,127,-72,-47,30,53,-78,48, 
  /* [35][0][][] */ 10,-127,31,62,-39,-72,34,-75, 
  /* [36][0][][] */ -20,-27,-80,-7,-127,-59,-23,18, 
  /* [37][0][][] */ -56,-127,78,90,-44,-90,-15,-47, 
  /* [38][0][][] */ -68,20,56,-66,-127,-88,-62,75, 
  /* [39][0][][] */ 44,-127,73,60,-25,-76,-24,-72, 
  /* [40][0][][] */ -5,59,18,40,-127,-7,-64,17, 
  /* [41][0][][] */ 113,127,-73,-108,61,15,-1,15, 
  /* [42][0][][] */ -5,-40,-16,11,127,17,51,22, 
  /* [43][0][][] */ 127,19,78,24,-73,-31,65,107, 
  /* [44][0][][] */ 67,38,-19,20,87,-105,-127,27, 
  /* [45][0][][] */ 51,15,13,14,68,-127,2,-51, 
  /* [46][0][][] */ 56,-38,-5,127,45,57,18,75, 
  /* [47][0][][] */ -72,-68,59,86,-56,19,127,-88, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.003250038018450141, 0.0036632297560572624, 0.0012494701659306884, 0.0025781046133488417, 0.0028687631711363792, 0.0035644089803099632, 0.001988117815926671, 0.0011577265104278922, 0.0020444444380700588, 0.0035204025916755199, 0.0033973394893109798, 0.0032936506904661655, 0.00096001871861517429, 0.0032932581380009651, 0.0034069952089339495, 0.00060071772895753384, 0.0044947448186576366, 0.003394431434571743, 0.0040024258196353912, 0.0029624199960380793, 0.0027882589492946863, 0.0028452449478209019, 0.0051253433339297771, 0.00079332658788189292, 0.0024157294537872076, 0.0024957531131803989, 0.00081116933142766356, 0.0035874203313142061, 0.0019400748424232006, 0.00231336266733706, 0.0061715636402368546, 0.0051393150351941586, 0.0037079199682921171, 0.0026842742227017879, 0.0034462276380509138, 0.0041383476927876472, 0.0025421762838959694, 0.0039045182056725025, 0.0030405628494918346, 0.0034303974825888872, 0.0023064124397933483, 0.0034837790299206972, 0.002763683907687664, 0.0024948334321379662, 0.0024953866377472878, 0.004558139480650425, 0.0047586853615939617, 0.0020236473064869642, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7411, 16350, -3902, 7269, -109, 3481, -12461, -18604, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00025136963813565671, 0.00012179245095467195, 0.00013496899919118732, 0.00012618655455298722, 0.00021305866539478302, 0.00016417770530097187, 0.00019339505524840206, 0.00014228594955056906, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -40,-7,33,12,-33,-11,11,5,-39,-5,-63,-58,-26,-61,-9,-27,47,-42,40,39,-18,32,-40,18,-2,-39,57,-18,-4,-16,16,10,84,36,36,-127,20,1,-14,-35,1,-18,46,51,37,7,29,4, 
  /* [1][0][][] */ 4,41,63,-31,-9,37,-56,-27,7,25,-17,-92,11,87,-21,57,-21,18,-26,-56,9,-79,-28,21,-74,-17,-5,-116,-26,-19,35,-54,49,80,-42,6,127,-34,1,52,-32,42,-86,-33,116,-19,-35,-31, 
  /* [2][0][][] */ -2,-24,-59,11,-1,40,20,-2,-5,35,-4,27,65,-88,16,-58,30,-88,26,37,-27,47,-9,20,-18,55,-24,-68,22,6,20,-67,-50,-82,30,-24,98,20,-14,-56,-1,26,73,28,127,17,20,24, 
  /* [3][0][][] */ -7,24,-69,46,15,-36,-72,-102,12,-21,-34,0,8,27,36,73,-8,13,-38,24,2,-96,27,-61,-72,-11,127,-17,-44,3,-62,15,-4,-79,9,-11,-20,-39,-22,99,-50,-32,4,18,39,2,-39,43, 
  /* [4][0][][] */ -28,-46,-8,8,28,-30,-14,-8,29,-33,57,-76,4,28,8,10,-17,-26,12,-12,-3,-51,3,-21,19,-12,37,52,34,22,-16,25,-13,-2,-4,-2,-71,84,34,-23,29,-22,-24,-25,-77,9,127,9, 
  /* [5][0][][] */ 48,-29,-1,15,26,-41,27,-127,31,-26,-4,114,-74,68,21,-61,0,-96,15,1,-42,60,-40,-46,-63,76,-22,-1,-16,49,-40,-34,20,50,36,-1,-38,-5,-47,-47,16,-36,-41,-4,-31,54,92,20, 
  /* [6][0][][] */ 55,-23,24,-13,-41,-16,-35,21,-42,5,-39,127,-44,-35,-5,61,12,46,13,30,36,-83,-20,25,20,41,-65,9,10,-43,12,40,8,15,-13,-4,13,2,-6,-6,-7,-15,43,59,-2,-36,76,-14, 
  /* [7][0][][] */ -35,11,-3,65,31,34,2,30,22,-1,76,-1,126,115,66,48,44,52,-17,9,24,-21,-92,-33,26,-5,-34,66,36,-27,-41,-14,41,7,42,-109,-81,37,39,64,-37,31,80,127,-65,-30,-116,64, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010683209635317326, 0.0051761791110038757, 0.0057361824437975883, 0.0053629283793270588, 0.0090549932792782784, 0.0069775525480508804, 0.008219289593398571, 0.0060471524484455585, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 14154, 4976, 3585, -717, 540, -1959, 56, 35732, -675, 2920, 5246, 67439, 832, 4405, 396, 11285, -2763, 13759, 692, 6846, 10957, 1183, 2620, -9425, 11744, 720, 2982, 13913, 2548, -339, -9462, 12338, 5168, 2662, -240, 6052, -9089, 10720, -1089, 18733, -1975, 269, 6323, 3064, 637, 120, 1428, -878, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010238667891826481, 0.000101134464784991, 0.00016729261551517993, 0.00016253595822490752, 0.00075975660001859069, 0.00014853211177978665, 0.00017292899428866804, 8.8684952061157674e-05, 0.00012291784514673054, 8.3676895883399993e-05, 7.6868680480401963e-05, 4.9794802180258557e-05, 9.4363531388808042e-05, 6.3654450059402734e-05, 0.00025954589364118874, 0.00018900602299254388, 0.00012444355525076389, 0.00034554160083644092, 0.00011297319724690169, 0.00015075660485308617, 9.0304136392660439e-05, 0.00043764352449215949, 0.00012983327906113118, 0.00019947871624026448, 0.00011107162572443485, 8.3589933637995273e-05, 5.767063339590095e-05, 8.715222793398425e-05, 0.00018600000475998968, 0.00077167223207652569, 0.00022376999550033361, 8.3889608504250646e-05, 9.6779593150131404e-05, 0.0001406226510880515, 0.00018167012603953481, 5.9039146435679868e-05, 9.0418303443584591e-05, 4.5565720938611776e-05, 9.9235789093654603e-05, 6.7818742536474019e-05, 0.0001438152976334095, 0.0001528701395727694, 6.6391847212798893e-05, 7.4700088589452207e-05, 8.0185141996480525e-05, 0.00036905365413986146, 7.0129652158357203e-05, 0.00017236746498383582, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -30,-71,2,-18,127,-45,75,-65,-85,-82,-25,-48,113,36,65,-117,64,-31,8,-35,-75,112,6,29,-17,93,39,-40,61,-76,31,-46,-118,-92,43,71,21,83,119,-75,-121,-16,47,68,51,-127,98,81, -58,-101,-68,54,-101,108,74,-81,-64,46,79,-107,127,74,107,-69,-64,-79,37,-52,-85,63,-62,119,-83,118,67,-113,75,-50,2,-114,-47,-96,74,127,119,123,127,-71,-127,-84,64,90,88,104,95,75, 1,-35,-77,89,-41,-29,31,-15,106,20,59,-84,23,53,-35,-7,-75,-17,33,-36,-39,-59,-70,-14,-84,58,13,-78,24,55,126,-77,11,7,-11,42,86,77,57,2,-21,85,59,23,45,30,17,-118, 
  /* [0][1][][] */ -102,-95,-5,-70,-91,-68,107,-113,-127,-127,74,-74,86,44,-127,-84,127,-127,-55,-66,-83,127,-35,25,-10,112,96,-47,-104,-80,22,-63,-93,-127,-127,74,37,87,12,-99,63,-12,87,112,81,101,127,-127, -109,-127,-115,-96,-37,127,127,-127,91,60,127,-127,110,127,52,-127,50,-88,-127,-127,-127,102,-127,127,-127,127,127,-127,-127,127,-18,-127,-127,-112,46,127,127,127,-12,-127,94,-102,127,127,127,-4,126,119, -50,-65,-127,127,85,-41,49,-30,73,18,19,-63,7,63,76,-57,-19,2,-12,-70,-63,-43,-62,-21,-126,68,33,-82,-54,38,127,-105,-64,3,56,73,79,66,-28,-37,49,127,81,21,54,-45,29,30, 
  /* [0][2][][] */ -127,-37,38,20,-33,-24,5,-46,27,-45,24,-77,6,23,-47,-17,-73,-31,108,-30,-14,29,-48,-1,1,63,76,-22,34,56,9,-10,5,-92,-39,29,17,23,-75,-45,22,-3,45,28,24,47,23,-59, -100,-52,-26,-53,102,45,48,-69,93,17,-38,-112,-14,39,-127,-70,43,4,61,-71,-38,7,-72,48,-70,62,71,-38,30,4,-42,-39,-72,-12,-59,42,31,30,-118,-72,23,-45,70,62,41,-109,23,12, -52,-33,-56,-20,-15,-6,2,-36,-57,1,-16,-52,-11,14,29,-35,33,33,2,-45,-45,-44,-5,-42,-66,8,35,-29,7,-65,44,-39,-109,11,25,41,16,32,-69,-32,0,58,22,16,19,-5,2,44, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0043514338321983814, 0.0042982148006558418, 0.0071099363267421722, 0.0069077783264219761, 0.032289654016494751, 0.0063126147724688053, 0.0073494818061590195, 0.0037691104225814342, 0.0052240081131458282, 0.0035562680568546057, 0.0032669187057763338, 0.0021162789780646563, 0.0040104500949382782, 0.0027053139638155699, 0.01103070005774498, 0.0080327559262514114, 0.0052888509817421436, 0.014685518108308315, 0.0048013608902692795, 0.0064071556553244591, 0.003837925847619772, 0.018599849194288254, 0.0055179144255816936, 0.0084778452292084694, 0.0047205439768731594, 0.0035525721032172441, 0.0024510018993169069, 0.0037039697635918856, 0.0079049998894333839, 0.032796069979667664, 0.0095102246850728989, 0.0035653084050863981, 0.0041131325997412205, 0.0059764622710645199, 0.0077209803275763988, 0.0025091636925935745, 0.0038427778054028749, 0.0019365431508049369, 0.004217520821839571, 0.0028822964522987604, 0.0061121499165892601, 0.0064969807863235474, 0.0028216533828526735, 0.0031747536268085241, 0.0034078685566782951, 0.015684779733419418, 0.002980510238558054, 0.0073256171308457851, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1124, -492, -337, 1028, 18787, 1702, -571, 4371, 1267, 1190, 301, 4453, 1311, 543, -854, 373, 2989, 9006, 3023, -863, 878, -1375, -87, 2199, -166, -597, 1551, -13, 2501, 14216, 2096, -52, 485, -25, 2105, 43, 506, -201, 1125, 997, 1614, 2067, 96, -240, 528, 2259, 1260, -146, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00048840971430763602, 0.0004227057215757668, 0.00031412957469001412, 0.00036715384339913726, 5.6370412494288757e-05, 0.00035494321491569281, 0.00049364910228177905, 0.00021084550826344639, 0.00033305247779935598, 0.00056043197400867939, 0.0003436408587731421, 0.00022155533952172846, 0.00023262719332706183, 0.00040679852827452123, 0.00032033410388976336, 0.00035388319520279765, 0.0002521471178624779, 0.00010225862934021279, 0.0002404644328635186, 0.00032491036108694971, 0.00047519657528027892, 0.00020486080029513687, 0.00053741032024845481, 0.0003321327967569232, 0.00051437504589557648, 0.00086561654461547732, 0.0003306948347017169, 0.00089237699285149574, 0.00031509084510616958, 6.8292109062895179e-05, 0.00035100721288472414, 0.00079725956311449409, 0.00041968846926465631, 0.00042722540092654526, 0.00031904110801406205, 0.0003649804275482893, 0.00041169155156239867, 0.00065481092315167189, 0.00043021328747272491, 0.00056515017058700323, 0.00035184872103855014, 0.0003209348360542208, 0.00038319829036481678, 0.00051115400856360793, 0.00047804627683945, 0.0002255998260807246, 0.00029655909747816622, 0.00036326507688499987, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -33,36,6,-22,-79,-43,-127,19, 
  /* [1][0][][] */ 93,-79,-56,-47,127,-90,94,24, 
  /* [2][0][][] */ -95,127,-46,-119,48,-26,-34,37, 
  /* [3][0][][] */ 57,28,100,6,100,124,127,-6, 
  /* [4][0][][] */ -71,-127,57,6,-54,-101,7,-37, 
  /* [5][0][][] */ 127,-22,64,74,-64,-12,-5,-19, 
  /* [6][0][][] */ 28,34,127,-22,44,-32,-42,32, 
  /* [7][0][][] */ 27,7,-127,-28,-41,93,94,-65, 
  /* [8][0][][] */ -10,127,-37,1,64,111,43,50, 
  /* [9][0][][] */ -17,123,-70,78,4,-127,39,122, 
  /* [10][0][][] */ 9,-120,-2,-33,-70,-127,-63,-85, 
  /* [11][0][][] */ -127,-82,115,57,-14,-67,104,60, 
  /* [12][0][][] */ -15,45,-127,71,33,-51,-76,88, 
  /* [13][0][][] */ 95,-127,88,74,2,27,26,-61, 
  /* [14][0][][] */ -20,93,-39,-127,-29,-119,-36,-55, 
  /* [15][0][][] */ 42,118,26,-14,39,-66,96,-127, 
  /* [16][0][][] */ -107,-127,-65,91,-51,17,-12,74, 
  /* [17][0][][] */ -19,-105,-127,85,-54,72,-43,76, 
  /* [18][0][][] */ -108,-71,-49,97,-15,77,-7,127, 
  /* [19][0][][] */ 67,-127,110,-127,13,-73,26,-42, 
  /* [20][0][][] */ -10,69,23,16,38,127,68,-2, 
  /* [21][0][][] */ 30,110,45,-32,41,-65,96,-127, 
  /* [22][0][][] */ 18,19,93,22,-5,127,27,-32, 
  /* [23][0][][] */ -113,-77,36,-79,99,112,-56,-127, 
  /* [24][0][][] */ -102,-85,39,-91,113,96,-51,-127, 
  /* [25][0][][] */ 127,7,-58,-11,14,28,-57,-7, 
  /* [26][0][][] */ -126,-32,-127,-25,-52,-30,15,2, 
  /* [27][0][][] */ 83,36,-4,-64,-127,-28,100,95, 
  /* [28][0][][] */ -127,-75,18,46,-69,-102,-3,-1, 
  /* [29][0][][] */ 111,106,36,-127,29,13,-60,-93, 
  /* [30][0][][] */ -85,-71,44,-65,79,92,-51,-127, 
  /* [31][0][][] */ 54,38,-10,127,6,-65,11,11, 
  /* [32][0][][] */ -25,127,-9,35,23,61,-17,42, 
  /* [33][0][][] */ -25,127,-71,24,22,-35,-29,-5, 
  /* [34][0][][] */ -127,-102,-56,98,-13,12,16,99, 
  /* [35][0][][] */ -54,127,-28,-2,69,104,54,67, 
  /* [36][0][][] */ 68,32,10,-53,-127,-33,115,112, 
  /* [37][0][][] */ -64,112,27,22,-127,112,-29,-99, 
  /* [38][0][][] */ 43,37,37,22,127,74,105,50, 
  /* [39][0][][] */ -23,-70,31,-15,14,39,-92,127, 
  /* [40][0][][] */ -61,-47,-67,127,-20,6,17,65, 
  /* [41][0][][] */ 127,10,67,99,-48,-12,-12,-27, 
  /* [42][0][][] */ -43,6,-72,-127,53,-103,4,85, 
  /* [43][0][][] */ 28,-9,88,-3,31,127,95,4, 
  /* [44][0][][] */ -32,-25,-71,127,51,13,-38,-37, 
  /* [45][0][][] */ 79,124,115,-125,53,-64,29,-127, 
  /* [46][0][][] */ -36,-127,-41,34,-6,37,-57,120, 
  /* [47][0][][] */ 53,49,125,9,96,126,127,-31, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0046968846581876278, 0.004065029788762331, 0.0030208867974579334, 0.0035308047663420439, 0.00054209679365158081, 0.0034133787266910076, 0.0047472706064581871, 0.0020276359282433987, 0.0032028623390942812, 0.0053895004093647003, 0.0033046875614672899, 0.0021306290291249752, 0.0022371036466211081, 0.0039120553992688656, 0.0030805538408458233, 0.0034031849354505539, 0.0024248207919299603, 0.00098338956013321877, 0.0023124718572944403, 0.0031245620921254158, 0.0045698182657361031, 0.0019700827542692423, 0.005168108269572258, 0.0031940180342644453, 0.0049465852789580822, 0.0083243660628795624, 0.0031801897566765547, 0.0085817128419876099, 0.003030130872502923, 0.00065674405777826905, 0.003375527448952198, 0.0076669980771839619, 0.0040360139682888985, 0.0041084941476583481, 0.0030681195203214884, 0.003509903559461236, 0.0039591100066900253, 0.0062971138395369053, 0.0041372277773916721, 0.0054348739795386791, 0.0033836199436336756, 0.0030863308347761631, 0.0036850990727543831, 0.0049156094901263714, 0.0045972228981554508, 0.0021695236209779978, 0.0028519169427454472, 0.003493407741189003, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -8051, -2883, 12435, -10335, 22535, 8529, -9099, 11445, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018137419829145074, 0.00024941901210695505, 0.00019679803517647088, 0.00025428782100789249, 0.00020491615578066558, 0.00016638595843687654, 0.00017827193369157612, 0.0002806527481880039, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -14,-10,-18,-68,-23,-32,23,-20,40,10,-33,-3,111,127,-17,-98, 
  /* [1][0][][] */ 127,-58,-39,15,-45,71,-68,-45,-39,81,-34,-47,-9,6,-61,-20, 
  /* [2][0][][] */ -37,-93,42,46,46,-58,-81,-20,32,-92,28,-127,45,-19,-77,25, 
  /* [3][0][][] */ 42,16,17,13,-15,69,-56,-23,127,46,13,25,3,-12,12,18, 
  /* [4][0][][] */ -97,-38,-22,-127,-4,44,55,-120,32,-18,-45,-33,-119,36,-37,-24, 
  /* [5][0][][] */ 82,54,72,-22,50,-43,-127,-118,-18,-71,63,50,-57,46,61,-37, 
  /* [6][0][][] */ 109,45,-127,-76,26,-71,1,-91,-40,16,-123,91,94,-90,6,76, 
  /* [7][0][][] */ -127,-4,101,-26,-61,1,-4,-62,-53,63,80,-32,62,-27,31,34, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0077084032818675041, 0.010600307956337929, 0.0083639165386557579, 0.01080723199993372, 0.0087089361622929573, 0.0070714033208787441, 0.0075765573419630527, 0.011927741579711437, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 15180, -377, 231, 3102, -632, 404, 10667, 1532, -2070, 267, -2279, 3149, -298, 287, -272, -1631, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00015310608432628214, 0.00020599630079232156, 0.00012673839228227735, 0.00014186986663844436, 0.0009416380780749023, 0.00072753912536427379, 0.00014819731586612761, 0.00069809763226658106, 0.00043277491931803524, 0.00093630398623645306, 0.00033376700594089925, 0.00019315227109473199, 0.00010087630653288215, 0.00036440725671127439, 0.00020668585784733295, 0.00037045215140096843, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 0,-3,9,5,-21,11,10,18,-2,-10,0,-6,1,-15,2,1, 6,-5,9,4,12,-1,13,-26,-6,10,-8,86,-10,14,8,1, 3,-5,1,4,1,-13,-6,12,5,3,-8,-8,4,-12,-2,1, 
  /* [0][1][][] */ 11,-9,6,1,127,-24,-127,-19,127,127,-1,-7,110,-28,0,-16, -127,127,127,-3,-90,-92,-13,-102,16,-105,127,127,127,127,127,127, 21,-6,-5,-2,-12,127,6,-9,-1,-12,-10,-7,13,-8,-14,-7, 
  /* [0][2][][] */ 2,-8,2,-11,-17,16,56,8,-10,-8,-1,-3,-5,-2,-5,-9, 22,-16,-4,-127,7,-16,-10,127,-4,1,0,-18,-6,-61,-9,-33, 4,-8,-2,-6,2,-4,0,-1,3,2,-6,-4,7,-8,-11,-10, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0065070083364844322, 0.0087548429146409035, 0.0053863814100623131, 0.0060294694267213345, 0.040019616484642029, 0.030920412391424179, 0.00629838602617383, 0.029669148847460747, 0.018392933532595634, 0.039792917668819427, 0.014185097999870777, 0.0082089714705944061, 0.0042872428894042969, 0.0154873076826334, 0.0087841488420963287, 0.015744216740131378, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 1227, 114, -771, 2980, 67197, 53375, 2808, -2419, 8468, -5089, 1805, 507, 4953, -19861, 744, 55199, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00015519905718974769, 0.00099304981995373964, 0.00015082060417626053, 0.000118692682008259, 2.7260748538537882e-05, 3.6507703043753281e-05, 0.00010593397018965334, 2.4932134692789987e-05, 9.6250347269233316e-05, 4.1996354411821812e-05, 0.0003343096177559346, 0.00077062216587364674, 0.00035536984796635807, 1.6527676052646711e-05, 0.00066784193040803075, 3.9867889427114278e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -83, -107, -29, 
  /* [0][1][][] */ 67, -35, 17, 
  /* [0][2][][] */ 33, 127, 20, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 116, 121, 56, 
  /* [3][1][][] */ -1, -23, -16, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 28, -54, -2, 
  /* [4][1][][] */ 25, -127, -3, 
  /* [4][2][][] */ 15, -83, -11, 
  /* [5][0][][] */ -56, 28, 3, 
  /* [5][1][][] */ -127, 30, 7, 
  /* [5][2][][] */ -84, 23, 4, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -48, 56, -14, 
  /* [6][2][][] */ -33, -49, -85, 
  /* [7][0][][] */ 42, 25, -20, 
  /* [7][1][][] */ 127, 67, -10, 
  /* [7][2][][] */ 38, 10, -16, 
  /* [8][0][][] */ -20, -29, 53, 
  /* [8][1][][] */ -53, -86, 127, 
  /* [8][2][][] */ -25, -60, 96, 
  /* [9][0][][] */ -23, 49, -12, 
  /* [9][1][][] */ -17, 127, -13, 
  /* [9][2][][] */ -11, 82, -9, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 64, -94, 35, 
  /* [11][2][][] */ -86, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 69, 7, -35, 
  /* [13][1][][] */ 113, 94, -23, 
  /* [13][2][][] */ 96, 127, 44, 
  /* [14][0][][] */ -31, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -17, -70, 80, 
  /* [15][0][][] */ -82, -24, 21, 
  /* [15][1][][] */ -127, -124, 18, 
  /* [15][2][][] */ -19, -67, 0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.039575755596160889, 0.25322768092155457, 0.038459252566099167, 0.03026663139462471, 0.0069514904171228409, 0.0093094641342759132, 0.027013160288333893, 0.0063576940447092056, 0.024543836712837219, 0.010709069669246674, 0.085248947143554688, 0.19650864601135254, 0.090619303286075592, 0.0042145573534071445, 0.17029967904090881, 0.010166311636567116, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10398588329553604, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.064998403191566467, } };
const TfArray<1, int> quant50_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.064718775451183319, } };
const TfArray<1, int> quant53_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.081996560096740723, } };
const TfArray<1, int> quant54_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.021501066163182259, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.044541355222463608, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.020339315757155418, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.046295817941427231, } };
const TfArray<1, int> quant61_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069221585988998413, } };
const TfArray<1, int> quant62_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.019219947978854179, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.04171806201338768, } };
const TfArray<1, int> quant65_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.071058206260204315, } };
const TfArray<1, int> quant66_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.051960300654172897, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.077868245542049408, } };
const TfArray<1, int> quant69_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension69, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
