/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.03.2025 03:17:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 74400;
#else
constexpr int kTensorArenaSize = 73376;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 23642, -34255, -34559, -32006, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00015195361629594117, 0.0001359620364382863, 0.00013817744911648333, 0.00013923969527240843, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 72,-30,-63,-56,110,-20,16,-44,102,-4,127,90,-56,-21,39,14,20,-22,-122,34,2,107,-54,108,5,6,20,68,92,-48,44,-6, 
  /* [1][0][][] */ 66,84,-80,-6,-40,46,126,48,-43,-75,-91,33,100,-51,115,-120,127,-109,29,-56,11,-83,-78,-13,5,-84,66,-78,-41,-103,-26,-20, 
  /* [2][0][][] */ -23,116,30,90,-28,-2,103,47,-78,-127,93,-57,-83,88,-106,75,58,65,91,-67,-10,28,-21,-24,40,-37,94,-116,-14,27,70,78, 
  /* [3][0][][] */ 81,-71,83,14,-13,115,30,-3,3,-107,37,119,85,-8,-127,-21,116,-92,120,0,-118,-11,4,-21,99,-4,-103,87,-79,121,36,61, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0034808130003511906, 0.0031144923996180296, 0.0031652410980314016, 0.0031895739957690239, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 242, 674, -131, 609, -633, 248, 400, 412, -439, 586, 636, 343, 108, 200, 288, 18, 440, -200, 508, -161, -406, 1080, -417, -204, 365, -484, 785, 435, -378, -201, -660, 585, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.1805266189621761e-05, 3.6265522794565186e-05, 3.3094846003223211e-05, 3.4979399060830474e-05, 3.3871765481308103e-05, 3.3468812034698203e-05, 3.5628243495011702e-05, 3.730998287210241e-05, 3.4222997783217579e-05, 4.3260337406536564e-05, 3.5086384741589427e-05, 3.3198983146576211e-05, 3.6152789107291028e-05, 3.6786670534638688e-05, 3.9616534195374697e-05, 3.4107910323655233e-05, 3.4991280699614435e-05, 3.3746462577255443e-05, 3.2526259019505233e-05, 3.9395687053911388e-05, 3.233394818380475e-05, 3.5746263165492564e-05, 3.3565349440323189e-05, 3.3787844586186111e-05, 3.2859603379620239e-05, 3.3574968256289139e-05, 3.6613346310332417e-05, 3.9530474168714136e-05, 3.2498512155143544e-05, 3.0947434424888343e-05, 3.5120057873427868e-05, 3.526249565766193e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-50,114,10,109,-7,-91,-114,68,-100,-112,9,66,12,-32,53,-52,-26,-76,-59,-69,-105,-1,122,-125,14,90,-50,122,5,-19,-81,98,-60,-95,69,-112,-112,-101,38,92,-92,-121,114,65,-127,107,-40,22,-63,-36,94,-78,-38,-93,121,25,78,123,-122,-77,99,-51,53,-9,24,78,106,63,100,99,-116,114,-125,46,98,-110,20,-75,24,57,22,67,-2,-67,-38,-83,104,14,90,-11,-114,23,75,39,5, 
  /* [1][0][][] */ -48,44,-51,7,-27,78,44,27,99,-105,-80,116,71,-19,34,80,102,-43,34,120,-30,-4,46,26,32,18,-26,109,9,18,111,-54,56,109,-7,35,52,59,8,-67,-48,19,-4,-76,-26,53,-18,-39,-38,-81,127,71,25,90,-62,-44,37,101,54,98,-43,120,-54,-64,-40,43,86,50,111,39,26,22,-96,75,-30,56,87,-50,-23,83,-62,91,-41,-117,37,121,-64,-48,84,89,101,33,81,100,42,-6, 
  /* [2][0][][] */ 44,34,-71,84,-29,-70,89,103,-107,81,-47,96,85,-21,87,-108,-59,-29,31,60,-95,-10,116,15,-36,73,104,9,-69,88,70,94,-82,-27,-94,-121,-91,87,105,-28,-124,-80,-19,-4,-85,124,-39,-78,99,31,80,-100,-57,60,17,15,-86,98,-66,-1,-14,59,-31,66,83,45,58,93,-99,55,2,-81,30,-88,37,34,-56,-32,15,24,24,-105,-22,-34,-4,-100,-28,-21,89,127,-20,-5,-44,-87,-63,-86, 
  /* [3][0][][] */ 81,9,55,-13,-66,36,-98,60,66,3,86,0,101,104,83,27,96,82,-50,25,127,-77,-50,-126,-21,-110,-66,110,46,-81,104,10,-73,-25,-11,-11,-88,-18,62,39,-22,-70,-83,18,75,50,-37,-64,31,-81,57,9,112,29,100,-93,-112,-108,-109,-37,-79,42,-28,87,71,-27,-43,-19,-19,-57,13,110,32,-114,72,-36,37,71,112,-44,-73,-106,48,84,42,51,-43,-92,-70,60,15,-104,97,-81,-87,41, 
  /* [4][0][][] */ 43,93,-12,44,-36,-33,23,8,46,81,-17,45,18,-47,-22,-77,-35,-13,-77,6,96,-102,78,17,-25,-13,54,-69,-58,25,-74,-62,60,105,7,-113,-58,-13,-125,41,-59,-69,-80,-100,25,93,25,45,16,-51,-26,-85,-97,35,-99,11,25,-104,19,5,-3,-84,-49,-74,-56,46,-10,-47,17,-109,-109,-91,-65,28,90,42,51,-30,-17,-68,-4,-54,-106,-22,-10,59,83,-11,-127,-82,32,36,20,87,-103,-22, 
  /* [5][0][][] */ 104,-87,83,83,45,-108,31,59,111,-114,3,-59,29,101,44,40,71,70,-84,104,38,59,21,-23,-120,-64,-8,-89,53,39,20,-93,-35,9,-66,13,-110,-58,52,31,-80,-52,15,107,-23,23,29,-59,-103,100,24,27,42,29,46,-15,95,57,-54,-40,40,-58,45,-71,-30,111,-23,35,82,1,111,-64,-42,53,-24,-66,16,-43,14,82,106,42,-3,108,-81,90,2,41,59,-127,121,98,-13,27,78,-114, 
  /* [6][0][][] */ 24,-45,124,83,-71,-58,6,81,-5,-81,25,-63,92,56,121,-99,42,-1,-6,104,-62,-111,110,58,-82,-77,6,-57,-26,-94,65,-65,-87,-105,-40,-97,-5,36,-81,79,99,69,32,1,-96,114,-77,-38,-106,17,-7,-46,72,-40,108,-19,14,2,-76,127,-77,16,69,-55,-34,72,109,-38,88,10,-96,12,64,-82,-72,-28,-76,-107,-46,-22,45,-16,40,-30,-63,-79,-31,-76,81,93,100,27,-44,-56,93,-37, 
  /* [7][0][][] */ 113,71,-22,-33,-62,111,-17,16,127,-1,-79,31,60,-77,53,81,54,19,-7,112,63,34,1,82,-73,91,50,57,-74,110,-11,40,23,30,63,96,-90,73,7,-22,93,-71,89,77,56,11,101,-96,46,-59,-92,-53,-16,91,28,32,108,-74,-7,-41,19,7,81,-102,-55,-42,73,31,-90,32,68,86,88,3,67,63,-51,50,-80,52,92,-29,-17,-83,88,40,-101,102,74,14,90,68,-48,-25,5,-67, 
  /* [8][0][][] */ 4,26,-56,-96,54,24,-79,-31,2,38,35,86,-5,-51,-94,-82,-74,92,-68,10,22,-34,74,104,-121,89,36,69,-74,10,-98,110,90,-40,40,-10,110,2,-28,65,78,95,-123,-127,-19,-38,-34,101,21,-98,-72,-9,-71,-16,-38,-116,42,101,-93,93,103,35,39,103,-40,-53,-32,91,-94,42,27,-7,68,77,-1,16,-55,104,74,64,26,74,-116,-72,17,35,72,-50,30,-44,-94,94,-85,-110,-52,62, 
  /* [9][0][][] */ 2,32,95,48,75,-89,-28,-84,38,50,6,48,-20,-57,-82,-10,1,1,-63,-37,9,80,-57,-79,126,6,-16,30,1,-43,-55,79,58,2,29,-10,-29,45,3,-40,48,-34,55,-78,59,24,-78,72,42,-2,-52,-28,87,-62,-50,83,80,-46,41,-3,-76,81,83,-43,-52,5,85,38,-31,83,96,-51,8,107,-79,-58,-60,-69,-5,90,41,25,127,58,-33,-49,50,26,108,76,-19,89,93,-3,79,-1, 
  /* [10][0][][] */ -61,75,106,-57,-17,81,111,45,34,20,27,-79,95,86,-28,27,-56,60,-86,-51,-11,33,66,-85,33,54,-111,-112,-43,87,-84,-92,72,94,120,75,-37,13,-16,23,-41,127,-103,-31,-99,-45,-4,-43,-20,9,42,4,75,6,-58,-39,-99,-19,32,-42,4,68,103,56,121,-81,-77,-23,25,-13,-93,-58,84,62,-67,115,-24,43,81,38,90,5,65,107,-99,62,89,-4,47,26,8,-75,-48,-54,-45,-61, 
  /* [11][0][][] */ 123,19,-10,108,127,58,57,42,122,105,-79,126,5,-78,43,-64,-42,-88,70,51,49,90,27,-102,-112,-92,-3,78,91,7,27,-10,-82,-64,66,44,-55,68,-28,-46,-17,103,-93,16,-29,-58,-87,-95,88,107,105,44,-96,-73,30,38,-83,-46,-27,-100,-71,106,99,10,30,102,-50,40,100,56,-71,-62,54,110,-95,64,-59,49,-43,95,-113,-27,-83,-39,53,-64,27,-23,-107,-27,17,-92,-80,-31,-74,-50, 
  /* [12][0][][] */ 18,72,-54,-2,89,24,-31,24,-64,67,-13,30,-35,11,53,-77,-79,-18,-58,-72,33,-6,19,103,-66,-43,105,-87,93,21,-31,121,-71,-58,-36,13,9,-92,-20,52,120,34,-120,-29,-6,-83,-45,97,-30,-119,-73,96,35,17,-65,91,-24,-46,52,59,66,121,7,52,108,42,-46,117,61,95,48,76,88,99,-16,4,-24,48,-112,-102,-60,95,23,12,-33,42,63,104,-105,-127,83,52,101,-16,36,56, 
  /* [13][0][][] */ 100,-57,107,90,81,92,74,71,75,-117,12,-47,81,68,64,-25,-125,-81,-69,28,68,-26,107,-58,-73,28,3,18,-86,-76,76,26,21,94,-29,38,-83,-30,37,47,-66,79,-50,17,-44,41,1,-13,20,94,-27,-90,-88,20,90,-87,-42,17,-30,-65,-23,103,-71,17,-48,-63,-72,84,-32,-7,85,-8,-83,20,-58,-36,-104,54,85,-43,53,-86,86,18,-71,-98,69,127,-5,-36,-55,39,104,-39,50,-14, 
  /* [14][0][][] */ -40,-83,83,68,75,-25,-5,-93,-64,-21,63,85,-17,-62,-78,-73,-42,-38,13,26,-37,28,9,65,-85,-53,-26,26,-98,-103,-59,36,99,-11,-23,5,83,107,31,-84,-1,-89,44,81,61,-91,64,-75,127,44,66,44,95,-14,0,23,-42,16,60,83,-15,-62,-28,72,-78,-4,67,-89,-79,-71,-70,90,9,80,44,-57,47,-93,50,29,47,-15,-96,-25,-95,-75,-87,91,97,9,77,-30,82,89,-9,62, 
  /* [15][0][][] */ 17,-29,-27,80,94,-90,64,-98,52,-5,-63,9,102,4,-96,-110,84,4,-87,21,42,20,74,103,86,70,33,92,25,51,81,-102,0,5,-64,-2,-73,119,120,-73,25,127,-39,-30,20,-71,-39,-68,-14,-71,6,41,-88,-109,-53,-9,76,48,-41,119,-50,-73,-2,114,-27,94,-75,-1,-60,12,59,-70,12,-15,54,-107,-7,48,102,83,-72,69,-110,-47,-124,-41,-89,38,95,75,-111,-44,53,103,-93,118, 
  /* [16][0][][] */ -58,10,112,-52,50,120,-45,52,61,51,-92,88,-2,-41,-39,-48,115,86,66,72,121,85,-29,58,-38,58,-53,70,-92,27,52,23,-97,85,63,62,-24,47,-33,-58,36,-36,70,101,74,110,104,-8,-50,-106,17,119,-29,127,80,54,29,98,70,25,125,120,44,69,64,25,-25,101,55,107,-20,3,40,72,72,96,-1,101,-97,-6,23,-73,44,12,19,108,110,21,78,11,-4,120,77,-19,-67,18, 
  /* [17][0][][] */ 34,-116,31,82,-49,-120,-70,-105,34,-79,78,42,95,64,-119,46,28,48,114,113,-97,-11,8,-60,29,73,-85,25,112,-56,-37,72,-32,-28,31,29,-53,101,-96,-37,-101,-46,-13,-16,4,8,85,-114,81,119,-15,31,-26,69,98,-81,-111,82,-95,-120,28,-103,71,96,-91,-80,45,-108,-115,-1,101,23,10,-124,-73,63,113,-53,39,-55,12,-10,-73,-103,-121,67,74,-39,24,84,-93,-127,0,97,8,22, 
  /* [18][0][][] */ -89,111,127,-64,-6,-110,-103,25,9,77,-102,-40,-28,45,76,-48,29,-20,58,-15,120,-36,31,-81,32,-101,-5,121,35,50,4,52,50,-20,-104,-111,-25,34,-16,73,-37,2,-51,4,-107,29,29,3,17,-29,74,38,-104,3,19,99,-55,45,-14,-115,101,127,24,41,-70,-114,-20,103,82,-73,-60,123,-89,-54,-77,-96,65,57,13,-62,-50,-5,-19,-61,116,-27,81,87,-107,-62,-52,118,102,-46,52,-23, 
  /* [19][0][][] */ 19,23,67,36,50,-75,82,77,84,-38,26,-11,-82,33,-48,49,61,-91,127,47,-18,73,-47,10,68,-60,22,-60,-76,-104,-55,37,73,-71,30,0,8,-52,-47,-90,41,-96,-67,4,-79,25,71,-81,-21,37,-35,39,-27,10,5,-9,30,82,22,-25,43,-50,85,54,-62,-3,-25,-4,-8,45,69,-40,-54,-90,-50,-68,-23,-97,13,91,52,-99,-20,81,-75,-9,17,-7,82,24,-4,55,-25,97,63,-38, 
  /* [20][0][][] */ -17,70,68,95,-94,90,16,63,13,13,-91,7,-13,86,36,-80,-60,-44,-66,-40,20,-55,-84,-80,87,-77,-115,45,18,8,-42,113,103,41,-23,58,37,-26,-18,-120,-87,-37,-82,-113,-38,-67,-72,111,59,-127,-107,54,48,110,48,-9,108,71,103,94,111,-64,-76,-38,-31,-75,-58,10,-94,-86,-77,79,-73,-75,26,17,109,72,112,108,88,1,101,-8,57,116,-21,73,23,108,23,64,23,25,-2,8, 
  /* [21][0][][] */ 103,73,92,-65,99,-85,86,34,0,-48,-64,28,15,57,-36,-69,-100,-32,64,10,112,-23,83,-72,65,-59,-24,78,35,9,0,-23,19,27,-68,-89,109,122,-98,-35,-7,24,48,-9,-90,-63,-60,112,-27,-29,-3,83,49,59,-77,38,-35,56,-36,117,54,-76,20,5,85,31,-10,-56,-92,21,69,77,42,1,84,81,-105,-28,76,125,39,119,60,-43,37,-88,64,-60,-81,102,127,-109,-13,-46,58,-6, 
  /* [22][0][][] */ 27,-62,-81,-104,84,-63,105,57,-103,84,-82,-112,110,-121,-123,-94,33,80,-114,-70,82,-81,25,26,85,-10,-125,95,-68,-87,-74,-119,45,56,12,7,-3,-21,-66,-124,-4,-20,-6,90,50,-127,89,-31,-70,-86,-2,-23,-74,-100,-54,28,-17,-38,-28,-36,104,-85,-85,-124,-75,12,-123,-53,107,102,-31,-9,-75,57,60,-100,38,-59,58,88,101,-105,-85,-122,75,78,95,-38,-65,26,-74,55,16,16,-36,96, 
  /* [23][0][][] */ 55,-100,0,64,92,-124,1,-111,50,-83,83,75,8,-112,8,-51,81,-44,-95,94,83,-88,99,-42,-10,-14,71,12,65,36,65,-48,-39,34,12,31,95,19,-116,-4,-110,1,12,-123,-82,-102,109,23,71,-109,-93,-47,80,-71,-58,81,-67,-32,108,38,-126,-103,-62,-13,25,26,-127,-120,53,-13,110,-76,-15,0,-49,-97,35,-27,86,110,-55,-53,32,-47,87,-2,116,-33,-91,38,99,-16,104,-59,-31,104, 
  /* [24][0][][] */ -73,-47,-99,-69,-88,-115,-67,-85,74,124,93,53,127,70,-31,-113,-80,49,25,-48,110,-74,-51,-41,50,-30,87,64,115,67,9,-59,0,17,59,28,-49,-95,76,-16,-70,-100,95,15,33,-33,42,77,-95,-52,-24,13,80,72,84,-68,-21,88,32,3,104,5,44,104,-102,108,-39,-87,-98,57,-53,-19,-33,30,110,113,71,-85,-100,-76,-78,-94,-78,-116,8,72,-8,-95,29,-106,13,-77,-10,34,-98,26, 
  /* [25][0][][] */ -96,-67,-90,-20,84,-84,-115,46,37,-118,-49,14,64,-10,-121,-33,-84,52,31,-122,59,79,-21,-69,6,-61,-116,29,69,-102,30,107,87,-121,36,65,90,-70,-32,-28,-94,88,-116,-7,90,32,60,27,-114,86,-83,-6,34,-29,-73,2,-27,43,-116,67,111,34,43,37,-10,67,-27,-17,-102,-14,-34,-125,26,-120,64,12,63,66,6,12,40,41,-58,76,-86,-58,-114,-103,-32,-49,97,13,-127,-24,-28,-93, 
  /* [26][0][][] */ 61,-98,0,2,-78,-4,1,8,-74,-112,123,100,-60,-33,24,6,103,22,-66,-51,32,72,104,16,52,68,26,52,16,21,-64,6,-22,-43,-87,-81,-56,88,-23,96,-79,112,78,45,-61,89,-22,112,-32,36,21,114,30,-33,12,-93,108,65,50,49,14,-78,68,-5,127,-6,-34,68,-64,91,95,107,87,-96,-60,22,52,-106,-72,28,-7,87,94,-68,88,12,-39,30,-60,126,27,29,-45,126,70,87, 
  /* [27][0][][] */ 17,5,-51,-76,-95,-60,-54,2,35,98,33,-90,-14,59,81,-30,59,-11,71,-60,-66,24,-21,-15,-73,54,-86,-2,70,33,-27,-6,66,65,-62,-63,-73,-37,-91,84,-83,18,34,12,91,17,69,91,76,71,56,-65,-67,-77,2,-20,93,-13,-78,-75,-54,-49,-25,54,37,-35,-85,95,49,12,-90,24,60,-3,-1,-72,38,-44,88,94,85,-20,127,20,-64,-76,-21,14,-25,11,-24,-36,60,19,91,66, 
  /* [28][0][][] */ 87,-7,84,39,-125,-74,-108,-86,-41,-119,56,66,-91,-96,-2,98,91,110,-80,74,-31,18,-120,-79,-119,78,-96,-69,-83,-87,-9,-28,-107,10,77,69,16,-117,-51,25,103,38,-94,46,-117,-16,9,44,24,-72,-86,-36,-97,18,47,33,56,-21,78,49,-15,-54,-108,-3,53,70,-29,78,-90,26,-115,-48,66,43,-13,-112,-127,-61,-92,42,-86,-104,108,-22,57,-122,62,-88,-113,-72,-45,-78,-46,51,-104,-78, 
  /* [29][0][][] */ 62,51,58,-63,-101,6,-127,16,98,-15,-108,-123,116,-110,-47,-44,-106,114,35,-63,-79,-23,62,4,-45,8,-47,-31,-104,-1,101,-5,52,0,-77,-66,-11,107,-15,110,45,114,-72,93,4,114,-64,-25,20,-2,49,-118,71,-116,121,56,-121,67,-52,113,-123,106,-101,-58,-78,-70,69,103,106,-103,35,-83,122,80,73,30,127,-72,-24,52,-16,-97,-12,-81,70,126,43,99,-43,118,84,81,-102,18,-19,56, 
  /* [30][0][][] */ 17,-63,-70,22,-102,14,-69,-15,101,-26,-5,-53,-109,6,48,7,-15,31,80,-112,29,-106,-110,4,-107,14,-77,111,-18,-105,-95,-5,-94,-78,-127,-61,15,-28,-5,24,85,-78,-13,93,90,-52,90,54,-70,61,13,-101,88,-58,-21,88,-80,-62,-79,-60,-107,-14,-73,-31,-112,-91,-99,78,-69,94,33,-40,-95,94,35,-92,-65,-70,-73,-68,17,14,-102,-23,-109,19,-108,99,-38,-113,64,45,-44,-12,6,-80, 
  /* [31][0][][] */ 91,-81,52,108,56,57,-45,-74,-17,-24,-59,-89,108,-106,-33,127,-56,-89,40,61,76,48,-16,102,49,-106,48,47,-62,-55,63,112,16,31,-78,-2,100,-22,-44,-104,71,-46,-22,46,15,-35,-29,42,59,31,104,-16,-96,-49,-65,32,-106,76,15,127,-25,8,93,-57,79,118,-27,-63,84,-105,-106,23,-81,-55,22,19,-48,-57,66,107,-60,-30,65,81,68,103,-87,36,34,-34,-67,-49,23,113,-3,-20, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017004618421196938, 0.0019389286171644926, 0.0017694090493023396, 0.001870166277512908, 0.0018109468510374427, 0.0017894030315801501, 0.0019048565300181508, 0.001994770485907793, 0.0018297254573553801, 0.0023129049222916365, 0.0018758861115202308, 0.0017749767284840345, 0.0019329012138769031, 0.0019667916931211948, 0.0021180897019803524, 0.0018235723255202174, 0.0018708014395087957, 0.0018042474985122681, 0.0017390096327289939, 0.0021062821615487337, 0.001728727831505239, 0.0019111663568764925, 0.0017945643048733473, 0.001806459971703589, 0.0017568317707628012, 0.0017950786277651787, 0.0019575248006731272, 0.0021134885028004646, 0.0017375261522829533, 0.0016545980470255017, 0.0018776865908876061, 0.0018853018991649151, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1969, -148, 3659, 6169, 4944, -3337, 4357, -1426, -2595, -783, 4713, -2302, 6295, 6453, 3314, 2996, -976, -623, -1752, 5822, 2802, -555, 2878, -539, -1382, 3829, 2213, 2546, 5878, 3791, 4862, 2032, 1643, 9022, 6007, 3706, -596, 4561, 2960, -6878, -230, 1326, 120, 2639, -1901, 634, -1572, 752, -10963, 2259, 1411, -3549, 7785, -928, 2266, 1896, 1370, 5086, -933, -1991, 367, 2930, 485, 4361, 6515, 5460, 4704, 8776, 7212, -885, 3884, 5493, 4425, -2220, 7331, 8365, 857, -4349, 662, 1388, 9117, 2376, -314, -3347, 1359, 807, 1812, -2944, 6275, -462, 4435, 1451, 140, -3765, -126, 2162, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 9.7040865512099117e-05, 0.00018388708122074604, 0.00016444748325739056, 0.00011917384836124256, 0.00012801121920347214, 0.00011273206473561004, 0.00013206010044086725, 0.00015792644990142435, 0.0001496888289693743, 0.00017148180631920695, 0.00013356535055208951, 0.00017911040049511939, 8.9111992565449327e-05, 9.0575318608898669e-05, 9.6014977316372097e-05, 0.00014126150927040726, 0.00012608396355062723, 0.00012736328062601388, 0.00015715901099611074, 0.00010658848623279482, 0.00015855580568313599, 0.00014608433411922306, 0.00012564145436044782, 0.00016787956701591611, 0.00014811432629358023, 0.00015848927432671189, 0.00011842593812616542, 0.00014600928989239037, 0.00011994095257250592, 0.00011168960190843791, 0.00010797749564517289, 0.00010550944716669619, 0.00017396833573002368, 7.2697024734225124e-05, 0.00010471072164364159, 0.00013279414270073175, 0.0001650674530537799, 0.00010861787450267002, 0.00012259215873200446, 7.3337032517883927e-05, 0.00017365482926834375, 0.00015459753922186792, 0.00022877559240441769, 0.00010878551256610081, 0.00013630995817948133, 0.00014596812252420932, 0.00016356700507458299, 0.00016882893396541476, 6.5088926930911839e-05, 0.0001161155232694, 0.00018431588250678033, 0.0001309975195908919, 9.6112642495427281e-05, 0.00016141386004164815, 0.00015290617011487484, 0.00013143171963747591, 0.00016348381177522242, 8.2706144894473255e-05, 0.00014679107698611915, 0.00014876363275106996, 0.00016096544277388602, 9.4519564299844205e-05, 0.00021848722826689482, 0.00014574172382708639, 0.00010666189336916432, 8.7995656940620393e-05, 8.7242689915001392e-05, 8.330104174092412e-05, 9.3532464234158397e-05, 0.0001528834254713729, 0.0001229708141181618, 0.00012983607302885503, 0.00010738654236774892, 0.00010586983262328431, 9.1251749836374074e-05, 9.6698553534224629e-05, 0.00011935283691855147, 0.00013625621795654297, 0.00013805461640004069, 0.00015115816495381296, 9.1717949544545263e-05, 0.00012187588436063379, 0.00019586960843298584, 0.00012657865590881556, 0.00016716448590159416, 0.00016035769658628851, 0.00014790252316743135, 0.00013291722279973328, 0.0001062406154233031, 0.00014147040201351047, 0.00013608289009425789, 0.00016698450781404972, 0.00013141107046976686, 0.00010916183236986399, 0.00021923615713603795, 0.00012587860692292452, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -14,106,-89,32,57,-32,94,76,-58,3,34,-99,80,127,-65,17, 
  /* [1][0][][] */ -25,-7,-49,-32,-2,40,24,-127,25,-53,-19,-46,-11,-40,-61,4, 
  /* [2][0][][] */ -27,-20,27,69,18,37,-102,127,-25,-3,79,-55,-16,-73,-49,74, 
  /* [3][0][][] */ 97,-85,77,-4,-6,-36,-41,127,-25,57,63,40,-4,54,19,6, 
  /* [4][0][][] */ -40,-20,-1,32,-77,12,-20,-127,-6,-21,39,-8,39,48,95,113, 
  /* [5][0][][] */ 127,26,-30,-26,-81,21,28,78,21,-12,59,94,113,21,-93,15, 
  /* [6][0][][] */ 24,-32,-57,-42,-74,6,-6,-43,-45,-43,-34,18,85,53,127,-14, 
  /* [7][0][][] */ -59,39,-37,-89,4,-62,-71,22,-98,47,-61,-57,-127,-43,6,104, 
  /* [8][0][][] */ 44,49,69,5,56,23,72,19,64,-29,41,7,-127,-28,-82,13, 
  /* [9][0][][] */ -37,65,31,-47,-26,-15,32,-18,-40,41,-37,11,44,127,20,25, 
  /* [10][0][][] */ 78,45,-40,61,-33,-18,45,-50,-67,-27,-62,-107,-127,-68,19,87, 
  /* [11][0][][] */ 53,10,56,5,-12,-28,9,105,-80,18,-30,5,-14,-7,57,127, 
  /* [12][0][][] */ -64,-14,-1,-7,35,-4,127,63,-68,28,9,-11,-19,83,-52,109, 
  /* [13][0][][] */ 9,56,22,44,102,30,104,106,-32,103,-82,-65,35,74,-127,-21, 
  /* [14][0][][] */ -120,127,1,-26,1,-2,66,5,-26,24,120,-3,-101,13,-57,61, 
  /* [15][0][][] */ -16,-18,-127,-38,76,-40,-82,-29,-18,-12,-18,-64,-10,-80,-55,47, 
  /* [16][0][][] */ 110,-10,4,-13,29,-32,46,-12,-33,10,127,56,38,-4,-43,29, 
  /* [17][0][][] */ 7,24,-28,-111,-11,-72,121,-127,-5,-28,-44,37,38,74,4,53, 
  /* [18][0][][] */ 17,127,-13,-56,60,-76,-16,-48,-47,122,-17,2,-32,51,-20,-21, 
  /* [19][0][][] */ -78,-115,115,-104,49,-127,31,-19,52,35,92,112,25,-22,65,-25, 
  /* [20][0][][] */ -21,104,54,-3,9,0,25,-22,61,-14,104,-23,-127,-34,-84,-2, 
  /* [21][0][][] */ -71,41,21,15,68,38,74,49,-127,55,-41,19,-23,16,-67,-21, 
  /* [22][0][][] */ 14,-73,38,13,23,-127,105,13,20,-43,-40,-75,40,-93,-54,-52, 
  /* [23][0][][] */ -54,-86,40,52,24,-20,24,-40,16,-40,80,9,12,61,68,127, 
  /* [24][0][][] */ 2,-3,23,84,40,13,-55,-127,66,15,-43,12,5,-1,-19,-27, 
  /* [25][0][][] */ -10,31,16,-45,-32,-2,8,-32,-23,63,-49,-14,40,127,28,6, 
  /* [26][0][][] */ -58,77,9,15,26,-81,3,-38,12,17,16,77,16,2,-81,127, 
  /* [27][0][][] */ -21,-127,-60,7,-61,97,-4,-57,23,-41,60,-33,22,-62,-113,-17, 
  /* [28][0][][] */ -33,6,45,79,25,16,-36,-127,-116,47,104,-9,72,15,-45,-24, 
  /* [29][0][][] */ -127,109,-22,-37,-26,27,-119,-71,-44,-40,1,1,10,-62,-111,59, 
  /* [30][0][][] */ 58,86,-58,77,-103,-98,-74,-12,-41,-7,5,-120,127,27,-9,95, 
  /* [31][0][][] */ 127,23,-53,-50,-63,25,108,33,-60,-29,72,57,42,33,-30,7, 
  /* [32][0][][] */ -27,-23,127,10,-23,69,66,21,-16,-7,-16,14,4,71,69,33, 
  /* [33][0][][] */ -8,35,-91,-56,-25,29,127,42,2,-6,28,-73,108,118,-59,62, 
  /* [34][0][][] */ -91,-24,101,26,20,-54,104,-10,-127,43,34,-48,49,67,-46,-34, 
  /* [35][0][][] */ -1,25,-49,8,-76,127,-26,-23,-12,114,4,90,-62,71,16,43, 
  /* [36][0][][] */ -6,-79,127,-44,-52,13,-44,-12,18,25,-53,75,-1,-77,-32,41, 
  /* [37][0][][] */ 73,-3,53,-34,106,-83,-44,37,-53,127,-54,4,-77,-54,99,-10, 
  /* [38][0][][] */ 53,38,21,-100,1,-53,-105,43,-77,56,-106,-58,-74,-127,-104,53, 
  /* [39][0][][] */ -84,24,-56,-41,-79,-81,73,13,-127,-41,26,89,33,-3,-10,54, 
  /* [40][0][][] */ 127,39,13,-117,-69,16,29,-44,-46,-39,-35,-71,20,53,28,59, 
  /* [41][0][][] */ 96,-68,-62,-42,-9,-4,-61,-19,56,-14,4,-62,127,-68,57,-34, 
  /* [42][0][][] */ -26,-97,-56,127,5,-117,-110,33,-2,6,19,67,-77,75,-73,8, 
  /* [43][0][][] */ -93,-38,-45,-127,-51,3,2,76,34,-124,-30,40,-16,-47,-30,95, 
  /* [44][0][][] */ -28,41,48,-35,-35,-20,39,101,101,-74,74,97,127,56,-17,6, 
  /* [45][0][][] */ 24,88,-91,93,127,-96,-37,-59,109,-73,76,-67,-32,-2,-79,71, 
  /* [46][0][][] */ -23,-32,12,-12,107,-16,38,25,-13,127,-30,-124,36,73,-57,81, 
  /* [47][0][][] */ 82,-46,-25,-10,79,-11,-44,-63,0,127,-33,32,-12,-96,-77,8, 
  /* [48][0][][] */ 13,28,-20,-127,-11,-55,114,-125,1,3,-40,46,53,68,8,37, 
  /* [49][0][][] */ -40,127,-76,35,53,-55,71,54,-29,31,50,-83,-31,84,112,-106, 
  /* [50][0][][] */ 11,46,-24,2,-127,-1,-70,-55,55,71,30,29,-38,-45,3,34, 
  /* [51][0][][] */ 127,-31,-52,-17,-51,90,-90,-44,48,-22,-37,68,-30,-70,-4,46, 
  /* [52][0][][] */ -19,-45,38,75,-44,-112,-127,2,-43,-47,-38,-72,11,-63,14,81, 
  /* [53][0][][] */ 31,112,55,-127,5,117,92,-16,2,-28,-14,-43,75,-127,3,63, 
  /* [54][0][][] */ 23,127,3,-26,1,-92,-105,58,4,-27,-41,125,74,81,15,62, 
  /* [55][0][][] */ -34,-13,55,22,44,-32,109,80,-89,-15,23,14,127,46,-9,2, 
  /* [56][0][][] */ 127,31,13,12,-46,119,-43,-80,-19,46,-76,12,-59,100,-22,52, 
  /* [57][0][][] */ -54,-26,-58,-45,-69,-103,63,-14,-127,-40,66,60,12,28,-12,60, 
  /* [58][0][][] */ 49,-51,57,20,3,-62,-16,11,26,-20,-127,-26,25,-37,-36,47, 
  /* [59][0][][] */ 89,25,-127,103,-1,31,80,-29,-68,-45,20,-116,-118,-68,34,107, 
  /* [60][0][][] */ 1,34,-5,16,-24,-25,-21,-1,-39,-85,67,127,-42,-127,-39,0, 
  /* [61][0][][] */ -41,22,87,-112,-66,52,6,127,-7,-118,51,75,84,-14,6,124, 
  /* [62][0][][] */ 71,49,-11,-127,-19,1,9,-33,-7,29,-33,45,25,-26,-89,-67, 
  /* [63][0][][] */ 3,-23,5,-8,-60,-65,-53,1,-72,-19,-32,-22,127,5,51,-17, 
  /* [64][0][][] */ 25,16,-22,53,-114,-46,-18,-90,61,126,45,4,47,-69,-55,127, 
  /* [65][0][][] */ -27,18,-15,-20,-81,74,29,-27,51,-126,101,-65,78,61,-127,68, 
  /* [66][0][][] */ -124,99,-104,-89,37,-44,-122,-62,-101,115,98,3,-127,-68,50,73, 
  /* [67][0][][] */ 0,-32,-127,-124,70,78,13,-31,-27,-12,55,-17,30,37,13,58, 
  /* [68][0][][] */ 51,25,-12,-51,-61,34,20,36,-62,62,127,-11,-9,-48,-122,4, 
  /* [69][0][][] */ 76,-96,57,-47,9,-110,-27,127,-6,56,83,82,-14,71,-29,3, 
  /* [70][0][][] */ 69,9,123,38,100,-7,127,1,42,16,-67,41,-73,68,-76,41, 
  /* [71][0][][] */ 9,32,90,-73,-127,-81,15,16,-18,-12,22,-98,-77,-3,7,38, 
  /* [72][0][][] */ -63,-92,27,-127,69,-14,13,41,-75,9,-118,-14,62,121,-58,123, 
  /* [73][0][][] */ 25,21,54,-4,127,-93,-49,7,-36,94,-93,30,-86,-58,124,-17, 
  /* [74][0][][] */ -108,2,-120,-77,73,-49,-40,20,-96,1,-127,-40,-34,-57,-40,76, 
  /* [75][0][][] */ 91,-16,43,-53,19,6,-127,-22,-7,-106,78,8,5,-22,-13,-2, 
  /* [76][0][][] */ -2,-57,-46,122,53,92,95,-50,96,-127,61,111,17,-106,-71,38, 
  /* [77][0][][] */ -35,-26,122,-36,25,-29,-23,-127,10,8,47,94,53,48,9,12, 
  /* [78][0][][] */ -49,-2,17,-33,5,-64,29,-6,28,-10,13,-102,-112,-68,-127,-59, 
  /* [79][0][][] */ -98,-58,-22,19,127,23,-19,32,22,33,-12,45,-50,-65,-60,-17, 
  /* [80][0][][] */ 6,-112,57,127,-43,-31,-117,79,-14,32,66,-7,-87,3,-12,61, 
  /* [81][0][][] */ 125,63,-13,89,-10,33,26,127,27,12,115,59,116,28,62,-12, 
  /* [82][0][][] */ -62,2,7,-37,34,-127,-110,-75,10,81,-39,-28,-27,91,-79,-21, 
  /* [83][0][][] */ 94,-28,87,-32,-28,-10,-127,-15,24,-117,8,-49,-19,-4,17,-31, 
  /* [84][0][][] */ 7,-64,-100,16,127,36,42,41,-102,11,-97,-16,35,-45,-74,24, 
  /* [85][0][][] */ 7,106,34,-58,94,3,52,-110,127,-48,46,-12,100,-101,2,12, 
  /* [86][0][][] */ 112,-38,127,45,5,-54,78,37,-65,-57,-94,-42,39,20,-70,9, 
  /* [87][0][][] */ -3,5,18,-78,61,-23,-41,6,32,-44,75,-32,-76,-127,-5,26, 
  /* [88][0][][] */ -56,-26,28,-7,18,21,-61,-45,-3,5,-69,-127,-39,-47,-22,-9, 
  /* [89][0][][] */ -87,22,10,-79,31,-4,-127,35,84,29,-64,-1,-14,-86,-55,-17, 
  /* [90][0][][] */ -14,-13,-34,-89,127,19,-56,43,40,48,34,-9,37,13,-74,-12, 
  /* [91][0][][] */ -37,-52,17,36,-41,-15,-4,64,-34,-60,29,-34,-3,47,11,127, 
  /* [92][0][][] */ -20,89,1,-18,-22,62,-107,62,-39,-17,69,6,-38,127,54,33, 
  /* [93][0][][] */ -3,78,-56,-65,67,89,-82,11,72,67,66,48,-127,22,-42,83, 
  /* [94][0][][] */ 23,71,94,9,-127,-35,14,-6,23,-25,32,-13,-54,-27,11,-18, 
  /* [95][0][][] */ -14,29,35,-2,127,-29,-93,83,20,17,-71,104,8,14,106,-36, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0012829018523916602, 0.0024310280568897724, 0.002174032386392355, 0.0015755047788843513, 0.0016923367511481047, 0.0014903430128470063, 0.0017458639340475202, 0.0020878228824585676, 0.0019789196085184813, 0.0022670277394354343, 0.0017657637363299727, 0.0023678792640566826, 0.0011780803324654698, 0.0011974258814007044, 0.0012693393509835005, 0.0018675086321309209, 0.0016668580938130617, 0.0016837709117680788, 0.0020776770543307066, 0.0014091235352680087, 0.0020961430855095387, 0.0019312674412503839, 0.0016610079910606146, 0.0022194052580744028, 0.0019581043161451817, 0.0020952634513378143, 0.0015656172763556242, 0.0019302752334624529, 0.001585646066814661, 0.0014765614178031683, 0.0014274865388870239, 0.0013948583509773016, 0.0022999001666903496, 0.00096107082208618522, 0.0013842990156263113, 0.0017555681988596916, 0.0021822284907102585, 0.0014359524939209223, 0.0016206955770030618, 0.00096953188767656684, 0.002295755548402667, 0.0020438139326870441, 0.0030244642402976751, 0.0014381686924025416, 0.00180204794742167, 0.0019297311082482338, 0.0021623922511935234, 0.0022319559939205647, 0.00086049013771116734, 0.0015350730391219258, 0.0024366970174014568, 0.0017318163299933076, 0.001270630513317883, 0.0021339270751923323, 0.0020214535761624575, 0.0017375565366819501, 0.0021612923592329025, 0.0010933936573565006, 0.00194061070214957, 0.0019666883163154125, 0.0021279989741742611, 0.0012495697010308504, 0.0028884497005492449, 0.0019267379539087415, 0.001410093973390758, 0.0011633221292868257, 0.0011533678043633699, 0.0011012583272531629, 0.0012365200091153383, 0.0020211529918015003, 0.0016257015522569418, 0.001716461731120944, 0.0014196740230545402, 0.0013996227644383907, 0.0012063684407621622, 0.0012783764395862818, 0.0015778710367158055, 0.0018013374647125602, 0.0018251128494739532, 0.0019983446691185236, 0.0012125317007303238, 0.0016112263547256589, 0.0025894397404044867, 0.0016733979573473334, 0.0022099516354501247, 0.0021199644543230534, 0.0019553042948246002, 0.0017571952193975449, 0.0014045245479792356, 0.0018702702363952994, 0.0017990460619330406, 0.0022075723391026258, 0.0017372836591675878, 0.0014431437011808157, 0.0028983508236706257, 0.0016641432885080576, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 11191, 16774, -4348, 916, 711, 6866, 49, 4658, 18832, -6958, -8277, 8139, -13974, 11549, 2084, 10927, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.4284824475180358e-05, 7.1757182013243437e-05, 6.7605898948386312e-05, 5.9263049479341134e-05, 8.0667385191190988e-05, 6.3618019339628518e-05, 5.8953748521162197e-05, 6.1090417148079723e-05, 9.9495373433455825e-05, 8.3535429439507425e-05, 4.1641986172180623e-05, 5.0907041440950707e-05, 7.7901691838633269e-05, 5.6171287724282593e-05, 9.2007154307793826e-05, 5.0383328925818205e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -118,37,67,-21,-77,-17,-63,0,-57,-1,-15,-24,34,48,34,-43,12,-1,99,18,15,-55,127,64,53,24,4,37,-64,-114,-87,12,-43,-42,37,8,7,26,5,28,-7,3,-78,2,-75,-20,5,87,-21,6,-39,-11,-15,-8,23,-62,-116,-3,-16,79,53,30,-4,7,-29,-51,-49,28,-53,-71,14,-11,4,-1,-80,-53,-42,17,-38,16,-63,76,86,-73,15,48,13,61,30,-20,-14,-38,-40,-39,-54,17, 
  /* [1][0][][] */ 47,15,36,-44,-66,-29,-7,10,-31,18,47,-56,-8,-11,-55,-30,-16,1,-64,22,-14,-66,14,51,-16,-71,-20,-45,64,-106,108,-83,48,25,-16,46,41,65,-12,-42,32,10,-2,-5,18,64,-127,-49,-62,-57,-21,-22,44,-45,-43,42,5,-9,-40,10,20,47,-15,-104,-26,-15,-58,-19,4,-18,-78,-14,-38,-30,19,-76,11,13,35,-70,-23,-30,-87,-26,42,-51,-26,24,-84,-16,-59,54,27,57,-48,56, 
  /* [2][0][][] */ 72,-33,25,18,15,-72,58,2,-2,-13,-6,-17,-69,-25,8,-44,-88,-43,-40,45,16,-67,-49,23,10,-61,12,-25,-27,37,-54,127,-46,123,-28,29,-15,-10,-17,-9,-102,79,63,11,-72,9,-16,-20,34,10,-32,-51,43,-24,-21,57,38,0,47,-11,9,47,-25,16,73,19,-5,-5,36,55,-51,5,49,44,64,44,33,-69,68,58,79,-6,-34,19,-57,30,20,76,23,12,-21,23,-52,50,-22,32, 
  /* [3][0][][] */ -4,-3,-36,4,15,-6,4,-66,-11,67,46,68,38,-11,-67,43,12,-38,28,13,15,127,37,-50,10,31,-9,1,67,-42,66,-12,-14,34,-30,-22,18,56,37,13,-81,-28,-39,20,-40,33,21,0,-12,-44,3,-25,41,-89,-22,-41,19,89,-20,4,-4,-12,-38,10,41,44,-44,11,-26,9,5,-64,-35,-42,33,-8,10,4,-38,-33,-30,-3,-49,7,-24,-31,36,-29,9,27,35,-30,45,31,-47,59, 
  /* [4][0][][] */ 37,2,-33,11,28,28,-44,10,-36,72,78,-14,-2,0,11,-46,7,-14,-28,40,10,-36,54,82,-65,-2,-127,12,-48,-52,2,15,-66,-47,20,57,19,30,16,25,-33,-35,43,-18,4,2,-28,57,-39,47,15,14,47,-5,-78,22,50,-20,4,-9,42,-8,19,15,-50,16,-33,8,-58,28,-38,39,31,-65,-38,-50,25,-49,-10,6,-39,75,-71,5,-20,26,22,-57,41,-1,27,15,-54,-24,40,22, 
  /* [5][0][][] */ -91,37,57,-5,42,-25,56,-41,-18,27,-7,-36,40,-23,-30,-50,-8,-36,57,29,-120,-32,-78,43,-40,-3,48,20,46,-83,-14,46,63,127,-10,41,-5,26,53,-18,-31,97,80,-37,-2,72,47,-9,-4,19,-12,39,9,-43,28,-97,39,-60,-60,-73,69,106,-45,-14,85,-36,-83,-63,-55,-14,-73,-5,-13,8,-31,-47,28,-40,-31,-11,127,-16,34,-92,-84,33,31,-3,-51,41,25,-18,-25,34,11,97, 
  /* [6][0][][] */ 48,-5,-100,35,-40,-118,100,84,-59,82,-5,69,-127,-79,46,61,10,-66,-15,-3,-8,-32,-75,-66,-63,58,93,22,38,22,106,-54,40,16,6,-71,21,2,30,91,-9,28,-70,-23,5,-65,-89,11,36,-117,-27,75,34,4,-24,-77,85,55,21,-14,-101,63,-85,-4,29,1,-5,69,40,40,-17,-56,-49,29,107,50,59,-30,52,-75,-3,-57,-71,59,-8,-73,62,9,-30,78,51,32,-35,16,-44,126, 
  /* [7][0][][] */ 35,83,-37,-58,-20,-14,42,10,-65,28,-51,-62,-47,11,22,-8,-54,-45,-35,64,-8,127,3,34,-7,2,12,31,49,44,84,-25,71,31,-23,7,-2,-5,4,27,-58,-14,9,-51,16,-53,77,-26,40,-74,-98,-32,-46,13,-4,-14,20,19,-104,15,-11,110,16,-25,-35,3,-40,7,-30,-27,-98,38,22,70,-29,41,-50,53,13,-74,-19,-51,53,-78,41,-26,1,0,-18,69,-92,50,59,-37,-45,14, 
  /* [8][0][][] */ -6,78,-56,41,-35,-22,-78,30,-90,-31,0,15,-31,40,27,90,2,-52,0,7,30,8,9,-12,-41,69,-3,21,-14,-14,-46,-32,-28,-59,-28,-67,-39,27,41,1,0,-34,30,7,-36,-37,1,-10,-22,-23,48,67,4,-24,-72,97,-33,30,-11,-35,-46,5,10,59,-31,-66,-42,-11,-53,11,9,1,-34,-48,-117,-22,-52,32,-71,-43,-34,-5,-41,-35,-1,5,16,21,7,58,-57,-4,-82,-127,25,-53, 
  /* [9][0][][] */ -21,20,-73,42,-31,-35,68,57,-1,48,-18,97,-17,-17,17,127,15,14,73,17,21,11,35,-92,-27,2,32,-9,10,-15,38,54,-25,3,7,-112,24,-20,-17,-14,-17,26,42,-25,-17,5,19,16,40,88,35,-7,-59,-78,2,2,3,-9,74,-19,-63,61,-58,-21,92,-12,-23,16,-72,23,33,38,-12,86,-26,-25,-27,28,-42,-8,49,-29,64,-2,29,-8,-17,-32,-45,24,2,-9,62,36,-43,2, 
  /* [10][0][][] */ 72,-7,-33,0,-37,-35,84,7,3,-38,-30,-9,-107,-18,15,-6,-83,-30,29,23,42,43,21,6,-43,74,29,0,-49,-68,-30,-11,69,-30,54,4,71,-89,87,119,27,-67,8,13,-18,-91,-2,65,29,79,-71,-40,-16,31,8,46,8,-71,68,56,-20,43,-76,-23,-19,-48,23,41,28,-38,-4,49,127,28,26,-95,36,-51,55,-6,-49,33,27,28,-28,-18,0,53,-55,-22,18,62,54,66,-23,8, 
  /* [11][0][][] */ -69,-35,55,-67,14,-10,-27,-41,49,-47,3,-16,-21,-6,5,-4,-68,3,64,21,-49,4,-79,-85,25,24,-37,48,39,-61,40,-23,24,3,13,-25,-81,16,-116,22,-73,68,-45,48,14,11,0,-43,22,-38,-52,-50,10,15,72,-59,-25,-72,17,-54,-21,-47,-16,-118,16,-57,63,70,127,19,70,-11,-31,-22,67,-31,101,37,26,51,27,1,-19,82,77,2,-1,-6,-73,-65,-20,12,37,44,58,69, 
  /* [12][0][][] */ 44,-22,10,-33,33,110,-13,38,39,55,0,55,15,44,23,-3,-69,56,19,49,127,-5,74,-69,35,18,-76,-66,-18,78,0,4,28,-6,6,-36,43,-5,-37,-40,23,-25,39,57,-24,38,4,-16,-69,27,-5,27,-23,-25,10,16,-42,62,4,52,24,-93,10,-104,-11,98,-10,-43,2,-44,60,10,2,7,-7,48,-7,44,-75,-10,-15,36,121,15,-17,67,-29,-63,65,3,-82,58,70,5,-21,-92, 
  /* [13][0][][] */ -15,39,-6,-49,-33,-12,-2,-29,27,-28,-36,-92,59,-125,-44,-75,-24,-31,-81,-14,-92,-41,10,114,-25,5,124,9,22,-45,61,45,13,3,-125,127,-33,-60,30,-61,116,11,-3,31,-9,-91,61,-34,87,-16,-43,30,20,-3,0,73,73,-51,-35,-14,60,48,-1,-95,5,37,-32,43,-57,-40,-82,10,-51,17,-43,-89,-102,20,40,84,-10,66,40,-95,53,40,35,-12,-14,-14,-17,14,-64,22,-27,-4, 
  /* [14][0][][] */ -15,30,-82,-29,79,87,-86,-12,41,-35,82,-8,25,-25,-47,-67,-58,19,30,127,12,-30,-3,4,3,45,-18,61,10,-12,-20,12,67,-2,-40,11,-22,57,69,15,50,5,24,-6,-18,-43,46,-36,27,-2,-5,-24,31,7,-25,34,17,56,-76,-14,-9,-60,-33,-90,23,-45,-48,7,-68,62,-22,34,1,-22,-23,-27,33,-8,-47,-31,25,13,7,-19,-24,49,-7,-18,-23,69,69,6,-3,-33,-54,-62, 
  /* [15][0][][] */ -69,-49,57,-58,20,-30,-30,-84,-20,5,-11,68,-19,-21,49,96,-123,-22,23,-76,28,-24,-13,-83,52,-20,40,-48,-64,-100,-67,35,-47,61,86,-109,-10,-39,29,-35,-15,-12,36,-10,9,7,72,104,-56,-14,13,-43,-40,61,2,-66,-111,-24,99,21,-33,15,-101,21,-87,3,10,12,61,-88,97,-23,70,-44,-36,-52,18,20,52,8,-15,75,47,37,17,-23,-127,17,-18,-63,-96,43,44,-40,-12,68, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.002732104854658246, 0.0030496802646666765, 0.0028732505161315203, 0.0025186794809997082, 0.0034283637069165707, 0.0027037658728659153, 0.002505534328520298, 0.0025963427033275366, 0.004228553269058466, 0.0035502556711435318, 0.0017697843722999096, 0.0021635491866618395, 0.0033108217176049948, 0.0023872796446084976, 0.0039103040471673012, 0.0021412915084511042, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { -609, 915, -5065, -6215, -504, 5130, -2394, 1816, -1027, -1721, 10441, -1817, -204, 11171, 9634, -5846, 18222, 2532, -6257, -37, -1686, -428, 1629, -2195, 669, -4332, -1198, -4956, 1955, -8199, 2740, -655, 13532, 909, -3878, 119, -1995, -2072, -442, 7508, -724, -1898, -1184, -4350, 12700, 14768, 1786, 13319, 1883, 14191, 16234, -2602, -798, -1769, -842, 9595, -401, 2276, 11885, 8588, 7750, 12435, 9941, -7531, 1092, 2372, -3676, 2778, -3694, -2010, 1853, 4604, 12813, -267, -667, 13803, -1052, 754, 8664, 299, -7, 15647, -423, 1854, 17637, 5642, -4770, -3944, -1858, -6410, 17037, 229, -2090, -254, -4695, -4246, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025909932446666062, 0.0001711765507934615, 0.00010796414426295087, 0.00013294856762513518, 0.00021328068396542221, 0.00025439448654651642, 0.00027803709963336587, 0.00018478468700777739, 0.00017680288874544203, 0.00013571430463343859, 8.8069551566150039e-05, 0.00038845455856062472, 0.00019113400776404887, 0.00010801199096022174, 0.00016471247363369912, 0.00011747761163860559, 8.3485276263672858e-05, 0.00018667950644157827, 0.00012926344061270356, 0.00010034951992565766, 0.00013505133392754942, 0.00024040526477620006, 0.00021803792333230376, 0.00016391705139540136, 0.0005775428144261241, 0.00017948538879863918, 0.00021969138470012695, 0.00010283865412930027, 0.00014489746536128223, 7.8052755270618945e-05, 0.00025239749811589718, 0.0002849843876902014, 0.00014411052688956261, 0.00018769217422232032, 0.00021570210810750723, 0.00050206884043291211, 0.00017085409490391612, 0.00026767008239403367, 0.00027353383484296501, 0.00010482365178177133, 0.00016578516806475818, 0.00022808003996033221, 0.00014808683772571385, 0.0001571381144458428, 0.00010822162585100159, 9.9081284133717418e-05, 0.00022716961393598467, 0.00010522174852667376, 0.00014105996524449438, 6.6981912823393941e-05, 8.7843065557535738e-05, 0.00013873388525098562, 0.00017144746379926801, 0.00015112078108359128, 0.00019177621288690716, 0.00017294393910560757, 0.000187111203558743, 0.00016084432718344033, 0.000135855792905204, 9.9907214462291449e-05, 0.00014829411520622671, 0.00015846923633944243, 0.00010781396849779412, 0.00011443466792115942, 0.00012829899787902832, 0.00023466172569897026, 0.00017769250553101301, 0.00016423157649114728, 0.00019863096531480551, 0.0001903942902572453, 0.0001779030280886218, 0.00013892182323615998, 0.00011231238750042394, 0.00022505280503537506, 0.00022738489496987313, 9.4793227617628872e-05, 0.00014202961756382138, 0.00020086394215468317, 0.00014162602019496262, 0.00022219601669348776, 0.00019078308832831681, 0.00010963784734485671, 0.00018106136121787131, 0.00015123578486964107, 9.7643154731485993e-05, 0.00014572948566637933, 0.00011458456719992682, 0.00017104271682910621, 0.00019417097792029381, 0.00019067651010118425, 7.3054565291386098e-05, 0.00028197889332659543, 0.00016282153956126422, 0.00027180140023119748, 0.00013012117415200919, 0.00027671776479110122, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 33,121,8,20,-38,-8,40,32,61,-79,-95,36,-22,2,-1,-57,-96,14,16,34,47,64,66,80,13,-2,-44,-9,-25,-1,12,-15,-59,1,-21,98,3,47,2,4,26,-43,2,34,-126,-47,13,-15,-30,-97,-42,-11,11,59,-24,-17,-87,-81,-46,-127,-127,14,-111,6,-35,35,46,-20,-16,48,44,-7,-26,4,35,-4,-11,-32,-80,26,0,-70,58,-19,-94,-65,-9,24,-111,26,-82,45,80,-4,65,7, -37,-30,6,92,-15,86,-18,-14,61,20,-127,58,-38,-50,-79,127,-119,65,49,76,127,14,84,127,29,-6,16,57,-4,127,-19,-127,53,81,15,38,86,93,-29,-127,127,-9,112,127,-59,-94,127,-69,-18,-111,-110,-34,13,127,-21,-127,16,19,-109,-99,-31,-127,-58,93,-31,76,127,-31,9,127,127,-13,-72,17,-41,-86,23,-61,-25,127,-14,-72,127,-66,-127,-57,104,73,107,109,-98,3,127,-28,127,35, 29,-106,22,13,-23,-23,-1,41,34,69,-72,4,-18,48,-17,-76,-37,15,9,24,44,53,47,87,12,-50,21,33,-1,6,-21,-42,-58,-81,-21,65,15,1,12,12,-13,37,-9,63,-66,-31,5,5,13,-50,-6,5,-4,8,14,-3,48,-97,-26,-90,-91,30,-79,0,36,10,-38,-6,-20,16,10,-1,-24,-46,-11,-1,5,-8,-90,13,-8,-83,36,1,-13,-56,3,-14,-85,11,-31,41,30,33,12,-2, 
  /* [0][1][][] */ 96,-4,67,127,14,-56,127,33,-18,-127,-80,127,1,-127,-82,35,-77,-49,78,39,-100,-2,-127,-67,-19,64,-127,127,-95,81,127,87,21,57,21,123,-127,75,-22,-43,62,-125,34,46,-127,-76,1,-125,-127,-117,-127,5,127,-42,92,-16,-127,-8,-50,-8,-69,-56,-45,46,-101,-20,89,-103,-37,27,-37,-127,-127,59,127,-89,94,77,-94,-45,127,-127,-37,99,-46,-27,2,94,-1,39,-67,24,1,-78,87,-10, -127,15,-86,116,-71,-127,-105,-127,69,13,-35,39,-89,-105,-47,122,-127,-127,127,127,32,-127,-125,96,-127,127,14,82,-86,-43,-124,71,-127,76,127,-37,31,127,127,-86,-41,36,38,25,-38,-127,-82,-127,-5,-127,-103,127,41,75,64,-69,30,10,94,-50,-33,-54,-127,127,3,-127,102,127,25,46,-106,-84,-32,57,-104,-127,127,127,85,-59,-77,-17,-108,68,-113,-109,127,127,127,127,-127,-127,-95,-51,71,127, 61,-23,113,74,14,-33,16,25,-37,121,-67,73,6,-22,-127,73,12,-35,25,4,-108,10,-83,-72,-8,-18,117,-20,127,124,7,-104,-31,-127,-5,127,-126,18,-39,-38,-14,127,36,90,-41,-16,-6,-72,112,-85,-84,-10,47,-67,-127,30,99,-12,-127,60,-24,-56,5,42,127,-42,-19,-12,-48,-3,-29,-54,-127,-127,-7,-51,2,-29,-127,-36,-78,-111,-25,127,-117,1,-2,1,-36,-14,-5,48,-12,127,27,-7, 
  /* [0][2][][] */ 35,-127,48,2,8,9,30,41,-38,-49,3,-33,17,-16,-31,42,-33,20,2,33,1,55,26,-29,14,124,0,-3,-36,11,-2,24,-22,-23,-14,-9,60,-13,-4,-21,5,18,-2,-51,-12,-40,-15,2,-30,10,-48,11,-21,8,-32,-7,-17,-10,20,43,-43,7,29,-21,-40,47,-44,-21,35,5,21,64,-29,10,23,0,-31,-33,-2,1,10,-29,-14,-41,-79,21,-35,-11,-88,58,-5,20,-3,10,17,-7, -52,1,127,1,127,63,-23,0,-127,5,-68,-41,127,-43,-71,29,2,53,4,-48,23,25,72,-8,68,-78,0,48,-20,115,-25,10,-70,16,22,-39,87,39,22,-105,-19,-3,-127,7,11,-11,-49,-53,-11,-67,-54,68,108,-50,-31,-65,-23,127,-12,6,75,-115,85,48,-23,23,-35,9,127,-17,10,75,-85,16,-18,-60,-4,-98,-29,-47,-10,-77,-30,-66,-59,127,31,3,98,35,34,19,-25,-7,2,8, 20,69,56,-20,3,-15,-4,32,10,54,30,2,11,-7,-30,41,-41,4,-3,18,-11,42,12,-37,7,103,18,33,-1,27,-35,-74,-45,-30,-6,-23,46,-45,-4,-8,-6,1,22,-9,-59,-19,-16,5,8,33,-35,-5,-15,-9,13,13,4,0,10,77,-33,13,20,-30,39,13,-60,18,20,-6,12,55,-7,-20,-3,-3,-15,-19,-6,2,-13,-70,-7,-5,-45,18,-36,-28,-75,38,15,23,-12,15,-15,-9, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.013225197792053223, 0.0087373582646250725, 0.0055108098313212395, 0.0067860889248549938, 0.010886478237807751, 0.012985048815608025, 0.014191837981343269, 0.0094319581985473633, 0.0090245436877012253, 0.0069272606633603573, 0.0044953310862183571, 0.019827872514724731, 0.0097560463473200798, 0.0055132522247731686, 0.0084074130281805992, 0.0059964056126773357, 0.0042613358236849308, 0.0095286751165986061, 0.0065979892387986183, 0.0051221367903053761, 0.0068934201262891293, 0.012270997278392315, 0.011129301972687244, 0.0083668120205402374, 0.029479498043656349, 0.0091614658012986183, 0.011213699355721474, 0.0052491896785795689, 0.0073959962464869022, 0.0039840438403189182, 0.012883116491138935, 0.014546448364853859, 0.0073558283038437366, 0.0095803644508123398, 0.011010074988007545, 0.025627080351114273, 0.0087208990007638931, 0.013662674464285374, 0.013961977325379848, 0.0053505096584558487, 0.0084621664136648178, 0.011641881428658962, 0.0075587914325296879, 0.0080207949504256248, 0.0055239526554942131, 0.0050574024207890034, 0.011595410294830799, 0.0053708297200500965, 0.0072001186199486256, 0.0034189554862678051, 0.0044837705790996552, 0.007081388495862484, 0.0087511865422129631, 0.007713652215898037, 0.0097888261079788208, 0.0088275708258152008, 0.0095507102087140083, 0.0082099707797169685, 0.006934482604265213, 0.0050995601341128349, 0.0075693712569773197, 0.0080887395888566971, 0.0055031445808708668, 0.0058410847559571266, 0.006548760924488306, 0.011977829970419407, 0.0090699521824717522, 0.008382866159081459, 0.010138712823390961, 0.0097182886675000191, 0.0090806977823376656, 0.0070909815840423107, 0.0057327570393681526, 0.01148736197501421, 0.011606398969888687, 0.0048385271802544594, 0.0072496128268539906, 0.010252690874040127, 0.0072290115058422089, 0.011341542936861515, 0.0097381342202425003, 0.0055962405167520046, 0.0092419087886810303, 0.0077195223420858383, 0.0049839960411190987, 0.0074384650215506554, 0.0058487360365688801, 0.0087305270135402679, 0.0099110621958971024, 0.0097326943650841713, 0.0037289215251803398, 0.014393038116395473, 0.0083108935505151749, 0.013873548246920109, 0.0066417702473700047, 0.014124494977295399, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 6293, 5034, 2183, -1355, 6309, 10187, 11275, 1324, -244, 9688, 1179, -4880, 3731, 2880, 773, -397, 3290, 6595, -1053, 97, 5775, 8829, 11544, -1590, -3448, -1523, 15521, -262, 2257, 873, 12390, -1737, 9265, 2319, 5323, -5357, 1359, -4040, 166, 2082, 3508, 1199, 1361, -542, 1352, 1800, 4075, 4267, 5384, 3570, 5603, 2411, -3136, 1577, 1274, 2088, 2596, 3836, 9212, 1360, -1194, 5443, 4711, 3720, 6559, 7521, -4979, 2710, 5353, -876, 7331, 2572, 3327, 3607, 3668, 2770, -813, 2238, 2725, 2742, 2623, 3668, 9880, 826, 2841, 5768, 845, -887, 12082, -621, 1191, -1309, 13849, 2812, 47, -1030, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011833404278149828, 7.2941438702400774e-05, 9.272894385503605e-05, 0.00014966895105317235, 0.00011221504246350378, 7.7558644989039749e-05, 7.5097676017321646e-05, 0.00020245878840796649, 0.0001483086816733703, 7.9794590419624001e-05, 0.00017036896315403283, 9.6782881882973015e-05, 0.00013781835150439292, 0.0001536806084914133, 0.00012754206545650959, 0.00015608685498591512, 0.00018147456285078079, 0.00011405262193875387, 9.2883848992642015e-05, 0.00014077551895752549, 0.00010296937398379669, 9.7361946245655417e-05, 7.8939097875263542e-05, 0.00016181223327293992, 0.00016179122030735016, 0.00010142325481865555, 5.8619862102204934e-05, 0.00013218782260082662, 0.0001247449399670586, 0.00018239085329696536, 7.0663103542756289e-05, 0.00015493504179175943, 8.7840089690871537e-05, 0.00019936215539928526, 0.00012445001630112529, 0.00011795399041147903, 0.00011756141611840576, 0.00014510056644212455, 0.00016934855375438929, 0.00014414178440347314, 0.00012666796101257205, 0.00019051389244850725, 0.00023383699590340257, 0.00017866201233118773, 0.00019607269496191293, 0.00021726518752984703, 0.00013896347081754357, 0.00013332476373761892, 0.00011581841681618243, 0.00013857062731403857, 0.00012944833724759519, 0.00016032757412176579, 0.00012070797674823552, 0.00020165048772469163, 0.0001605943834874779, 0.00018931421800516546, 0.00014541887503582984, 0.0001088825665647164, 8.5303538071457297e-05, 0.00013311332440935075, 0.00018481946608517319, 0.00013036193558946252, 0.00011835724581032991, 0.00016195981879718602, 9.1218025772832334e-05, 9.882054291665554e-05, 0.00011695954162860289, 0.00015079091826919466, 0.0001142101245932281, 0.00016890150436665863, 9.726987627800554e-05, 8.7141663243528455e-05, 0.00011514416110003367, 0.0001188284732052125, 0.00014968347386457026, 0.00010794722038554028, 0.00012628994591068476, 0.00015454947424586862, 0.00012838620750699192, 0.00018836309027392417, 0.00017812261648941785, 0.00011170039942953736, 7.9437835665885359e-05, 0.00012495687406044453, 0.00012065032933605835, 0.00012191868881927803, 0.0001592000771779567, 0.00026803553919307888, 7.6529962825588882e-05, 0.00014992189244367182, 0.00016025270451791584, 0.00015691912267357111, 6.465119804488495e-05, 0.00013808619405608624, 0.00023071416944731027, 0.00013364513870328665, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -65,53,-36,-17,-37,-49,-51,-30,71,-34,44,-61,73,-127,15,-122, 
  /* [1][0][][] */ -94,73,-99,-113,-83,29,-19,66,-49,1,101,-41,40,127,27,38, 
  /* [2][0][][] */ -46,-6,-91,-4,-9,-55,39,-51,-101,118,65,10,54,55,-61,127, 
  /* [3][0][][] */ -52,-81,7,-41,-82,3,-65,-124,-6,22,40,-87,-78,-46,-127,-54, 
  /* [4][0][][] */ 78,5,-8,47,-74,-6,-127,32,19,81,13,52,-1,4,-36,-92, 
  /* [5][0][][] */ -107,72,-101,-43,59,-55,-17,-75,98,-24,19,-35,14,-121,-127,-96, 
  /* [6][0][][] */ -15,-44,-38,33,-94,82,40,-40,-20,-51,127,-24,3,9,-120,1, 
  /* [7][0][][] */ -29,94,127,-82,59,73,-12,-58,50,58,-78,-19,49,-9,14,74, 
  /* [8][0][][] */ -48,8,24,-11,61,16,97,127,-69,-20,-53,-84,40,81,-78,-52, 
  /* [9][0][][] */ 30,45,96,25,-117,-36,-96,-118,75,17,127,24,-44,-106,46,-16, 
  /* [10][0][][] */ -10,-107,10,-73,-127,69,34,22,-35,-59,-17,37,-16,51,-114,23, 
  /* [11][0][][] */ 127,-48,-21,94,-120,-34,53,-16,113,119,-52,21,26,-88,-22,102, 
  /* [12][0][][] */ -58,-49,127,-21,55,-20,26,46,69,-21,99,66,-29,20,-97,34, 
  /* [13][0][][] */ -8,-45,30,24,10,5,127,30,-99,14,0,6,-15,109,96,-79, 
  /* [14][0][][] */ 123,-92,127,19,54,49,78,56,72,78,46,44,56,-27,48,-65, 
  /* [15][0][][] */ 3,127,-5,-43,40,119,-74,72,-38,-35,-45,-20,-63,97,-29,-40, 
  /* [16][0][][] */ -38,53,109,-38,21,71,8,-9,-13,8,-23,36,93,8,85,127, 
  /* [17][0][][] */ 2,98,62,-127,29,-41,5,-63,-55,77,-19,58,-64,-15,100,-45, 
  /* [18][0][][] */ -82,-5,-69,-86,127,96,-40,-84,51,94,124,78,-5,127,-42,4, 
  /* [19][0][][] */ 58,127,98,77,48,-34,-14,-4,-41,121,51,123,79,81,-61,32, 
  /* [20][0][][] */ 115,8,-3,87,-85,0,-21,59,-34,-62,-127,-41,83,-51,43,-1, 
  /* [21][0][][] */ -88,-87,-26,111,-30,-7,-127,67,17,-6,40,22,-34,24,-72,12, 
  /* [22][0][][] */ -5,-2,-71,-46,127,-10,-40,64,56,82,44,66,-31,21,3,40, 
  /* [23][0][][] */ -68,13,-21,10,8,55,95,85,-12,127,-20,-27,0,24,-47,-30, 
  /* [24][0][][] */ 28,-81,40,4,127,31,71,-36,49,25,42,33,-67,31,-3,-19, 
  /* [25][0][][] */ 118,-45,82,8,9,-17,-32,95,106,-13,-46,14,127,-39,96,44, 
  /* [26][0][][] */ 50,39,112,91,90,-16,-62,-13,9,82,20,127,31,-90,20,-61, 
  /* [27][0][][] */ -52,22,-59,35,-35,110,12,-85,26,-70,127,27,54,-26,126,100, 
  /* [28][0][][] */ -38,35,-79,-127,23,-75,-2,-54,-97,73,-46,32,-29,24,-24,74, 
  /* [29][0][][] */ 88,83,-65,48,25,77,-54,-17,46,53,3,62,-127,15,-14,58, 
  /* [30][0][][] */ -29,79,-113,-59,69,-44,18,14,-61,50,-74,-15,11,61,-1,127, 
  /* [31][0][][] */ 26,-112,91,45,52,-75,-84,35,-26,-7,26,-32,-71,54,44,127, 
  /* [32][0][][] */ -69,67,-11,31,-98,61,18,68,25,-127,37,-89,28,31,25,56, 
  /* [33][0][][] */ -63,-7,64,97,-8,21,-60,8,-41,-55,8,-23,-18,-12,11,127, 
  /* [34][0][][] */ -8,16,-81,-99,61,-13,-13,70,26,-15,0,-15,-62,-29,-32,127, 
  /* [35][0][][] */ 69,-15,26,-6,1,19,-85,-15,-10,-127,-52,15,-7,-27,48,-28, 
  /* [36][0][][] */ -1,18,-127,-17,42,106,-4,35,-40,4,53,31,17,27,-70,56, 
  /* [37][0][][] */ 52,34,69,-49,56,-127,32,-16,-114,62,-91,-26,8,30,104,26, 
  /* [38][0][][] */ -34,127,24,-43,32,24,67,-94,13,-1,-103,36,-49,-91,-93,16, 
  /* [39][0][][] */ 94,41,-127,-115,-18,-28,7,-70,12,-10,-2,-39,60,-2,-123,-79, 
  /* [40][0][][] */ -45,21,-82,-87,-51,-16,20,-127,-4,0,12,-33,40,78,37,58, 
  /* [41][0][][] */ -39,-101,2,127,5,-20,-69,-18,1,-49,58,-61,-62,-4,4,14, 
  /* [42][0][][] */ -24,61,-29,-127,17,16,14,-28,58,1,-37,18,63,-18,-20,19, 
  /* [43][0][][] */ 14,41,20,32,127,23,12,15,2,41,-14,-88,-112,-35,-10,-24, 
  /* [44][0][][] */ 94,-25,44,55,-18,-13,-8,37,34,-32,18,0,127,4,-43,-39, 
  /* [45][0][][] */ 15,-76,-58,38,-40,-84,11,46,24,-23,14,32,-72,127,36,-27, 
  /* [46][0][][] */ -10,-76,48,77,0,4,-105,48,24,-53,42,-25,35,78,78,127, 
  /* [47][0][][] */ -34,-63,28,82,5,-4,46,16,7,-52,-127,-31,47,-16,-50,5, 
  /* [48][0][][] */ -76,108,-17,-44,7,59,-11,-127,15,-42,57,-45,49,-125,-71,12, 
  /* [49][0][][] */ -58,8,45,-42,7,2,119,127,-31,-31,-10,24,-50,38,-54,30, 
  /* [50][0][][] */ 53,29,-86,26,38,-123,-38,-17,-82,54,-55,1,21,-86,-127,-50, 
  /* [51][0][][] */ -54,56,-42,127,-33,58,-56,-70,-44,-75,1,-63,-7,38,-8,118, 
  /* [52][0][][] */ -127,-4,31,8,24,42,58,6,21,-88,-53,-54,-118,-69,-122,-18, 
  /* [53][0][][] */ -48,-84,-52,-127,-37,-4,7,82,54,-72,-48,29,-43,25,62,106, 
  /* [54][0][][] */ 5,-58,11,-3,-63,64,57,-29,-10,-89,50,22,-25,-12,-127,37, 
  /* [55][0][][] */ -8,-33,-28,35,64,-30,53,76,-47,-57,-127,-37,54,-29,-22,32, 
  /* [56][0][][] */ 82,-34,-54,-23,-127,26,-123,-11,-11,-7,-33,16,95,-34,49,7, 
  /* [57][0][][] */ -72,12,26,-31,127,51,60,44,-29,62,0,-10,-69,92,-119,-26, 
  /* [58][0][][] */ 36,-7,14,-12,44,-22,-61,-62,52,-127,-73,2,-73,-44,-20,45, 
  /* [59][0][][] */ -57,-21,-7,4,18,38,-105,-48,73,127,-89,5,-14,-2,-14,-6, 
  /* [60][0][][] */ 24,-52,-7,23,-127,-48,29,7,-6,43,-18,45,-1,-45,38,38, 
  /* [61][0][][] */ 17,25,-72,-4,-51,-24,-127,-85,-18,16,32,93,65,-53,108,49, 
  /* [62][0][][] */ 54,-15,53,-24,-20,43,56,122,-55,127,20,84,34,44,71,113, 
  /* [63][0][][] */ 29,-127,-15,-7,-76,11,42,-21,-10,-16,-5,-18,-46,123,121,32, 
  /* [64][0][][] */ -11,-11,-127,-48,18,46,23,-18,-7,-112,49,-2,57,-48,-79,116, 
  /* [65][0][][] */ -17,9,56,61,90,-30,92,90,-43,-2,-124,-64,38,127,-84,-14, 
  /* [66][0][][] */ -47,-127,-11,-102,-53,-120,44,-25,-1,-42,29,90,-61,-42,-68,77, 
  /* [67][0][][] */ -26,-84,-66,-22,-65,105,-14,-127,-68,-21,-51,-101,14,-25,-60,26, 
  /* [68][0][][] */ 127,60,16,-20,-75,6,-64,-51,-85,-115,-29,-6,51,-29,62,-69, 
  /* [69][0][][] */ 44,-1,47,-29,-9,-45,-57,42,-17,127,-20,14,2,36,77,-35, 
  /* [70][0][][] */ 40,-7,-29,69,-120,32,1,-117,110,127,32,64,56,-65,-21,39, 
  /* [71][0][][] */ 127,-64,69,100,-97,-43,35,-37,109,19,-64,45,76,-69,32,0, 
  /* [72][0][][] */ 5,-49,56,107,58,-1,-127,66,89,3,27,6,-39,-58,-55,63, 
  /* [73][0][][] */ 75,15,61,-127,73,-90,-77,48,-15,116,-41,11,22,-88,28,-43, 
  /* [74][0][][] */ 84,14,33,45,-127,-22,44,-4,-70,-35,5,-42,35,-65,13,12, 
  /* [75][0][][] */ 75,127,-106,11,57,54,-12,-28,-21,-32,56,75,-102,52,47,87, 
  /* [76][0][][] */ -68,-35,2,-39,-68,0,94,-7,-64,22,105,47,-59,-127,-21,98, 
  /* [77][0][][] */ -52,127,-28,9,-50,-72,46,72,43,-66,-12,69,-29,60,-10,75, 
  /* [78][0][][] */ 114,31,-38,43,-57,19,-127,-22,-1,-6,-78,5,33,-90,32,42, 
  /* [79][0][][] */ -69,-39,127,60,-36,-87,-49,-48,-25,11,28,8,-73,119,-51,86, 
  /* [80][0][][] */ 65,105,36,-127,-13,34,85,-23,10,15,-40,28,80,-58,6,-3, 
  /* [81][0][][] */ 49,-81,31,-111,102,38,-28,127,126,33,-29,-54,-27,17,-87,-92, 
  /* [82][0][][] */ 87,51,76,7,127,-92,34,54,-1,120,-40,16,-9,-47,38,-97, 
  /* [83][0][][] */ -61,96,8,1,91,79,127,124,0,51,-30,-82,-109,90,-72,-107, 
  /* [84][0][][] */ 15,-106,-2,120,-2,-86,-94,37,-85,63,-62,-14,-127,71,10,-64, 
  /* [85][0][][] */ -89,58,-40,2,-29,-40,-43,-28,-10,45,21,-69,-127,-78,-53,47, 
  /* [86][0][][] */ -12,60,108,127,41,-45,52,13,12,31,-60,-73,33,81,-126,-74, 
  /* [87][0][][] */ -22,57,127,-29,-93,-26,23,17,44,-25,12,44,-57,12,-11,1, 
  /* [88][0][][] */ -36,-61,-125,27,25,53,0,26,-31,-85,-103,-99,127,-5,13,48, 
  /* [89][0][][] */ 41,17,24,-117,11,-63,-62,60,127,-17,23,-101,6,-29,64,-89, 
  /* [90][0][][] */ -1,76,21,5,-38,42,45,109,8,-64,-20,127,52,6,-49,84, 
  /* [91][0][][] */ -67,21,-39,65,88,66,-31,-103,-56,51,-11,6,-113,-127,-68,-15, 
  /* [92][0][][] */ -42,66,-2,-17,-127,2,-79,59,-39,60,92,76,-23,-20,60,22, 
  /* [93][0][][] */ 105,49,97,41,-127,-69,26,21,-18,-59,-26,-69,25,-54,-9,-6, 
  /* [94][0][][] */ -43,-127,20,-101,12,31,-24,14,88,-19,3,46,0,44,-37,37, 
  /* [95][0][][] */ -42,-62,-24,-64,127,117,-33,47,107,46,-84,47,-40,123,-88,50, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0017044267151504755, 0.0010506134713068604, 0.0013356232084333897, 0.0021557596046477556, 0.0016162915853783488, 0.0011171174701303244, 0.0010816708672791719, 0.0029161190614104271, 0.0021361669059842825, 0.0011493229540064931, 0.0024539127480238676, 0.0013940141070634127, 0.0019850693643093109, 0.0022135416511446238, 0.0018370546167716384, 0.0022482001222670078, 0.0026138725224882364, 0.0016427591908723116, 0.0013378543080762029, 0.0020276629365980625, 0.0014831214211881161, 0.0014023546827957034, 0.0011370008578523993, 0.002330665709450841, 0.0023303630296140909, 0.0014608518686145544, 0.00084433233132585883, 0.0019039699109271169, 0.0017967661842703819, 0.0026270702946931124, 0.0010177973890677094, 0.002231610007584095, 0.0012652064906433225, 0.0028715166263282299, 0.0017925183055922389, 0.0016989526338875294, 0.0016932981088757515, 0.0020899588707834482, 0.0024392153136432171, 0.0020761489868164062, 0.0018244644161313772, 0.0027440704870969057, 0.0033680757042020559, 0.0025733618531376123, 0.0028241369873285294, 0.0031293833162635565, 0.002001563087105751, 0.0019203458214178681, 0.0016681927954778075, 0.0019959048368036747, 0.0018645116360858083, 0.0023092813789844513, 0.0017386197578161955, 0.0029044768307358027, 0.0023131242487579584, 0.0027267909608781338, 0.0020945435389876366, 0.0015682921512052417, 0.0012286711717024446, 0.0019173003965988755, 0.0026620507705956697, 0.0018776707584038377, 0.0017047609435394406, 0.0023327914532274008, 0.0013138606445863843, 0.0014233635738492012, 0.0016846290091052651, 0.0021719199139624834, 0.0016450277762487531, 0.0024327761493623257, 0.0014010285958647728, 0.0012551466934382915, 0.001658481196500361, 0.0017115481896325946, 0.0021559689193964005, 0.0015548198716714978, 0.0018190197879448533, 0.0022260562982410192, 0.0018492131493985653, 0.0027130914386361837, 0.0025655925273895264, 0.0016088788397610188, 0.0011441843817010522, 0.001799818710424006, 0.001737789367325604, 0.0017560581909492612, 0.0022930414415895939, 0.0038606550078839064, 0.0011023008264601231, 0.0021594029385596514, 0.0023082029074430466, 0.002260187640786171, 0.00093120482051745057, 0.0019889271352440119, 0.0033230960834771395, 0.0019249602919444442, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -27139, -706, -130, -18661, 10908, -15060, 24456, -7718, 11071, -11271, 16807, 13339, -4313, -30237, -3995, 9756, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.8367160060442984e-05, 6.3562205468770117e-05, 6.3934865465853363e-05, 6.5156251366715878e-05, 7.7478282037191093e-05, 0.00014895449567120522, 5.2782674174522981e-05, 8.7737171270418912e-05, 0.00011148680641781539, 0.00010007512901211157, 8.4961815446149558e-05, 8.5726089309900999e-05, 8.6194238974712789e-05, 7.4208022851962596e-05, 6.4177045715041459e-05, 7.6934658864047378e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 12,23,8,8,-13,-75,-13,-7,-23,-67,14,-1,48,-58,56,28,-86,-28,41,8,77,15,-61,12,-4,60,127,67,11,76,48,-37,11,6,10,-16,34,36,-11,-14,107,18,21,-16,-11,-2,11,-34,17,-32,95,-4,-57,1,32,31,-6,-37,13,25,-12,36,-53,-16,19,-2,65,30,15,-27,27,30,12,33,13,31,63,-35,47,17,-8,47,35,34,-51,8,-5,69,10,9,-80,-22,26,3,96,66, 
  /* [1][0][][] */ 21,41,-44,-8,9,-41,98,-81,-74,-41,-62,-48,6,-43,-10,-54,-28,-23,-36,-28,-12,-105,108,-34,-9,22,4,70,-47,12,-45,16,-33,17,10,-1,-21,48,-56,84,24,12,2,-50,58,-66,-10,25,-93,-6,53,-122,-50,39,65,55,27,21,-69,9,-50,-9,-24,-24,27,15,107,2,-47,-127,3,5,15,61,-23,34,-63,-33,107,-35,39,-21,50,-71,-27,-63,-22,8,-16,-50,39,-5,65,-56,-28,47, 
  /* [2][0][][] */ 9,-18,14,-12,58,42,-55,33,-49,49,18,-21,28,-14,25,38,37,-33,-127,2,-15,-39,-10,20,3,-20,-47,15,-42,-18,-25,74,-16,-35,-7,20,-47,37,-17,-21,76,15,4,42,7,62,16,2,-90,5,-25,18,-18,52,10,-64,36,30,44,42,-27,-5,-14,61,49,6,-35,-1,-8,-12,-8,-31,23,48,33,68,-48,-5,-28,-27,43,29,55,-7,-12,-37,-9,-54,-18,-32,-12,74,-2,-7,79,-40, 
  /* [3][0][][] */ 30,-28,-28,-127,-20,-36,104,-18,39,121,-66,-13,-1,-23,-13,62,59,44,-14,30,-49,31,30,2,-35,71,52,-15,-45,-10,-72,61,4,-11,36,-17,13,-41,-23,58,14,9,-27,27,64,-40,1,43,46,-19,29,-32,115,46,25,-1,1,-16,3,-34,-31,45,82,7,-20,-10,119,-41,-22,-16,-45,24,27,-68,11,-69,28,-40,123,3,0,-52,-27,-37,-33,-37,79,78,-47,49,-66,3,10,-74,-34,27, 
  /* [4][0][][] */ -25,75,34,18,-13,13,-35,-16,15,-30,7,-14,22,52,-17,20,-12,-44,-21,-66,34,-28,-61,22,-26,-33,-26,21,-42,127,-52,-16,4,-36,1,-30,70,55,-36,-3,25,13,16,-46,-49,-8,61,-19,28,-19,-64,-8,-71,22,48,22,4,65,-27,22,-32,-64,-20,4,63,23,-61,0,-5,-8,8,-69,-13,67,58,74,-36,19,-62,41,30,67,33,-60,49,-61,-37,-74,-44,-54,-52,-11,-5,10,42,-35, 
  /* [5][0][][] */ -1,-16,38,-22,-9,-19,-18,2,35,13,-17,-6,-21,-25,18,-12,-4,5,-46,-27,-24,10,-16,15,23,-46,66,-19,-5,43,4,73,-12,-84,21,9,-38,-23,-27,0,-42,-3,-20,10,0,18,-65,18,-18,14,50,-12,23,-65,-1,19,-22,-50,6,-28,33,21,22,49,-32,6,110,-19,-7,-24,15,21,0,23,33,5,1,-6,127,42,-24,-13,-26,34,36,62,10,94,0,-32,0,4,11,-15,-34,19, 
  /* [6][0][][] */ 31,-55,72,8,-50,112,-47,-101,-20,-72,-88,58,2,10,-37,98,19,47,11,-36,-96,-24,-85,-61,9,-56,-8,68,-124,50,-32,-35,38,84,-27,-10,-1,-47,19,-15,-63,39,32,-36,29,48,-109,-8,56,15,-90,-127,85,18,-41,-18,17,-28,29,-20,-16,-50,39,8,64,-78,-71,-65,-114,22,-13,-82,-30,-112,17,-114,97,23,-81,54,-33,78,20,-98,64,-37,-12,0,-73,80,-85,92,46,-46,65,-108, 
  /* [7][0][][] */ -8,-17,-64,69,-22,-1,42,-9,-98,4,77,50,-1,-64,-5,-26,-5,-9,7,-8,-53,-23,-37,-37,64,42,-4,75,7,32,21,28,-50,-127,26,92,-15,11,-40,5,-8,-13,11,-71,19,49,69,73,-25,40,-42,3,14,-32,36,-53,-17,37,-84,-18,55,13,-9,-42,61,-57,97,-10,-69,-26,67,4,-25,-26,-75,-22,25,-33,92,-29,-4,-14,-70,-30,40,17,-67,43,-7,8,3,30,59,-9,87,-10, 
  /* [8][0][][] */ -12,-60,9,3,-9,-13,13,-8,-14,-1,43,40,4,30,-36,-4,62,0,13,6,-19,-70,-34,-25,-20,-38,67,-5,-23,41,11,-29,-16,4,4,2,-43,-16,12,-16,3,40,19,-35,7,-10,22,-7,40,-5,51,4,1,8,-43,7,-11,108,-58,-2,-14,-64,-53,2,-73,-26,-13,17,-4,9,44,-19,-27,-127,41,-101,11,11,-53,17,-18,-2,8,59,60,-55,-38,51,-33,86,6,-19,-51,4,-8,-54, 
  /* [9][0][][] */ -33,-25,-27,13,4,21,6,41,-35,-5,57,58,-26,56,26,-47,-17,35,-18,-35,5,44,-7,10,-23,26,9,20,34,-3,18,-4,-13,-13,12,53,-16,3,29,-4,-8,-22,11,-5,15,44,3,36,-40,13,-11,30,127,12,-13,-4,15,-14,40,20,-29,-1,87,7,17,28,59,6,34,-2,-15,26,10,-123,-30,-118,-29,-17,33,-2,-3,29,0,-36,42,16,-53,-3,-8,106,43,29,51,35,-14,27, 
  /* [10][0][][] */ 21,37,18,4,-7,20,-38,-28,57,3,-44,23,24,9,-9,-61,-37,-1,16,-9,26,-17,-27,-26,7,-15,-94,50,-16,52,-4,14,20,18,-23,2,11,2,4,-3,36,-7,67,-47,-35,-9,17,20,13,4,11,-26,-30,-20,0,31,-10,2,-13,-14,-15,-43,-17,4,-10,-23,-91,-25,-57,-18,42,-11,-25,28,31,17,44,-25,-92,5,-18,34,-7,-13,9,2,-77,-127,-23,23,20,17,53,-36,27,31, 
  /* [11][0][][] */ 17,-44,-2,13,-53,34,16,8,67,-17,-20,-38,23,4,10,-9,-22,53,25,-62,13,30,14,-20,34,15,62,6,33,-50,-38,22,18,96,-96,8,14,-3,59,2,-49,44,-6,10,-45,5,-3,-11,39,-16,-28,-13,-21,16,-75,83,-27,1,-8,-27,18,4,-12,-67,-9,-45,-127,-74,-11,-32,-90,35,47,11,-6,-4,34,54,-111,-35,-15,-8,-22,-3,-19,-7,54,72,14,-45,14,6,-29,24,82,23, 
  /* [12][0][][] */ 22,32,-37,-24,14,-21,9,40,57,-40,23,-4,6,-16,-2,9,15,-37,-26,12,14,54,-1,52,-43,-33,-127,-3,78,-18,22,-1,-20,-74,67,-7,31,-16,-4,10,-7,-57,15,34,48,-1,27,-14,-82,-2,-53,88,73,-20,35,-75,7,18,-39,-36,10,52,79,2,-18,-21,28,17,107,32,18,25,4,-17,-10,-7,-39,-52,42,-71,12,-52,26,-43,7,4,6,-105,-9,34,-34,22,18,69,16,41, 
  /* [13][0][][] */ -13,22,-68,28,27,23,-4,12,33,63,-41,42,-43,-27,68,-55,17,56,59,14,-21,-39,-10,24,41,56,-20,31,9,44,53,-15,-17,66,-4,48,20,-39,-47,-62,-4,-16,28,10,60,49,-29,46,-52,41,-9,-1,-21,-48,68,35,14,-54,-11,-14,29,23,7,-34,10,90,127,39,13,6,-56,-17,41,60,-76,59,16,-79,126,-46,-18,-42,19,-3,35,53,-40,-29,-22,-26,17,50,43,14,70,60, 
  /* [14][0][][] */ -20,59,13,14,-75,-53,16,54,-69,-19,85,15,-93,-13,81,-21,-43,39,-52,38,-26,34,-91,8,-44,-8,-53,-127,6,1,25,86,-57,38,23,-8,-18,-61,-7,-50,38,-36,46,-21,-8,62,-73,38,-21,-38,90,37,-1,35,-37,33,-59,40,9,53,43,77,6,53,26,-39,0,-80,52,65,85,34,-46,38,19,10,43,-8,40,27,-64,121,4,-126,87,4,5,13,-120,-8,-26,-3,-22,19,28,30, 
  /* [15][0][][] */ 76,-38,26,40,49,11,-8,-20,9,26,-66,-19,72,60,-15,-21,-9,-1,-78,38,1,-35,8,33,60,-30,83,35,46,-29,-38,63,64,47,-7,-82,52,59,60,50,81,35,-8,7,-50,-127,41,-42,-38,-30,-13,-5,-19,-45,-28,50,-9,2,-25,11,4,-53,-46,19,29,30,-74,43,-15,-37,-9,-2,-13,-118,-53,-98,-30,13,-117,24,68,-32,43,18,-52,-10,-7,-18,43,79,19,-63,-31,-39,44,-38, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0037556043826043606, 0.0027013937942683697, 0.0027172316331416368, 0.0027691405266523361, 0.0032928269356489182, 0.0063305660150945187, 0.0022432636469602585, 0.0037288297899067402, 0.0047381892800331116, 0.0042531928047537804, 0.0036108770873397589, 0.0036433585919439793, 0.0036632551345974207, 0.0031538410112261772, 0.0027275243774056435, 0.003269722918048501, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 7069, -1997, -6575, 6924, -2464, -539, 1645, -1085, 755, -3723, 1329, -1630, 9022, -3475, -455, -5301, -411, 416, -9775, -1071, -3537, 1429, -5860, 193, 54, 5854, -8105, -7233, 910, -3600, -889, -1040, 13913, -710, -298, 1061, -1185, 8387, 1246, 8223, -1669, 4920, -153, 7802, 2036, 713, 6675, 1684, -6093, 480, -3747, -609, -455, -3537, 1807, 1812, 1796, 2213, 956, 2058, -105, 1420, -36, 9348, 8697, -1473, 15394, 10703, -1078, -317, 7951, -1029, 15, 479, -3569, -147, 18474, 9651, 11231, 11661, 10376, -1269, 5798, 6321, -688, -2261, 11465, -4930, 9346, -779, -7055, 536, -523, 1508, 17694, -2616, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00014327612007036805, 0.00025994970928877592, 0.00016072993457783014, 0.00018086268391925842, 0.00025709960027597845, 0.00051603495376184583, 0.00010292843944625929, 0.00018380244728177786, 0.00034720785333774984, 0.00030440240516327322, 0.00025068849208764732, 0.00020716183644253761, 0.00014567245671059936, 0.00017074121569748968, 0.00019849988166242838, 0.00019730253552552313, 0.00029863175586797297, 0.00026723576593212783, 0.00013698854309041053, 0.00045282338396646082, 0.00019187305588275194, 0.00023151419009082019, 0.00015969385276548564, 0.00019239231187384576, 0.0025425513740628958, 0.00017585008754394948, 0.00027555765700526536, 0.00013361971650738269, 0.00033447271562181413, 0.00018421105050947517, 0.00015665224054828286, 0.00033834067289717495, 9.5019422587938607e-05, 0.00041499239159747958, 0.00017791117716114968, 0.00017278625455219299, 0.00029414333403110504, 0.00012430983770173043, 0.0002285243826918304, 0.00012833766231779009, 0.00044524064287543297, 0.00020454289915505797, 0.00024276511976495385, 0.00011877030920004472, 0.00022792906383983791, 0.00021508846839424223, 0.00017014423792716116, 0.00029216412804089487, 0.00019256363157182932, 0.00027334093465469778, 0.00028863217448815703, 0.00018289436411578208, 0.00015273662575054914, 0.00027164581115357578, 0.00028522216598503292, 0.00024479982675984502, 0.00021070397633593529, 0.0002994100796058774, 0.00027711811708286405, 0.00033265369711443782, 0.00033299022470600903, 0.00025273696519434452, 0.00015429830818902701, 0.00011820570944109932, 0.00023552666243631393, 0.00047653287765569985, 0.00011460527457529679, 0.00012591297854669392, 0.00018819549586623907, 0.00027047467301599681, 0.0001370163809042424, 0.00033231283305212855, 0.00047860914492048323, 0.00017667813517618924, 0.00015090004308149219, 0.00020217327983118594, 8.1729449448175728e-05, 0.0001490143476985395, 0.00012859684647992253, 0.00014705525245517492, 0.0001023891891236417, 0.00025789198116399348, 9.9965669505763799e-05, 0.00029919808730483055, 9.9432494607754052e-05, 0.00027217934257350862, 0.00012224842794239521, 0.00030226176022551954, 0.00012926905765198171, 0.00020431501616258174, 0.00014189038483891636, 0.00017690449021756649, 0.00030731424340046942, 0.00017103653226513416, 0.00012886500917375088, 0.00025739881675690413, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -54,-3,8,-44,105,4,23,-12,0,-10,-17,-30,-33,6,-13,-26,-14,8,4,-12,6,29,17,52,-5,-7,-35,14,18,9,24,3,-3,6,-10,-40,5,-67,-42,5,-4,0,46,-40,-33,37,-60,-15,-19,3,-3,51,-65,3,26,-8,-4,-8,8,-30,-2,-21,-8,-34,-32,-17,-52,-31,-17,33,6,1,33,4,-3,5,-15,10,127,-23,-127,9,-122,-13,-35,-11,6,4,-35,-12,22,-43,-1,35,-47,12, -26,38,63,-95,-33,8,126,-57,4,-27,-42,11,-68,-1,-97,66,-9,74,77,-32,-2,127,85,127,26,13,39,78,123,46,127,-28,-127,-15,-92,-41,-18,-103,127,-50,-24,-127,-2,-69,52,-34,-51,-4,51,-4,26,127,-96,37,-84,-8,-77,-6,-3,20,-5,-127,-111,-47,-62,4,-9,-103,-8,21,-71,122,-127,-9,7,-25,-127,-86,-9,-97,-117,10,34,-60,104,74,-79,20,-127,2,33,-15,15,123,-60,-82, -42,7,6,-29,80,5,38,-28,-15,9,-16,-3,-40,5,-14,-31,-12,4,-20,-23,5,4,13,30,-8,0,1,1,14,17,18,9,-32,6,-23,56,2,-85,-29,7,-8,-4,32,-30,-33,-34,-54,-22,-6,-2,-2,37,-1,-4,1,-11,55,-18,12,-35,-12,-12,-56,-11,-40,-27,127,-56,-3,26,-3,16,31,9,4,19,-13,34,-48,-18,-83,2,-127,-25,-1,-23,1,-26,-58,-31,4,46,7,39,-46,15, 
  /* [0][1][][] */ -91,1,51,-81,48,102,-62,-8,1,-21,-27,-17,-100,26,16,59,-15,36,114,25,39,-23,123,-31,36,29,59,32,-11,8,-7,-14,-104,-12,53,-25,-6,-127,-55,-127,-19,-8,92,-42,-80,127,-102,-81,58,53,21,-38,-112,67,51,-28,15,-35,39,-22,13,-14,84,-79,-41,19,-34,-62,-15,1,-127,20,75,127,14,-68,-125,-60,-64,-51,-93,-2,-40,-56,43,28,-118,52,-85,127,103,-101,127,4,-93,1, 67,127,127,127,-127,-127,127,-61,127,127,-80,-70,-72,127,-32,127,127,-127,127,127,127,-77,116,-126,-127,-127,127,127,-127,127,-23,127,-69,127,127,-113,127,82,10,-21,127,-4,-127,-116,127,-23,127,127,127,-127,127,-98,113,127,-127,127,-127,127,-127,127,-87,105,114,-127,127,127,-17,127,-110,-127,-28,-127,6,119,127,71,6,-127,95,-127,56,127,124,127,127,66,-127,127,-84,50,-10,-33,-93,-21,-127,-28, -127,-20,45,-90,21,61,-75,8,-32,-21,-5,127,-127,23,19,49,-24,49,81,7,26,-25,91,-24,33,20,40,16,-16,2,12,-13,-103,-27,68,127,2,-91,-69,-85,-30,-30,34,-43,-77,-74,-103,-106,52,61,-4,-23,127,11,76,-48,80,-33,52,-50,-4,-32,-127,-37,-78,-6,-61,-96,-15,7,-118,7,47,-86,12,127,-89,-44,-59,-1,-91,-14,-75,-86,-3,33,-92,36,-43,-71,127,127,-45,-19,-100,-2, 
  /* [0][2][][] */ -4,-31,-13,-27,46,1,-29,23,-6,11,29,-23,46,5,-12,-42,-1,-7,-43,-18,-6,-24,25,-24,4,8,-8,22,1,0,-17,5,35,3,-12,-31,0,-5,-6,2,-18,-7,36,-4,7,8,-56,-6,-17,2,-18,-23,-10,-29,26,-13,0,-25,13,-25,-4,10,-5,-32,-29,-18,110,29,27,26,4,1,-6,-10,-6,-24,-28,14,-34,-24,-18,4,-94,-6,-8,2,40,-17,8,8,10,-28,-7,-21,-35,-2, -21,-48,27,-120,-33,2,40,127,-50,76,127,-30,-58,21,127,76,-6,-36,79,-48,-21,-47,127,16,17,2,34,28,-14,8,-83,-42,-51,-26,-100,-11,-83,-70,53,-54,-14,-115,-32,127,15,-24,-62,-7,42,-11,-12,-15,61,26,-47,-39,-56,-56,47,-61,127,22,111,-25,-80,-48,-26,-71,127,35,-39,19,26,-22,25,-21,-35,-50,-1,33,-92,-24,-91,-67,56,-127,3,9,-24,4,60,-5,19,-127,-74,127, -24,12,-4,-14,40,-3,-21,19,-18,2,11,34,23,8,-13,-37,-4,11,-9,-29,-3,-11,18,-12,-8,12,-15,7,0,5,-31,3,28,6,-9,-8,3,-16,-21,11,-24,-20,6,-4,0,-14,-61,6,-13,0,-10,-22,-6,-35,25,-11,45,-14,15,-23,0,17,-22,-8,-18,-23,-34,22,38,10,-8,2,-27,-34,-2,-8,-35,8,87,-17,4,-3,-70,-7,-13,5,49,2,20,2,-6,10,7,-23,-29,-2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0060892347246408463, 0.011047862470149994, 0.0068310219794511795, 0.0076866638846695423, 0.010926732793450356, 0.021931484341621399, 0.0043744584545493126, 0.0078116040676832199, 0.014756334014236927, 0.012937101535499096, 0.010654260404407978, 0.0088043780997395515, 0.0061910790391266346, 0.0072565013542771339, 0.0084362449124455452, 0.0083853574469685555, 0.012691848911345005, 0.011357519775629044, 0.0058220126666128635, 0.019244993105530739, 0.008154604583978653, 0.0098393531516194344, 0.0067869885824620724, 0.0081766732037067413, 0.10805843025445938, 0.0074736285023391247, 0.011711199767887592, 0.0056788376532495022, 0.014215090312063694, 0.0078289695084095001, 0.0066577200777828693, 0.014379478059709072, 0.0040383255109190941, 0.017637176439166069, 0.0075612249784171581, 0.0073434156365692616, 0.012501091696321964, 0.00528316805139184, 0.0097122862935066223, 0.0054543502628803253, 0.018922727555036545, 0.0086930729448795319, 0.010317517444491386, 0.0050477380864322186, 0.0096869850531220436, 0.0091412598267197609, 0.0072311297990381718, 0.012416974641382694, 0.0081839542835950851, 0.01161698903888464, 0.012266866862773895, 0.0077730105258524418, 0.0064913062378764153, 0.011544946581125259, 0.012121941894292831, 0.010403992608189583, 0.0089549189433455467, 0.012724928557872772, 0.011777519248425961, 0.014137782156467438, 0.014152084477245808, 0.010741321370005608, 0.0065576778724789619, 0.0050237425602972507, 0.010009882971644402, 0.020252646878361702, 0.0048707239329814911, 0.0053513017483055592, 0.0079983081668615341, 0.011495173908770084, 0.0058231959119439125, 0.014123295433819294, 0.020340887829661369, 0.0075088203884661198, 0.0064132516272366047, 0.0085923643782734871, 0.0034735014196485281, 0.0063331094570457935, 0.0054653659462928772, 0.0062498478218913078, 0.0043515404686331749, 0.010960408486425877, 0.004248540848493576, 0.012715918943285942, 0.0042258808389306068, 0.011567622423171997, 0.0051955580711364746, 0.012846124358475208, 0.0054939347319304943, 0.0086833881214261055, 0.0060303411446511745, 0.0075184409506618977, 0.013060855679214001, 0.0072690523229539394, 0.0054767625406384468, 0.010939449071884155, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 1857, 7746, 393, 1803, 5459, 17128, 34, 2944, 10428, -1020, 20889, 4873, 2866, 687, 6830, 452, 2626, 4427, -159, 11923, 1756, 9954, -1815, 1599, -16895, 1730, 2160, 2035, 6420, 1168, 3857, 3905, 2100, 10935, 4034, 4789, 3364, 2441, 4239, 2292, 17930, 1393, 2346, 1480, 4453, 12176, 7943, 11698, 1066, -794, 1826, 8567, 2717, -4024, 8782, 178, 2463, 14679, 1571, 2638, 3280, 10791, 4241, -149, 16348, 15855, 1606, 4668, 6887, 4564, 2567, 1606, -3885, 4236, 2359, 3256, 538, 10710, 3479, 7831, 2932, 1035, 4408, 11470, -231, 10769, 8213, 1573, -701, 2416, 1509, 14696, 3718, 4023, 7608, 5647, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001653507788432762, 9.3430906417779624e-05, 0.00028135627508163452, 0.00018628285033628345, 0.00012940613669343293, 5.4147043556440622e-05, 0.0002377244527451694, 0.00011255114077357575, 8.2392849435564131e-05, 0.000130821208585985, 4.1839750338112935e-05, 9.8741860711015761e-05, 0.00011652375542325899, 0.00029618869302794337, 8.9210065198130906e-05, 0.00011329796689096838, 0.00022773840464651585, 0.00014205930347088724, 0.00016096020408440381, 7.3928298661485314e-05, 0.00014548705075867474, 8.0725163570605218e-05, 0.00013206219591666013, 0.00015445415920112282, 4.5882941776653752e-05, 0.00011205215560039505, 0.00022050616098567843, 0.00018570529937278479, 0.00013284965825732797, 0.00023884077381808311, 0.00014708278467878699, 0.00013890617992728949, 0.00018305213598068804, 7.5723015470430255e-05, 0.00013366401253733784, 0.00013162801042199135, 0.00016802665777504444, 0.00015541439643129706, 0.00011273469863226637, 0.00018185804947279394, 5.0944650865858421e-05, 0.00017958413809537888, 0.00015656590403523296, 0.00012532397522591054, 9.3274953542277217e-05, 7.1114831371232867e-05, 8.1054233305621892e-05, 6.7436369135975838e-05, 0.00024231031420640647, 0.00026343137142248452, 0.00020466007117647678, 8.3568695117719471e-05, 0.00018185211229138076, 9.1173867986071855e-05, 8.6978841864038259e-05, 0.00028777497936971486, 0.00013921450590714812, 5.9138918004464358e-05, 0.0001149579111370258, 0.00011571546929189935, 0.00013357671559788287, 8.3159422501921654e-05, 0.0001512183080194518, 0.00018993401317857206, 6.0005550039932132e-05, 5.4487176385009661e-05, 0.00024479388957843184, 0.00012343596608843654, 0.00011318785982439294, 0.00010699334961827844, 0.00018184982764068991, 0.00014418625505641103, 0.00014682990149594843, 0.00014977647515479475, 0.00015931746747810394, 0.00018898560665547848, 0.00017148698680102825, 7.3822156991809607e-05, 0.0001660945126786828, 0.00010619142994983122, 0.00014010434097144753, 0.00017966663290280849, 0.00011087059101555496, 7.9746692790649831e-05, 0.0001012050561257638, 6.8072280555497855e-05, 8.53978272061795e-05, 0.00023910404706839472, 0.00020803218649234623, 0.00022720143897458911, 0.00015155479195527732, 6.1339989770203829e-05, 0.00014065251161810011, 0.00010752477101050317, 7.7921737101860344e-05, 0.0001122035100706853, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 59,-7,14,84,-121,-41,96,65,85,127,-36,59,17,1,42,78, 
  /* [1][0][][] */ -30,28,-99,0,127,106,-3,9,-34,12,-53,27,-54,78,-57,-33, 
  /* [2][0][][] */ -40,61,77,-4,66,84,8,36,40,-5,35,-20,52,-127,-7,8, 
  /* [3][0][][] */ 127,-40,32,13,28,20,-14,13,39,38,-52,-9,-36,63,-21,47, 
  /* [4][0][][] */ -73,-7,-2,20,-98,0,-70,-28,-1,25,-8,-48,-28,29,-45,127, 
  /* [5][0][][] */ -103,17,18,12,127,47,5,15,-43,19,-23,2,-73,45,-108,-29, 
  /* [6][0][][] */ -127,24,-37,25,-12,-74,74,15,14,-27,-53,44,11,7,-48,6, 
  /* [7][0][][] */ -10,109,47,-106,90,66,127,19,64,16,-2,43,81,34,-45,-11, 
  /* [8][0][][] */ -35,-37,-63,63,-50,88,-57,-79,38,-35,87,40,127,44,-108,-3, 
  /* [9][0][][] */ -23,-127,-20,77,-40,-69,-23,59,59,52,4,62,-79,11,-9,-40, 
  /* [10][0][][] */ -52,-38,-103,36,-91,127,51,-82,23,-48,66,-39,21,99,-95,73, 
  /* [11][0][][] */ -35,-101,-34,39,-6,99,38,0,21,15,46,-97,18,117,-118,127, 
  /* [12][0][][] */ -26,-92,-60,89,-83,-127,17,56,84,79,-41,108,6,-42,-15,-20, 
  /* [13][0][][] */ -76,-22,-41,-12,-16,8,32,21,-18,127,-7,-25,36,28,11,-10, 
  /* [14][0][][] */ -127,-13,-75,-59,-23,120,-7,-108,119,-71,89,11,90,-54,-102,-85, 
  /* [15][0][][] */ 6,-127,100,-54,-54,-40,4,59,19,-47,-94,-35,82,-39,-24,-52, 
  /* [16][0][][] */ -22,-36,27,-37,38,25,-21,-20,68,-127,36,-14,-8,2,-77,-95, 
  /* [17][0][][] */ -19,1,36,-54,20,-5,-41,-2,92,-49,22,67,110,-61,-15,-127, 
  /* [18][0][][] */ 76,3,-32,-111,3,-31,109,-45,31,62,-10,57,-14,61,-2,-127, 
  /* [19][0][][] */ -20,-16,-20,-60,-107,33,-5,-16,20,-32,26,-127,-2,-24,-27,-13, 
  /* [20][0][][] */ 9,70,63,-92,62,-2,-45,84,-113,-127,35,-82,-34,110,-17,-10, 
  /* [21][0][][] */ -4,-85,-127,-22,85,47,70,90,-75,-75,-2,14,74,-95,-36,31, 
  /* [22][0][][] */ 70,-17,83,-4,14,8,64,25,38,127,23,16,-3,-8,116,-12, 
  /* [23][0][][] */ -127,-66,-27,59,73,58,18,2,-6,15,5,-93,-8,65,51,127, 
  /* [24][0][][] */ 20,-20,48,41,9,-104,10,-49,25,127,-120,71,-34,-85,100,-84, 
  /* [25][0][][] */ 115,-59,97,127,45,4,-18,27,-119,79,55,-54,-12,29,68,-12, 
  /* [26][0][][] */ -19,25,14,43,-58,111,-17,34,-57,-34,-80,35,1,20,47,-127, 
  /* [27][0][][] */ 30,-5,-9,-50,-46,4,-79,11,-108,-27,-70,-47,-73,36,-21,127, 
  /* [28][0][][] */ -65,17,17,7,23,-6,-127,7,-6,-40,6,-12,9,-53,-75,-24, 
  /* [29][0][][] */ -32,-106,-28,84,-31,14,127,6,72,49,-104,59,30,-22,-47,78, 
  /* [30][0][][] */ 42,-45,-64,8,-127,21,45,-32,8,4,7,-25,-22,39,-8,72, 
  /* [31][0][][] */ -127,-16,18,104,-43,7,-59,-11,-20,-59,11,-38,-23,-60,-16,96, 
  /* [32][0][][] */ -115,-88,-77,5,-87,-60,-2,-17,127,65,-58,-50,42,53,42,-27, 
  /* [33][0][][] */ -22,5,-98,33,-125,-99,51,3,-127,15,-47,-62,-25,106,71,76, 
  /* [34][0][][] */ 47,60,6,43,-68,-50,41,8,14,-127,-26,28,-10,-2,38,86, 
  /* [35][0][][] */ 39,-8,-67,-8,-127,10,90,-24,25,58,-10,-7,17,85,40,68, 
  /* [36][0][][] */ -5,-6,-58,51,127,-18,44,60,-86,18,-82,-79,28,-17,10,25, 
  /* [37][0][][] */ -107,39,12,-60,50,-98,-41,-39,-1,-9,-25,56,65,-59,21,-127, 
  /* [38][0][][] */ 58,106,54,-60,-109,-84,-127,-75,-34,-68,44,74,-66,-105,87,-26, 
  /* [39][0][][] */ 6,-57,13,83,16,72,71,-38,-10,52,18,-20,-14,127,57,103, 
  /* [40][0][][] */ 84,44,68,77,-38,-64,-13,31,-78,73,-10,-4,-34,-9,127,3, 
  /* [41][0][][] */ -17,-11,16,59,-99,111,4,49,-59,31,-112,16,19,41,61,-127, 
  /* [42][0][][] */ 9,-97,19,-15,127,40,68,11,-38,-104,-90,-18,-12,-8,-17,39, 
  /* [43][0][][] */ -51,-91,-46,-1,127,26,5,93,-72,-69,-115,-75,109,1,-63,66, 
  /* [44][0][][] */ -26,-48,-86,-87,23,80,55,13,-28,-127,-62,61,-43,38,21,102, 
  /* [45][0][][] */ -11,-59,-79,-5,-127,79,-35,-52,52,-56,35,-54,-7,6,-40,54, 
  /* [46][0][][] */ 39,-90,3,14,76,-90,-7,74,-4,-26,34,60,-36,-44,71,-127, 
  /* [47][0][][] */ -85,-16,-26,84,-24,23,45,45,-6,127,101,101,-49,84,-9,125, 
  /* [48][0][][] */ 39,-10,-81,-90,35,-63,7,53,47,-74,2,24,-60,6,-44,-127, 
  /* [49][0][][] */ 52,40,4,31,-11,-19,53,55,-37,127,-37,35,-44,-30,73,93, 
  /* [50][0][][] */ 9,-1,17,15,-127,-22,-13,-48,53,24,20,49,-19,-62,17,-4, 
  /* [51][0][][] */ 11,-1,-22,-127,-26,102,42,-45,5,8,45,-51,58,67,-37,12, 
  /* [52][0][][] */ 31,-19,5,-83,80,-114,0,-38,39,-2,127,-58,40,0,-38,94, 
  /* [53][0][][] */ -60,-61,48,-39,-43,-127,22,-113,-11,104,-108,84,-38,-22,23,-87, 
  /* [54][0][][] */ 69,62,55,-13,-127,-60,-99,-103,-1,21,46,71,-69,-49,57,1, 
  /* [55][0][][] */ 15,13,-25,72,-40,20,33,-18,6,127,22,58,-8,-5,5,40, 
  /* [56][0][][] */ 48,-115,-62,102,-78,50,-14,61,127,23,56,58,-30,-26,55,84, 
  /* [57][0][][] */ 36,12,109,-68,87,-18,-4,-9,64,-31,12,127,60,-38,115,-51, 
  /* [58][0][][] */ 88,-76,26,-68,43,12,10,127,67,104,-9,68,58,27,95,-8, 
  /* [59][0][][] */ -55,36,31,-47,2,-98,-5,18,-3,21,-126,-111,-127,-50,83,-13, 
  /* [60][0][][] */ 42,-17,29,18,3,-21,21,-62,12,127,-11,64,-12,-31,-18,-35, 
  /* [61][0][][] */ 62,53,17,-21,-81,-127,-25,-58,-57,-12,-29,13,-62,-55,82,79, 
  /* [62][0][][] */ -20,89,-45,31,-45,127,-37,20,-63,1,-33,28,-24,34,48,-70, 
  /* [63][0][][] */ 25,-3,-69,-127,-15,-39,70,-10,-5,-93,-25,30,-38,59,27,-27, 
  /* [64][0][][] */ -44,16,13,-27,66,-64,31,95,-127,-19,-83,-37,-28,92,67,66, 
  /* [65][0][][] */ -69,-19,-49,-19,69,45,-39,-78,-127,-64,9,-32,-126,100,-56,48, 
  /* [66][0][][] */ -15,55,-14,34,-38,127,-25,19,-55,20,-28,43,-29,46,47,-80, 
  /* [67][0][][] */ 22,-35,-29,-17,17,-94,63,-92,-11,39,6,127,-53,-17,-11,-127, 
  /* [68][0][][] */ 8,-127,-20,88,-11,1,20,71,46,44,49,7,-78,31,-6,-16, 
  /* [69][0][][] */ 14,83,94,-109,65,-1,-26,92,35,118,61,103,98,-85,41,-127, 
  /* [70][0][][] */ 47,20,57,-40,110,3,-108,-56,-127,-85,-8,51,-31,72,-110,-15, 
  /* [71][0][][] */ -10,-77,45,-42,59,-24,30,25,-72,87,-127,-39,12,86,-11,33, 
  /* [72][0][][] */ 10,23,68,4,-60,-21,-101,-71,-16,69,-23,61,34,119,-127,1, 
  /* [73][0][][] */ -8,-33,-23,-44,39,-104,31,-42,64,83,110,-8,25,-14,-78,127, 
  /* [74][0][][] */ 3,2,-26,87,-86,-8,93,29,82,69,32,121,127,28,-52,7, 
  /* [75][0][][] */ -33,46,-31,26,-47,127,-17,16,-36,30,-35,40,-18,51,23,-63, 
  /* [76][0][][] */ -71,82,-56,39,-100,-10,-13,20,57,53,-48,-51,43,-58,-127,26, 
  /* [77][0][][] */ 107,119,-124,127,79,78,87,41,33,8,104,-44,79,46,75,39, 
  /* [78][0][][] */ 14,-37,-3,-58,68,-118,28,-47,51,44,127,-17,5,-17,-46,122, 
  /* [79][0][][] */ -41,58,4,20,0,-46,-33,-4,-127,-8,50,8,106,45,-76,-43, 
  /* [80][0][][] */ -68,11,91,15,71,33,-14,-127,-71,73,-63,-29,-9,-75,34,53, 
  /* [81][0][][] */ 84,65,-16,6,33,-34,76,125,-109,127,-65,-36,-39,34,123,125, 
  /* [82][0][][] */ 62,96,-17,-57,-9,-65,97,-87,30,31,-74,73,127,-17,80,-61, 
  /* [83][0][][] */ 8,-37,29,30,0,17,-22,-98,52,-25,93,17,42,-52,-41,-127, 
  /* [84][0][][] */ -127,-93,-44,-13,-7,104,98,11,98,76,112,113,66,97,-86,7, 
  /* [85][0][][] */ 114,3,110,-86,81,-5,-29,78,26,127,-76,-6,-39,55,118,13, 
  /* [86][0][][] */ -75,72,-39,-3,24,87,24,16,82,30,127,-31,-23,51,-13,-14, 
  /* [87][0][][] */ 13,-59,29,-39,44,-127,24,-31,48,-8,59,-33,34,-37,-34,65, 
  /* [88][0][][] */ -69,48,44,0,104,-31,28,28,-48,-62,99,-56,73,118,108,-127, 
  /* [89][0][][] */ -27,41,-19,25,-33,127,-15,30,-43,10,-37,19,-10,54,27,-80, 
  /* [90][0][][] */ 41,-74,10,12,127,6,46,46,-12,-95,-110,-32,-14,-17,-65,34, 
  /* [91][0][][] */ -14,74,-21,-44,-4,-71,-87,30,-74,16,-106,-127,-115,-81,-7,18, 
  /* [92][0][][] */ 58,44,62,39,-127,-86,18,14,-27,29,-23,-33,-28,-71,21,3, 
  /* [93][0][][] */ 13,-127,-104,71,-52,-69,-29,111,102,72,2,68,-56,55,-2,-37, 
  /* [94][0][][] */ 102,6,127,-25,31,-37,4,42,38,101,-3,54,5,2,114,-24, 
  /* [95][0][][] */ -65,-45,-32,-25,127,3,66,85,-47,-26,-96,-56,26,22,-66,47, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0034335879608988762, 0.0019401373574510217, 0.0058424975723028183, 0.0038682525046169758, 0.0026871801819652319, 0.001124389236792922, 0.0049364618025720119, 0.0023371782153844833, 0.0017109268810600042, 0.0027165650390088558, 0.00086882238974794745, 0.0020504218991845846, 0.0024196715094149113, 0.006150499451905489, 0.0018524896586313844, 0.0023526863660663366, 0.0047290967777371407, 0.0029499293304979801, 0.003342415438964963, 0.0015351563924923539, 0.0030211082194000483, 0.0016762965824455023, 0.0027423347346484661, 0.0032073142938315868, 0.00095278123626485467, 0.0023268165532499552, 0.0045789158903062344, 0.003856259398162365, 0.002758686663582921, 0.0049596428871154785, 0.0030542442109435797, 0.0028844531625509262, 0.0038011651486158371, 0.0015724246622994542, 0.0027755971532315016, 0.0027333186008036137, 0.0034891539253294468, 0.0032272541429847479, 0.0023409898858517408, 0.0037763693835586309, 0.001057890010997653, 0.0037291503977030516, 0.0032511658500880003, 0.0026024121325463057, 0.00193689891602844, 0.0014767334796488285, 0.0016831299290060997, 0.0014003484975546598, 0.0050316895358264446, 0.0054702782072126865, 0.0042498642578721046, 0.0017353438306599855, 0.0037762459833174944, 0.0018932688981294632, 0.0018061571754515171, 0.0059757847338914871, 0.002890855772420764, 0.0012280478840693831, 0.0023871560115367174, 0.0024028869811445475, 0.0027737843338400126, 0.0017268451629206538, 0.0031401205342262983, 0.0039440705440938473, 0.0012460439465939999, 0.001131452270783484, 0.0050832619890570641, 0.0025632069446146488, 0.0023503999691456556, 0.0022217680234462023, 0.003776198485866189, 0.0029940966051071882, 0.0030489929486066103, 0.0031101801432669163, 0.0033083034213632345, 0.0039243763312697411, 0.0035610091872513294, 0.0015329523012042046, 0.003449031850323081, 0.0022051157429814339, 0.0029093336779624224, 0.0037308635655790567, 0.0023022808600217104, 0.00165597815066576, 0.002101571299135685, 0.0014135534875094891, 0.0017733266577124596, 0.0049651097506284714, 0.0043198876082897186, 0.0047179465182125568, 0.0031471075490117073, 0.0012737541692331433, 0.0029207165353000164, 0.0022328032646328211, 0.0016180821694433689, 0.0023299595341086388, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -4277, 11909, -21637, 791, 10553, -13784, -41781, -8844, -5734, 7313, -15818, -13961, 5480, -11437, -3788, -1097, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00014945871953386813, 0.00011292054114164785, 0.00016943078662734479, 0.00012916536070406437, 0.000108008534880355, 0.00014023437688592821, 8.3424296462908387e-05, 0.00018808033200912178, 8.8449167378712445e-05, 8.8398897787556052e-05, 0.00016792969836387783, 0.00016557810886297375, 0.00012857257388532162, 7.3399125540163368e-05, 0.00013846442743670195, 0.00011016290955012664, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 24,41,21,-27,67,61,-37,57,-15,104,3,39,-34,28,-17,43,33,74,44,-62,-62,69,-1,46,56,40,41,47,-39,-53,-11,84,-22,10,-61,48,43,-127,-31,15,13,-24,65,-6,-3,-52,-58,-20, 
  /* [1][0][][] */ -53,0,-79,-41,9,86,-55,15,-15,-35,-42,36,60,-17,-31,-29,-27,-30,-9,16,-66,41,-108,-48,-53,-37,47,70,-23,-24,44,-38,7,-57,-34,48,11,-54,127,-38,-27,30,-51,-16,28,56,26,15, 
  /* [2][0][][] */ 2,-1,63,-30,-13,-79,25,25,108,78,-63,16,114,-51,127,87,-62,-20,-28,31,87,-80,-29,-93,13,-31,38,-69,40,38,-45,15,33,-25,65,39,-67,8,6,-24,34,31,69,-17,28,-88,99,-58, 
  /* [3][0][][] */ 42,6,-21,-26,37,111,17,-14,44,-46,23,-23,-49,1,12,46,-40,-68,42,-119,-9,-1,-21,-21,-39,85,127,65,-14,-47,25,40,63,-29,92,37,-42,-61,4,37,26,18,-9,-1,25,18,-6,-23, 
  /* [4][0][][] */ 92,-15,3,-43,83,84,56,14,72,-19,-97,31,41,-12,21,-15,-93,-114,-28,-99,-16,23,-33,-23,-86,127,-105,116,-56,-53,32,80,37,-43,20,-34,-11,17,-22,31,-45,-10,2,54,-47,106,-28,-55, 
  /* [5][0][][] */ 0,-4,-52,4,-15,52,16,-27,62,52,40,92,51,-23,29,-4,-38,127,-18,36,9,-5,-70,-13,38,-2,-61,-33,-16,33,21,-18,-39,-1,41,15,-47,6,-86,4,84,-23,21,48,-23,10,-42,33, 
  /* [6][0][][] */ 60,12,12,73,5,-24,107,-55,4,69,127,100,38,52,-46,58,39,-40,-73,92,52,-64,-37,62,-87,91,83,-8,114,51,-30,-6,93,-62,-121,-7,99,36,7,4,19,62,59,-32,68,121,38,-6, 
  /* [7][0][][] */ -99,-9,-24,25,-63,-57,21,48,74,112,-51,-68,-96,11,-21,-20,-75,98,0,116,-44,38,23,41,-21,-88,-33,-78,29,41,-5,7,-18,10,17,-18,4,-54,127,12,4,43,22,-14,50,71,-30,2, 
  /* [8][0][][] */ -10,-81,47,-64,63,-51,69,-30,-22,-116,26,7,-36,7,35,30,-5,3,-39,106,7,38,-14,29,63,-16,-61,-35,-127,-30,-58,-116,13,-58,1,89,-13,27,109,15,20,0,77,117,1,-70,-39,79, 
  /* [9][0][][] */ 20,-36,23,-61,45,84,-37,53,14,-37,-34,-18,22,-53,115,-19,11,-116,41,44,-70,37,61,-39,-29,-86,-26,81,59,76,-42,-28,-53,34,-4,127,-30,-45,-51,-27,-30,6,41,109,56,85,-70,13, 
  /* [10][0][][] */ -15,20,-25,-7,18,26,-64,-43,45,41,63,-4,-32,-11,42,-51,-57,127,-2,47,3,-14,15,26,-44,45,7,89,37,10,-31,-8,67,8,-3,25,-11,-42,-36,19,-81,-6,21,-17,15,45,31,32, 
  /* [11][0][][] */ -30,50,-21,39,31,58,0,11,20,14,-127,-70,78,16,-9,-45,3,28,-49,-49,-7,-11,114,5,47,10,-15,35,-3,23,-7,52,30,-2,-46,0,39,81,104,16,33,-28,71,-2,-55,-19,90,1, 
  /* [12][0][][] */ -64,-2,32,24,-64,-58,8,3,-35,-36,-126,21,80,-98,23,38,58,109,85,-127,-31,40,-41,-84,-3,-18,35,-31,12,15,-13,77,67,86,35,-39,-59,-28,32,-5,-33,14,66,-2,42,-13,-37,-43, 
  /* [13][0][][] */ -62,-122,-51,-97,6,25,58,4,-127,28,125,-56,58,45,117,-2,122,33,-9,-101,78,-85,113,-2,-84,13,-32,16,-40,-91,-105,19,39,-32,-69,54,26,-48,87,-79,-13,56,63,43,53,-22,105,-66, 
  /* [14][0][][] */ 70,20,-47,8,-33,12,-81,-22,-26,53,53,42,-11,-66,16,-40,54,-113,28,8,86,-58,31,-2,-8,121,-82,6,-56,-35,-94,6,127,42,92,-21,-79,6,-22,59,-16,-41,112,-25,-50,-47,-54,51, 
  /* [15][0][][] */ -66,14,36,20,89,1,0,27,16,78,-17,55,55,-14,-42,-22,11,40,0,-40,27,-41,-54,-56,50,-62,-37,59,-30,12,18,9,-66,-4,127,-5,-89,20,56,-16,-46,-24,12,-5,-38,-32,-12,10, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0063519952818751335, 0.0047991229221224785, 0.0072008082643151283, 0.0054895277135074139, 0.0045903627760708332, 0.0059599610976874828, 0.0035455324687063694, 0.0079934140667319298, 0.0037590896245092154, 0.0037569529376924038, 0.0071370122022926807, 0.0070370696485042572, 0.0054643345065414906, 0.0031194628681987524, 0.0058847381733357906, 0.0046819234266877174, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 14650, -643, 19580, 164, 14393, -1930, 36747, 439, 10163, 29709, 3284, 21121, 2247, 11810, 37750, 26845, 1707, -2603, 1148, 46572, 614, 18523, -448, 14363, 18070, 35643, -1155, -572, -1989, 12449, 18555, -228, 132, 148, 189, 16098, 9913, 32217, 3462, 16853, 26008, -376, 697, 16183, -1566, 1867, 37476, 22336, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.4371331720612943e-05, 0.00011288079258520156, 6.5242864366155118e-05, 0.00012098941078875214, 0.00010436782031320035, 8.6302781710401177e-05, 4.9182533985003829e-05, 0.00027225969824939966, 7.9851612099446356e-05, 7.7533797593787313e-05, 6.0133472288725898e-05, 0.00012196452007628977, 6.5772153902798891e-05, 0.00010389780072728172, 4.3500687752384692e-05, 6.8036511947866529e-05, 7.3181923653464764e-05, 6.9710782554466277e-05, 0.00014860721421428025, 4.8612364480504766e-05, 7.2440627263858914e-05, 6.1748141888529062e-05, 0.00015130217070691288, 9.5078896265476942e-05, 6.2825616623740643e-05, 6.4682317315600812e-05, 8.4379309555515647e-05, 3.7452915421454236e-05, 0.00018674861348699778, 0.00010909794218605384, 8.381441148230806e-05, 0.00029478225042112172, 0.00015055356197990477, 0.00014849487342871726, 0.00010665551235433668, 0.00010006759839598089, 0.00010957047197734937, 5.6948585552163422e-05, 7.6086143963038921e-05, 9.022785525303334e-05, 5.269516259431839e-05, 0.00021451614156831056, 0.00021323436521925032, 7.3542636528145522e-05, 0.00015895679825916886, 6.2026636442169547e-05, 5.6178752856794745e-05, 7.6119271398056298e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -93,69,-127,91,-92,61,-57,104,-81,-70,70,-54,62,-83,-50,-53,79,81,95,-109,95,-124,79,-88,-100,-55,63,122,-104,-43,-85,74,71,-92,54,-99,-71,-116,89,-33,-9,-73,126,-104,104,59,-78,-59, -125,97,-71,111,-72,118,-51,92,-114,-102,110,-78,83,-105,-73,-80,100,110,127,-127,108,-127,90,-127,-97,-82,80,127,26,-70,-103,105,105,-127,91,-109,-93,-127,117,-58,-104,103,122,-111,-24,100,-94,-87, -60,53,0,27,-16,72,-34,12,-54,-31,52,-27,46,-50,-38,-24,46,58,68,-37,29,-43,30,-44,-77,-42,21,32,95,-17,-58,11,30,-83,34,-21,-28,-51,40,-44,-127,-30,45,-39,-64,60,-21,-64, 
  /* [0][1][][] */ -95,84,-60,105,-76,106,-116,96,-112,-101,75,-87,84,-112,-85,-98,102,92,-49,-115,115,-111,102,-76,-103,-84,95,110,-127,-81,-104,91,103,33,97,-116,-110,-118,106,-72,-104,-93,121,-127,127,66,-105,-102, -127,127,-109,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-58,-127,127,-115,127,-114,-121,-127,127,124,19,-127,-127,127,127,34,127,-127,-127,-122,127,-127,-125,127,127,-104,-46,127,-127,-127, -70,77,-98,37,-58,39,-66,70,-55,-34,58,-46,58,-59,-50,-21,67,61,-42,-32,34,-59,41,-45,-127,-61,43,51,100,-50,-58,30,35,11,53,-43,-37,-36,53,-71,-53,-63,42,-52,-80,70,-28,-84, 
  /* [0][2][][] */ -51,41,1,56,-30,48,-65,25,-57,-40,21,-44,52,-67,-50,-73,46,43,-66,-24,27,-33,48,-35,-48,-40,31,8,-73,-56,-53,62,41,46,47,-60,-34,-59,35,-55,-113,-37,75,-92,77,27,-69,-44, -70,49,-98,72,-62,43,-67,38,-68,-48,44,-69,65,-67,-71,-70,63,57,-81,-22,26,-28,47,-49,-55,-56,39,37,6,-94,-75,82,42,62,61,-47,-42,-61,40,-66,-62,65,55,-111,-24,53,-73,-55, -29,36,-94,13,-44,-1,-43,12,-20,-13,17,-19,34,-23,-39,-6,32,28,-54,-14,8,-1,13,-9,-44,-29,18,23,62,-40,-10,50,4,40,28,-5,-12,-20,21,-40,3,-24,7,-47,-44,42,-23,-40, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0031607814598828554, 0.004797433502972126, 0.0027728218119591475, 0.0051420498639345169, 0.0044356323778629303, 0.0036678682081401348, 0.0020902575924992561, 0.011571036651730537, 0.0033936933614313602, 0.0032951864413917065, 0.0025556725449860096, 0.0051834918558597565, 0.0027953165117651224, 0.0044156564399600029, 0.0018487792694941163, 0.0028915517032146454, 0.0031102315988391638, 0.0029627082403749228, 0.0063158064149320126, 0.002066025510430336, 0.0030787265859544277, 0.0026242961175739765, 0.006430341862142086, 0.0040408531203866005, 0.0026700887829065323, 0.0027489983476698399, 0.0035861204378306866, 0.0015917489072307944, 0.0079368157312273979, 0.0046366625465452671, 0.0035621123388409615, 0.012528245337307453, 0.0063985260203480721, 0.0063110319897532463, 0.0045328591950237751, 0.0042528728954493999, 0.004656745120882988, 0.0024203148204833269, 0.0032336609438061714, 0.0038346836809068918, 0.0022395444102585316, 0.0091169355437159538, 0.0090624606236815453, 0.0031255620997399092, 0.0067556635476648808, 0.002636132063344121, 0.0023875969927757978, 0.0032350688707083464, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2788, -1101, 983, -2017, 4107, -721, 3877, -4429, 1458, 765, 2940, 4569, 284, -436, 768, 5776, -2040, 4341, 5175, 780, -894, 2674, -1213, 4256, 2392, 2564, 1094, -892, 8470, -481, 2332, -1898, -1186, 4680, -974, 2117, 1556, 1154, 692, 5112, 2111, 9685, -4318, 1571, 7442, 185, 3165, 2590, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00016569523722864687, 0.00030897572287358344, 0.00025087117683142424, 0.00022199191153049469, 0.00018865411402657628, 0.00020884702098555863, 0.00018938381981570274, 0.00012679443170782179, 0.00021346715220715851, 0.00024648322141729295, 0.0001599398092366755, 0.00015919386351015419, 0.00035038008354604244, 0.00032497505890205503, 0.00025029620155692101, 0.00013902912905905396, 0.00021818614914081991, 0.00018562897457741201, 0.00016441108891740441, 0.0003110949182882905, 0.00029395139426924288, 0.00021016255777794868, 0.00015843441360630095, 0.00019280264677945524, 0.00018669839482754469, 0.00017438261420466006, 0.00027588664670474827, 0.00023790955310687423, 0.00010945167014142498, 0.00022567818814422935, 0.00017143032164312899, 0.00017048465088009834, 0.00015883082232903689, 0.00016417106962762773, 0.00024364434648305178, 0.00026411257567815483, 0.00027275507454760373, 0.00021041053696535528, 0.00017485267017036676, 0.00015995040303096175, 0.00025279095279984176, 9.1028261522296816e-05, 0.0001236334937857464, 0.00027391695766709745, 0.0001120383822126314, 0.00024114856205414981, 0.00018422043649479747, 0.00022885446378495544, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 69,35,127,-32,69,100,-82,-51, 
  /* [1][0][][] */ 11,-83,-127,3,51,20,34,1, 
  /* [2][0][][] */ -127,-4,-43,-26,64,21,-80,-37, 
  /* [3][0][][] */ 40,74,127,-87,-13,-116,-10,-11, 
  /* [4][0][][] */ -127,25,-48,-23,51,15,-45,-57, 
  /* [5][0][][] */ -97,23,-52,-8,6,36,-80,-127, 
  /* [6][0][][] */ -35,-127,-115,39,99,6,11,47, 
  /* [7][0][][] */ -62,-127,-94,-76,-71,-65,19,82, 
  /* [8][0][][] */ 80,31,-9,-1,95,-74,-127,14, 
  /* [9][0][][] */ -35,50,-57,88,-61,-40,127,-29, 
  /* [10][0][][] */ -24,119,42,65,127,-20,-12,56, 
  /* [11][0][][] */ -84,-31,-31,-8,-87,112,127,-5, 
  /* [12][0][][] */ 70,39,-127,41,-4,-34,-71,-12, 
  /* [13][0][][] */ 68,-27,-67,8,11,-127,-31,-18, 
  /* [14][0][][] */ 4,-87,71,5,127,-121,-58,16, 
  /* [15][0][][] */ -41,-41,3,127,64,75,-73,27, 
  /* [16][0][][] */ 118,30,-35,17,78,-108,-127,-25, 
  /* [17][0][][] */ 57,127,56,75,48,62,22,-85, 
  /* [18][0][][] */ 40,-12,-5,7,127,-4,30,-14, 
  /* [19][0][][] */ 13,127,29,10,-110,18,25,-33, 
  /* [20][0][][] */ -38,17,67,-127,26,37,-15,101, 
  /* [21][0][][] */ -34,80,42,-127,30,50,-15,105, 
  /* [22][0][][] */ -70,-78,-98,13,-127,121,117,-29, 
  /* [23][0][][] */ 97,33,-127,19,11,-50,-67,-21, 
  /* [24][0][][] */ -47,41,8,4,-22,78,-127,96, 
  /* [25][0][][] */ -102,-52,-127,15,-50,-72,59,98, 
  /* [26][0][][] */ 52,-8,-45,-36,112,-15,127,-38, 
  /* [27][0][][] */ 127,-71,30,98,1,33,-21,97, 
  /* [28][0][][] */ 47,54,48,-16,127,-62,61,-40, 
  /* [29][0][][] */ -19,-7,-31,-42,-71,15,127,-29, 
  /* [30][0][][] */ 47,-127,-56,-76,-111,7,16,-48, 
  /* [31][0][][] */ 12,28,-9,-14,-127,8,-27,-12, 
  /* [32][0][][] */ 46,-59,-62,74,-14,-85,120,-127, 
  /* [33][0][][] */ 48,127,36,34,57,-22,-35,-19, 
  /* [34][0][][] */ -124,-38,127,-9,-22,103,104,10, 
  /* [35][0][][] */ -27,77,127,-13,-67,-74,-41,25, 
  /* [36][0][][] */ -104,11,103,-26,-21,127,86,28, 
  /* [37][0][][] */ -15,-80,-5,-127,-38,-81,69,47, 
  /* [38][0][][] */ 44,-13,86,-55,53,56,-127,10, 
  /* [39][0][][] */ -18,100,-127,-35,-18,4,-6,89, 
  /* [40][0][][] */ 61,-50,23,34,13,5,5,127, 
  /* [41][0][][] */ -28,97,127,-5,20,82,-81,26, 
  /* [42][0][][] */ 61,-127,-125,-22,-125,8,12,-93, 
  /* [43][0][][] */ -8,-85,26,-70,127,-46,19,35, 
  /* [44][0][][] */ 9,117,127,26,9,55,-68,3, 
  /* [45][0][][] */ -40,41,14,86,-114,57,-127,19, 
  /* [46][0][][] */ -49,-43,58,45,-127,-120,-25,-2, 
  /* [47][0][][] */ -18,64,47,-105,-127,42,-25,62, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.002046436769887805, 0.0038160376716405153, 0.0030984112527221441, 0.0027417349629104137, 0.0023299928288906813, 0.0025793875101953745, 0.0023390052374452353, 0.0015659881755709648, 0.0026364489458501339, 0.0030442173592746258, 0.0019753538072109222, 0.0019661409314721823, 0.0043274066410958767, 0.0040136394090950489, 0.0030913101509213448, 0.0017170940991491079, 0.0026947313454002142, 0.0022926304955035448, 0.0020305768121033907, 0.0038422110956162214, 0.0036304781679064035, 0.0025956351310014725, 0.0019567611161619425, 0.0023812297731637955, 0.0023058385122567415, 0.0021537311840802431, 0.0034073677379637957, 0.0029383273795247078, 0.001351794577203691, 0.0027872626669704914, 0.0021172685083001852, 0.0021055890247225761, 0.0019616570789366961, 0.0020276124123483896, 0.0030091556254774332, 0.0032619505655020475, 0.0033686908427625895, 0.0025986977852880955, 0.0021595365833491087, 0.0019754846580326557, 0.0031221215613186359, 0.0011242543114349246, 0.0015269487630575895, 0.0033830408938229084, 0.0013837420847266912, 0.0029783311765640974, 0.0022752343211323023, 0.0028264916036278009, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 2007, 1684, 22291, -2644, 6054, -13853, 859, -13826, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.641399810789153e-05, 0.00010580317757558078, 0.0001881668868009001, 0.00012150224210927263, 0.00015351521142292768, 0.00012856321700382978, 7.6917531259823591e-05, 7.8622149885632098e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -42,-44,-19,-70,1,-13,85,79,-95,-83,-35,2,-54,-9,-67,35,-82,16,9,127,57,-25,16,92,73,76,22,4,-93,-51,-83,-61,-54,105,25,-49,28,-29,88,-1,27,13,5,-106,40,-29,-30,-85, 
  /* [1][0][][] */ -16,51,-23,-32,-78,57,-26,-50,-36,64,-15,10,50,43,-51,-15,-21,-114,71,-54,127,7,-59,29,50,-4,-88,60,33,-10,62,30,-24,-21,-4,-14,1,106,-12,-24,59,42,-6,5,99,20,-28,53, 
  /* [2][0][][] */ -24,-36,103,2,77,-40,-17,21,-32,-2,-11,37,9,-39,-43,-127,-51,-93,-23,11,-89,20,-35,-29,-48,16,-6,-45,-40,6,-26,-13,1,-7,23,-6,20,-28,-42,9,32,-30,25,-47,-43,-36,-58,-48, 
  /* [3][0][][] */ 43,17,53,4,10,-38,26,61,-58,-31,49,-24,-69,57,-20,39,62,32,-37,23,-100,-68,127,4,0,1,-60,-28,-57,65,109,-68,10,-115,-32,46,-9,-72,-16,73,-76,-56,64,-8,-104,-63,57,-12, 
  /* [4][0][][] */ 14,-16,61,-33,1,-14,-7,-5,-57,-10,-22,9,39,-68,36,-103,38,44,-11,-37,12,32,13,7,-5,2,54,-11,19,23,-127,-17,-23,-23,2,16,47,-2,37,4,-32,-9,-67,19,-20,-88,4,14, 
  /* [5][0][][] */ 24,-47,58,29,29,15,21,-5,-75,-10,-46,26,27,4,10,-49,90,76,-4,-19,87,-60,127,-88,-20,41,0,47,8,14,-34,-48,-12,-46,-43,9,39,28,70,4,-77,30,34,25,46,-13,80,-4, 
  /* [6][0][][] */ -38,53,-127,100,59,28,49,24,-23,-1,63,-75,-92,-16,-23,43,-116,28,-4,104,20,51,-92,-101,1,-17,35,78,-24,-44,-44,16,39,75,-45,-24,-16,-8,80,-1,68,71,-126,-47,-34,109,-61,-34, 
  /* [7][0][][] */ 35,74,-80,13,6,63,120,73,46,79,-100,-2,-46,5,-71,-59,28,36,118,99,81,5,127,25,99,108,-57,92,-67,33,-7,-83,26,-64,-20,18,-1,94,-57,89,-64,46,-12,-86,81,-20,60,-41, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0040975948795676231, 0.0044966349378228188, 0.0079970927909016609, 0.0051638451404869556, 0.0065243965946137905, 0.0054639363661408424, 0.003268995089456439, 0.0033414412755519152, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 280, 9323, -670, 369, 26, -1960, 999, -2965, -3280, 203, -5874, -30, -947, -1024, -2382, 4599, 9477, 2357, -264, -3090, -7303, -188, 16525, -5162, -2160, 355, 6411, -6403, -460, -1708, -8301, 8829, 4632, 262, 3306, -500, 83, -91, 9555, -1132, 7954, -2033, 2813, 5610, -1996, 12619, -375, 510, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00027452965150587261, 0.00016380511806346476, 0.00061014585662633181, 0.0002478842216078192, 0.0002588896022643894, 0.00024034142552409321, 0.00024291851150337607, 0.00024129691882990301, 0.00010492403816897422, 0.00027308933204039931, 0.00026172911748290062, 0.0016968735726550221, 0.00034933112328872085, 0.0006574185099452734, 0.00038311499520204961, 0.0006170041742734611, 0.00013321686128620058, 6.6638167481869459e-05, 0.00027522098389454186, 0.00032554302015341818, 0.00024967975332401693, 0.00024739475338719785, 8.7470973085146397e-05, 0.00037191060255281627, 0.00016394062549807131, 0.0003489626687951386, 0.00051864801207557321, 0.00019598202197812498, 0.00024248880799859762, 0.00035311191459186375, 0.00012205247912788764, 0.00013671920169144869, 0.00014737602032255381, 0.00025866576470434666, 0.00015736029308754951, 0.00038709695218130946, 0.0027482826262712479, 0.000380185607355088, 0.00016017974121496081, 0.00019887044618371874, 0.00016303495795000345, 0.00012983269698452204, 0.00031747494358569384, 0.00017849169671535492, 0.00033881227136589587, 7.7338379924185574e-05, 6.1758335505146533e-05, 0.00017153905355371535, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 10,-41,11,5,-22,-107,-37,58,-43,-7,-9,8,45,-3,-14,-1,100,12,30,-5,2,-18,-65,22,-3,-16,-11,-30,-67,84,-18,-111,54,-13,-46,-53,-12,-34,7,-4,-20,30,16,-7,-11,57,127,-17, -127,-95,-22,127,-70,77,-88,127,22,14,7,-4,49,25,-2,-42,-32,54,25,6,10,127,15,127,127,-35,-55,41,60,-118,-10,-71,78,-11,-37,-127,21,10,-59,-49,-127,-2,-91,-127,37,51,55,112, -18,-1,13,5,-25,42,39,59,2,-35,2,1,-15,1,-2,4,-58,31,-64,-35,-2,-25,127,26,-52,2,3,-3,16,51,10,3,-2,-20,-35,86,6,2,17,90,20,-23,29,-34,-5,24,-17,-16, 
  /* [0][1][][] */ -12,-18,-27,-4,33,-117,127,-80,-15,3,18,33,127,16,0,-37,-29,-24,30,39,62,-63,45,15,-71,127,-82,-22,127,-89,49,-127,-44,0,-75,10,7,-69,-42,10,112,127,15,-121,-57,-60,-1,81, 83,-127,127,-4,127,75,-63,-55,33,127,127,-127,-92,127,127,127,127,127,113,127,127,115,4,5,111,-112,-127,127,40,127,127,8,-127,127,127,127,-127,127,-127,-124,37,47,-127,-38,127,-127,-13,75, 15,36,-39,-10,-47,127,-111,95,104,-75,24,60,-30,11,12,-63,18,15,-127,11,21,-108,-35,2,72,-18,-22,120,-71,-31,32,-28,-26,15,94,-18,36,-12,1,-78,103,0,33,48,-50,86,103,-89, 
  /* [0][2][][] */ 2,24,7,-38,1,-60,-13,4,3,-5,-5,3,-9,-11,-2,-6,-56,19,16,-41,2,-24,86,-5,-103,1,41,-25,13,7,-3,21,-8,-15,-63,34,-4,-14,18,62,-33,-5,11,2,-11,11,-9,11, 35,-16,-35,-43,27,46,115,-88,127,-35,-5,7,-68,-18,-21,-69,-25,101,5,27,12,26,-22,-30,-78,59,85,-8,-94,19,-38,-5,-16,-4,-30,6,48,-30,3,127,-119,-1,-15,52,40,47,12,-127, -10,30,5,-28,-15,1,-5,-37,-28,-24,-8,6,25,-10,-11,13,47,40,-29,-22,-3,-26,-46,-9,32,-27,25,-16,-16,11,-16,22,38,-17,-23,-40,-8,2,30,33,-16,-17,4,12,-9,7,68,-48, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011667510494589806, 0.0069617172703146935, 0.02593119814991951, 0.010535079054534435, 0.011002807877957821, 0.010214510373771191, 0.010324036702513695, 0.010255118831992149, 0.0044592716731131077, 0.011606296524405479, 0.011123486794531345, 0.072117127478122711, 0.014846572652459145, 0.027940286323428154, 0.01628238707780838, 0.026222676038742065, 0.0056617162190377712, 0.0028321221470832825, 0.011696891859173775, 0.013835578225553036, 0.010611389763653278, 0.010514277033507824, 0.003717516316100955, 0.015806199982762337, 0.0069674765691161156, 0.01483091339468956, 0.022042540833353996, 0.0083292359486222267, 0.01030577439814806, 0.015007255598902702, 0.005187230184674263, 0.005810566246509552, 0.0062634805217385292, 0.010993294417858124, 0.0066878120414912701, 0.016451619565486908, 0.11680200695991516, 0.016157887876033783, 0.0068076387979090214, 0.0084519935771822929, 0.0069289854727685452, 0.0055178897455334663, 0.013492684811353683, 0.0075858971104025841, 0.014399521052837372, 0.0032868811395019293, 0.0026247291825711727, 0.0072904098778963089, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2765, 4132, 12119, 1784, 2658, -1479, 5497, 12902, 3472, -916, 3463, -2295, 18305, -1947, 2116, 24183, -436, 1944, 160, 2756, 4003, 3240, 577, 29563, 5658, 3573, 19372, 1829, 6373, 5463, 679, 1375, 756, 1924, -413, 173, -3196, -630, 2461, 2471, 4448, 2228, 3562, 4782, 5102, 2835, 2132, 6569, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00021010950149502605, 0.00019736998365260661, 7.6562908361665905e-05, 0.0001867889950517565, 0.00019894976867362857, 0.00025605890550650656, 0.00014609961363021284, 7.3629365942906588e-05, 0.00015219840861391276, 0.00022460865147877485, 0.000234981082030572, 0.00021329104492906481, 5.2162777137709782e-05, 0.00022099714260548353, 0.00022260521654970944, 4.6073164412518963e-05, 0.00031997557380236685, 0.00021770528110209852, 0.00025648990413174033, 0.00022556218027602881, 0.000178562942892313, 0.00022805982735008001, 0.00034383073216304183, 3.7102276110090315e-05, 0.00014628533972427249, 0.00015866859757807106, 5.5832300859037787e-05, 0.00023049941228237003, 0.0001223660510731861, 0.00014049401215743273, 0.00041362014599144459, 0.00034770907950587571, 0.00022218053345568478, 0.00020225872867740691, 0.00023614639940205961, 0.00026338233146816492, 0.00018098314467351884, 0.00024214838049374521, 0.00023586767201777548, 0.00021874714002478868, 0.0001775051059667021, 0.00022049386461731046, 0.00022483555949293077, 0.00016974851314444095, 0.00014063216804061085, 0.00022966742108110338, 0.00031984108500182629, 0.00012548205268103629, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 67,127,-74,-80,14,78,10,70, 
  /* [1][0][][] */ 58,-72,49,-127,-54,74,-83,-46, 
  /* [2][0][][] */ -40,127,127,53,115,3,62,8, 
  /* [3][0][][] */ 95,44,-85,65,-6,-89,-127,-31, 
  /* [4][0][][] */ -39,24,8,-68,-38,105,127,41, 
  /* [5][0][][] */ 29,88,-127,-73,49,97,31,-32, 
  /* [6][0][][] */ -12,127,59,59,73,7,9,-90, 
  /* [7][0][][] */ 127,-17,-32,26,27,8,112,15, 
  /* [8][0][][] */ 55,127,60,86,114,90,102,-79, 
  /* [9][0][][] */ 51,114,-127,-86,16,96,5,75, 
  /* [10][0][][] */ -70,-49,19,-55,-7,-32,-47,127, 
  /* [11][0][][] */ 21,-112,-127,-15,28,-16,35,-8, 
  /* [12][0][][] */ -22,-122,-125,-40,-127,42,-52,43, 
  /* [13][0][][] */ -10,11,-104,97,-127,-26,2,-16, 
  /* [14][0][][] */ -63,-47,-127,-8,32,-8,-10,-58, 
  /* [15][0][][] */ 22,-100,-127,19,-93,-35,-36,-12, 
  /* [16][0][][] */ 127,-65,-16,72,-83,24,28,109, 
  /* [17][0][][] */ -22,110,127,-26,-46,-6,-24,-20, 
  /* [18][0][][] */ 9,-127,49,73,-1,-69,47,-80, 
  /* [19][0][][] */ 127,-44,-59,33,-99,11,44,102, 
  /* [20][0][][] */ -26,-127,85,79,-13,-94,-3,-75, 
  /* [21][0][][] */ -2,-48,-12,-33,127,-10,46,25, 
  /* [22][0][][] */ -127,27,-77,50,47,57,-89,-104, 
  /* [23][0][][] */ -88,-49,63,-3,-105,124,127,-53, 
  /* [24][0][][] */ -20,64,1,-34,-37,127,108,1, 
  /* [25][0][][] */ -47,-99,-127,-54,-43,-18,-30,-30, 
  /* [26][0][][] */ -15,64,-6,127,-82,42,-56,2, 
  /* [27][0][][] */ 20,-127,33,80,16,-53,2,-123, 
  /* [28][0][][] */ 24,127,67,53,116,-19,37,-84, 
  /* [29][0][][] */ 98,22,-35,-15,75,-127,-99,30, 
  /* [30][0][][] */ 22,-10,34,-127,19,-18,21,-23, 
  /* [31][0][][] */ 46,-38,6,70,-9,30,7,127, 
  /* [32][0][][] */ -92,-67,18,-55,-63,127,57,92, 
  /* [33][0][][] */ -28,45,46,-38,36,127,-101,70, 
  /* [34][0][][] */ 24,127,-76,-49,15,54,-74,61, 
  /* [35][0][][] */ 10,-127,34,61,-27,-65,32,-84, 
  /* [36][0][][] */ -22,-34,-76,-3,-127,-59,-19,13, 
  /* [37][0][][] */ -54,-127,87,100,-44,-94,-20,-47, 
  /* [38][0][][] */ -75,27,65,-69,-127,-85,-63,86, 
  /* [39][0][][] */ 64,-127,75,52,-16,-81,-24,-76, 
  /* [40][0][][] */ -1,60,18,45,-127,-11,-63,21, 
  /* [41][0][][] */ 109,127,-77,-105,56,20,-12,14, 
  /* [42][0][][] */ -8,-42,-19,12,127,15,50,20, 
  /* [43][0][][] */ 127,26,83,21,-70,-23,59,109, 
  /* [44][0][][] */ 67,48,-18,17,73,-102,-127,20, 
  /* [45][0][][] */ 55,14,18,18,79,-127,2,-54, 
  /* [46][0][][] */ 57,-36,-7,127,41,51,18,70, 
  /* [47][0][][] */ -74,-73,54,80,-46,22,127,-86, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0031256726942956448, 0.0029361546039581299, 0.0011389803839847445, 0.0027787475846707821, 0.0029596560634672642, 0.0038092343602329493, 0.0021734361071139574, 0.0010953397722914815, 0.0022641641553491354, 0.0033413679338991642, 0.0034956722520291805, 0.003173002740368247, 0.00077599426731467247, 0.0032876415643841028, 0.0033115639816969633, 0.00068540277425199747, 0.0047600842081010342, 0.0032386705279350281, 0.0038156460504978895, 0.0033555529080331326, 0.0026563736610114574, 0.0033927089534699917, 0.0051149632781744003, 0.00055194826563820243, 0.0021761991083621979, 0.0023604172747582197, 0.000830583565402776, 0.003429001197218895, 0.0018203662475571036, 0.0020900450181216002, 0.0061531784012913704, 0.0051726591773331165, 0.0033052463550120592, 0.0030088815838098526, 0.0035130081232637167, 0.0039181807078421116, 0.0026923774275928736, 0.0036022958811372519, 0.0035088616423308849, 0.0032541698310524225, 0.002640636870637536, 0.003280154662206769, 0.003344743512570858, 0.0025252467021346092, 0.0020921002142131329, 0.0034166241530328989, 0.0047580837272107601, 0.0018667210824787617, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 7240, 15735, -4366, 8126, -415, 3850, -11819, -18712, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00024356634821742773, 0.00011759040353354067, 0.00013750816287938505, 0.00013781154120806605, 0.00020457773644011468, 0.00016684488218743354, 0.00019827860523946583, 0.00015096139395609498, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-6,32,12,-32,-12,10,5,-42,-4,-63,-59,-23,-62,-9,-29,49,-44,39,40,-17,32,-41,19,-3,-40,58,-17,-4,-16,19,9,85,38,39,-127,20,0,-15,-35,4,-16,46,51,39,8,30,5, 
  /* [1][0][][] */ 2,41,67,-27,-11,42,-54,-30,5,24,-20,-91,11,90,-19,58,-19,19,-27,-58,5,-78,-28,20,-73,-11,-5,-116,-27,-18,33,-55,49,78,-43,5,127,-31,4,51,-29,39,-84,-29,116,-20,-35,-27, 
  /* [2][0][][] */ -4,-24,-58,12,-3,42,23,2,-7,39,-5,29,65,-92,16,-59,35,-90,23,34,-28,53,-5,25,-18,62,-28,-67,17,4,19,-68,-47,-87,31,-27,103,23,-10,-57,2,27,75,29,127,15,19,25, 
  /* [3][0][][] */ -10,29,-71,46,14,-41,-77,-102,15,-22,-37,1,5,25,37,76,-11,14,-37,27,4,-101,27,-64,-74,-16,127,-16,-42,4,-66,16,-4,-84,7,-12,-24,-42,-19,106,-53,-38,-2,17,38,3,-44,43, 
  /* [4][0][][] */ -29,-45,-7,8,32,-31,-14,-9,27,-32,58,-78,5,27,9,10,-18,-24,12,-11,-2,-50,5,-22,20,-14,41,49,32,20,-16,28,-11,-3,0,-3,-69,83,34,-23,29,-21,-20,-26,-77,11,127,10, 
  /* [5][0][][] */ 47,-25,1,13,26,-41,31,-127,27,-28,-9,115,-78,66,21,-62,-2,-94,15,2,-37,66,-38,-45,-62,73,-24,1,-18,48,-41,-33,25,53,34,-3,-40,-4,-44,-45,15,-40,-44,-5,-33,57,91,20, 
  /* [6][0][][] */ 53,-20,24,-12,-37,-17,-31,20,-43,5,-39,127,-44,-35,-6,56,12,48,13,30,38,-81,-18,23,22,40,-64,9,6,-43,11,41,9,17,-14,-5,12,1,-6,-4,-7,-17,40,56,-3,-38,73,-14, 
  /* [7][0][][] */ -29,5,-3,66,34,36,2,30,21,0,77,-3,125,114,64,50,46,47,-15,5,24,-23,-92,-34,21,-5,-32,65,37,-26,-36,-16,40,5,42,-104,-80,39,38,62,-34,38,83,127,-63,-28,-112,65, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010351569391787052, 0.0049975919537246227, 0.0058440966531634331, 0.0058569903485476971, 0.0086945537477731705, 0.0070909070782363415, 0.0084268404170870781, 0.0064158588647842407, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 14464, 5424, 3543, -255, -779, -2292, -801, 33553, -596, 2389, 7221, 62345, 521, 5716, 468, 11115, -2104, 13834, 440, 7633, 11632, 762, 3026, -9226, 12287, 652, 4372, 13562, 541, -1154, -9182, 11375, 5104, 1988, -685, 6599, -8816, 12067, -1301, 19783, -2686, -713, 6580, 2887, 741, 321, 2043, -168, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.1468420578166842e-05, 8.3663340774364769e-05, 0.00016768704517744482, 0.00016290524217765778, 0.00085068284533917904, 0.0001624751603230834, 0.00030026384047232568, 0.00010044407099485397, 0.00012990320101380348, 8.7640662968624383e-05, 6.9913934567011893e-05, 5.2339273679535836e-05, 9.4380469818133861e-05, 5.7300865591969341e-05, 0.00027702320949174464, 0.00021878308325540274, 0.00012835096276830882, 0.00037606761907227337, 0.00011121689749415964, 0.00013211075565777719, 9.3893577286507934e-05, 0.00050900055794045329, 0.00012095150304958224, 0.00020816655887756497, 0.00010327385825803503, 0.00010390418901806697, 5.1926428568549454e-05, 8.25768947834149e-05, 0.00018607634410727769, 0.00077808991773054004, 0.0002399878139840439, 9.2099005996715277e-05, 0.00010282987204845995, 0.00014523581194225699, 0.00017650287190917879, 5.6715267419349402e-05, 8.5371633758768439e-05, 4.3382369767641649e-05, 9.5755160145927221e-05, 7.2887225542217493e-05, 0.00013356767885852605, 0.0001694701932137832, 6.6901222453452647e-05, 7.6968884968664497e-05, 8.5539199062623084e-05, 0.00040977488970384002, 6.8948116677347571e-05, 0.00022416807769332081, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-87,3,-18,127,-50,76,-62,-86,-79,-23,-47,117,39,58,-123,66,-26,12,-38,-90,106,2,25,-9,82,54,-32,76,-68,27,-44,-110,-90,52,65,21,90,113,-74,-125,-17,38,63,47,-127,88,72, -63,-116,-76,57,-81,107,68,-74,-64,43,73,-114,127,93,106,-74,-75,-82,41,-54,-87,89,-64,107,-90,113,84,-125,90,-49,8,-127,-59,-87,78,120,108,124,127,-75,-127,-64,67,87,80,101,93,69, 2,-57,-76,94,-35,-20,29,-10,96,18,57,-84,22,57,-39,2,-78,-14,34,-35,-29,-10,-76,-6,-82,53,16,-90,37,58,123,-75,14,16,-9,47,78,76,52,-4,-15,88,54,25,35,27,18,-110, 
  /* [0][1][][] */ -115,-90,1,-79,-80,-68,100,-120,-127,-127,81,-75,92,48,-126,-84,127,-127,-57,-73,-85,127,-46,22,-7,93,102,-49,-105,-78,12,-50,-101,-127,-127,70,35,85,13,-105,70,-13,78,104,80,100,123,-127, -123,-127,-125,-104,-32,127,127,-127,94,60,127,-127,109,127,58,-127,53,-92,-127,-127,-127,110,-127,127,-127,127,127,-127,-127,127,-12,-122,-127,-105,49,127,127,127,-6,-127,108,-90,127,127,127,-6,127,97, -57,-69,-127,127,79,-34,42,-33,73,17,24,-66,10,68,69,-56,-20,3,-11,-70,-56,-6,-71,-17,-127,46,33,-95,-49,39,127,-97,-60,14,62,78,80,69,-23,-35,55,127,70,19,49,-48,26,18, 
  /* [0][2][][] */ -127,-34,37,20,-35,-24,25,-45,30,-44,15,-57,6,20,-49,-12,-77,-30,102,-32,-20,31,-60,-2,3,68,74,-19,34,56,2,-4,13,-83,-40,33,13,15,-69,-51,25,-5,36,30,22,47,19,-62, -93,-51,-27,-61,92,42,56,-60,94,21,-40,-86,-6,41,-127,-75,36,3,53,-70,-54,17,-69,44,-59,72,77,-31,33,4,-37,-29,-60,-22,-64,49,32,25,-118,-75,30,-42,75,64,43,-108,29,5, -48,-39,-53,-17,-10,-5,14,-28,-65,6,-12,-39,-14,16,28,-18,31,36,3,-58,-41,-34,-19,-35,-56,17,32,-28,5,-62,44,-27,-88,21,23,40,25,23,-55,-36,7,50,21,21,11,-6,9,41, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038874077145010233, 0.003555692033842206, 0.0071266992017626762, 0.0069234725087881088, 0.036154020577669144, 0.0069051943719387054, 0.012761212885379791, 0.0042688730172812939, 0.0055208858102560043, 0.0037247282452881336, 0.0029713420663028955, 0.0022244190331548452, 0.004011170007288456, 0.0024352867621928453, 0.011773486621677876, 0.0092982808127999306, 0.0054549160413444042, 0.015982873737812042, 0.0047267181798815727, 0.0056147067807614803, 0.0039904769510030746, 0.021632522344589233, 0.0051404386758804321, 0.0088470783084630966, 0.0043891388922929764, 0.0044159279204905033, 0.0022068731486797333, 0.0035095179919153452, 0.0079082446172833443, 0.033068820834159851, 0.010199481621384621, 0.003914207685738802, 0.0043702693656086922, 0.0061725219711661339, 0.0075013716705143452, 0.0024103987962007523, 0.0036282944492995739, 0.0018437507096678019, 0.0040695942007005215, 0.0030977069400250912, 0.0056766262277960777, 0.0072024832479655743, 0.0028433019760996103, 0.0032711776439100504, 0.0036354160401970148, 0.017415432259440422, 0.0029302949551492929, 0.0095271430909633636, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1165, -449, -356, 1254, 21897, 1715, -616, 5233, 1441, 1331, 245, 4050, 1353, 597, -776, 428, 3625, 11352, 3200, -831, 1062, -1413, -87, 2277, -233, -660, 1745, -51, 3057, 18158, 2476, -43, 533, -76, 2610, 46, 476, -194, 1119, 1083, 1782, 2049, 168, -257, 568, 2231, 1171, -74, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00044668494956567883, 0.00042813961044885218, 0.00028802276938222349, 0.00031536433380097151, 4.871929922956042e-05, 0.00034453938133083284, 0.00043311045737937093, 0.00017787166871130466, 0.00030547924689017236, 0.00050745584303513169, 0.00030913774389773607, 0.00023453259200323373, 0.00021034439851064235, 0.00036818758235312998, 0.00032667606137692928, 0.00034336771932430565, 0.00020997246610932052, 8.3257953519932926e-05, 0.00023106993467081338, 0.00032678665593266487, 0.00040736774099059403, 0.00019662879640236497, 0.00047510096919722855, 0.00031334452796727419, 0.00044991209870204329, 0.00080344441812485456, 0.00030258117476478219, 0.00084087729919701815, 0.00025880243629217148, 5.3921656217426062e-05, 0.00030054233502596617, 0.00075102702248841524, 0.00039048129110597074, 0.00040436247945763171, 0.0002646121138241142, 0.00033476948738098145, 0.00040640850784257054, 0.00068909581750631332, 0.00039903947617858648, 0.00053890421986579895, 0.00030535695259459317, 0.00032103000557981431, 0.00034156657056882977, 0.00047068277490325272, 0.00045229142415337265, 0.00022482540225610137, 0.00028906646184623241, 0.00034603275707922876, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -35,31,1,-14,-79,-39,-127,28, 
  /* [1][0][][] */ 85,-77,-57,-49,127,-89,97,27, 
  /* [2][0][][] */ -98,127,-46,-122,52,-24,-33,38, 
  /* [3][0][][] */ 53,24,95,5,102,124,127,-15, 
  /* [4][0][][] */ -82,-127,67,8,-58,-109,-7,-34, 
  /* [5][0][][] */ 127,-25,65,60,-71,-9,5,-23, 
  /* [6][0][][] */ 24,37,127,-29,48,-34,-43,31, 
  /* [7][0][][] */ 27,9,-127,-31,-41,101,96,-70, 
  /* [8][0][][] */ -7,127,-31,1,60,99,38,54, 
  /* [9][0][][] */ 4,127,-65,95,13,-121,56,119, 
  /* [10][0][][] */ 3,-124,-6,-29,-79,-127,-62,-79, 
  /* [11][0][][] */ -127,-78,105,54,-9,-64,102,66, 
  /* [12][0][][] */ -19,46,-127,78,36,-54,-76,98, 
  /* [13][0][][] */ 93,-127,90,79,4,27,32,-61, 
  /* [14][0][][] */ -19,88,-37,-127,-34,-107,-25,-63, 
  /* [15][0][][] */ 38,108,29,-14,35,-60,102,-127, 
  /* [16][0][][] */ -118,-127,-63,97,-50,23,-17,73, 
  /* [17][0][][] */ -26,-109,-127,89,-59,79,-42,74, 
  /* [18][0][][] */ -98,-68,-50,89,-6,75,-1,127, 
  /* [19][0][][] */ 66,-127,101,-122,8,-66,34,-32, 
  /* [20][0][][] */ -8,72,27,15,41,127,76,-6, 
  /* [21][0][][] */ 26,112,44,-38,43,-66,95,-127, 
  /* [22][0][][] */ 19,13,100,21,-9,127,35,-37, 
  /* [23][0][][] */ -109,-75,32,-74,91,111,-58,-127, 
  /* [24][0][][] */ -95,-88,38,-83,117,113,-49,-127, 
  /* [25][0][][] */ 127,9,-59,-15,15,30,-62,-8, 
  /* [26][0][][] */ -127,-32,-125,-22,-51,-30,18,3, 
  /* [27][0][][] */ 83,35,-3,-59,-127,-22,96,93, 
  /* [28][0][][] */ -127,-76,6,49,-73,-92,2,1, 
  /* [29][0][][] */ 119,104,43,-127,30,6,-70,-94, 
  /* [30][0][][] */ -93,-71,44,-75,78,93,-50,-127, 
  /* [31][0][][] */ 51,43,-9,127,8,-68,11,13, 
  /* [32][0][][] */ -24,127,-1,33,21,61,-18,43, 
  /* [33][0][][] */ -33,127,-73,30,19,-34,-25,-1, 
  /* [34][0][][] */ -127,-115,-54,101,-16,14,23,105, 
  /* [35][0][][] */ -52,127,-30,-6,70,107,53,70, 
  /* [36][0][][] */ 71,31,2,-47,-127,-31,115,113, 
  /* [37][0][][] */ -61,106,23,21,-127,102,-24,-96, 
  /* [38][0][][] */ 36,37,33,17,127,68,99,53, 
  /* [39][0][][] */ -27,-70,36,-23,13,37,-92,127, 
  /* [40][0][][] */ -62,-60,-77,127,-28,-4,16,64, 
  /* [41][0][][] */ 127,14,63,104,-48,-16,-12,-20, 
  /* [42][0][][] */ -42,7,-73,-127,53,-110,4,84, 
  /* [43][0][][] */ 28,-7,88,-1,35,127,89,4, 
  /* [44][0][][] */ -28,-24,-66,127,50,14,-39,-34, 
  /* [45][0][][] */ 69,127,106,-109,49,-58,17,-114, 
  /* [46][0][][] */ -38,-127,-43,33,-11,37,-60,121, 
  /* [47][0][][] */ 42,51,127,0,93,114,120,-20, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0046233762986958027, 0.0044314241968095303, 0.0029811563435941935, 0.0032641529105603695, 0.00050426513189449906, 0.0035661268047988415, 0.0044828746467828751, 0.0018410461489111185, 0.0031618380453437567, 0.0052523803897202015, 0.0031997049227356911, 0.0024275104515254498, 0.0021771525498479605, 0.0038108956068754196, 0.0033812338951975107, 0.003553999587893486, 0.0021733029279857874, 0.0008617546409368515, 0.0023916705977171659, 0.0033823787234723568, 0.0042164265178143978, 0.0020351903513073921, 0.0049174940213561058, 0.0032432470470666885, 0.0046567786484956741, 0.0083159860223531723, 0.0031318417750298977, 0.0087034320458769798, 0.0026787135284394026, 0.00055811170022934675, 0.0031107389368116856, 0.0077734440565109253, 0.0040416447445750237, 0.0041853208094835281, 0.0027388462331146002, 0.0034650042653083801, 0.0042064981535077095, 0.0071324300952255726, 0.0041302256286144257, 0.0055778841488063335, 0.0031605723779648542, 0.0033227948006242514, 0.0035353570710867643, 0.0048717637546360493, 0.0046814056113362312, 0.0023270370438694954, 0.0029919587541371584, 0.0035815839655697346, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -7726, -2941, 12301, -10473, 22847, 7744, -8846, 11353, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00017558374383952469, 0.0002319324848940596, 0.00018748795264400542, 0.00026288421940989792, 0.0002118222473654896, 0.00016717679682187736, 0.0001888255646917969, 0.00031281012343242764, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -14,-14,-19,-67,-24,-34,25,-18,38,6,-33,-4,109,127,-19,-101, 
  /* [1][0][][] */ 127,-60,-40,14,-45,72,-65,-46,-42,82,-35,-51,-11,8,-62,-18, 
  /* [2][0][][] */ -38,-98,43,42,48,-56,-76,-21,29,-92,25,-127,44,-20,-75,26, 
  /* [3][0][][] */ 40,11,16,15,-15,68,-52,-23,127,46,10,22,4,-12,13,21, 
  /* [4][0][][] */ -96,-39,-21,-127,-6,39,55,-118,30,-20,-47,-36,-120,34,-37,-21, 
  /* [5][0][][] */ 87,48,70,-24,45,-46,-127,-116,-16,-75,65,47,-55,46,61,-43, 
  /* [6][0][][] */ 111,42,-127,-80,28,-72,3,-95,-43,20,-126,98,90,-90,8,76, 
  /* [7][0][][] */ -127,-4,95,-26,-63,3,-3,-59,-50,63,82,-35,62,-28,29,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0074623087421059608, 0.0098571302369236946, 0.0079682376235723495, 0.011172579601407051, 0.0090024452656507492, 0.0071050138212740421, 0.008025086484849453, 0.013294429518282413, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 14363, -552, 581, 3119, -762, 449, 12080, 1715, -2578, 328, -2723, 2989, 1049, -52, -97, -1538, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00016828399384394288, 0.00021479428687598556, 0.00012233413872309029, 0.00013658666284754872, 0.00095403642626479268, 0.00074763852171599865, 0.00012793195492122322, 0.00068010110408067703, 0.00046662506065331399, 0.00093707599444314837, 0.00037194404285401106, 0.00020946102449670434, 9.5945826615206897e-05, 0.00032122520497068763, 0.00022162447567097843, 0.00037009126390330493, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-5,2,3,-20,11,9,17,-2,-10,-1,-9,-4,-12,-1,0, 7,-4,0,2,13,-2,11,-27,-4,10,-7,87,-9,16,4,0, 3,-6,-7,1,2,-13,-4,11,7,3,-6,-9,5,-10,-3,0, 
  /* [0][1][][] */ 10,-9,2,0,127,-24,-127,-20,127,127,1,-8,109,-27,-2,-17, -127,127,127,-4,-88,-92,-17,-102,18,-105,127,127,127,127,127,127, 19,-3,-7,-3,-10,127,3,-9,1,-12,-7,-7,15,-7,-13,-7, 
  /* [0][2][][] */ -1,-4,-3,-15,-19,16,56,8,-11,-8,3,-3,-5,-2,-9,-9, 19,-16,-8,-127,6,-16,-9,127,-5,1,5,-18,-6,-60,-10,-33, 1,-4,-7,-4,0,-5,0,-2,3,2,-2,-4,6,-8,-11,-10, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0071520693600177765, 0.0091287568211555481, 0.0051992009393870831, 0.0058049331419169903, 0.040546547621488571, 0.03177463635802269, 0.0054371082223951817, 0.028904296457767487, 0.019831564277410507, 0.03982573002576828, 0.0158076211810112, 0.0089020933955907822, 0.0040776976384222507, 0.013652071356773376, 0.009419039823114872, 0.015728877857327461, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 2137, 113, -1541, 2703, 66741, 52367, 1307, -16329, 10811, -11748, 1861, -11, 4350, -37659, -66, 58264, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00015502465248573571, 0.0011372937588021159, 0.00014477301738224924, 0.00011529496987350285, 3.0452714781858958e-05, 4.145417915424332e-05, 0.00010857301822397858, 3.6020639527123421e-05, 9.0133529738523066e-05, 5.0097100029233843e-05, 0.00034177044290117919, 0.00089609582209959626, 0.00039647688390687108, 1.9715525922947563e-05, 0.00072813488077372313, 4.9626847612671554e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -29, 
  /* [0][1][][] */ 67, -36, 17, 
  /* [0][2][][] */ 32, 127, 20, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 24, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -23, -2, -47, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -93, -78, 
  /* [3][0][][] */ 117, 123, 56, 
  /* [3][1][][] */ 0, -23, -16, 
  /* [3][2][][] */ -102, -127, -45, 
  /* [4][0][][] */ 26, -56, 0, 
  /* [4][1][][] */ 24, -127, 1, 
  /* [4][2][][] */ 12, -85, -13, 
  /* [5][0][][] */ -58, 26, 3, 
  /* [5][1][][] */ -127, 30, 7, 
  /* [5][2][][] */ -85, 24, 4, 
  /* [6][0][][] */ -14, 80, 127, 
  /* [6][1][][] */ -48, 57, -13, 
  /* [6][2][][] */ -33, -48, -84, 
  /* [7][0][][] */ 36, 25, -20, 
  /* [7][1][][] */ 127, 70, -13, 
  /* [7][2][][] */ 36, 8, -21, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -23, 50, -13, 
  /* [9][1][][] */ -16, 127, -14, 
  /* [9][2][][] */ -7, 87, -8, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 65, -94, 35, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 6, 
  /* [13][0][][] */ 72, 15, -31, 
  /* [13][1][][] */ 126, 101, -26, 
  /* [13][2][][] */ 94, 127, 34, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -80, -24, 21, 
  /* [15][1][][] */ -127, -124, 16, 
  /* [15][2][][] */ -12, -62, 1, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.03953128308057785, 0.29000988602638245, 0.036917116492986679, 0.029400216415524483, 0.0077654416672885418, 0.010570814833045006, 0.027686117216944695, 0.009185262955725193, 0.02298404835164547, 0.012774759903550148, 0.087151460349559784, 0.22850441932678223, 0.1011015996336937, 0.0050274590030312538, 0.18567438423633575, 0.012654845602810383, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.096614450216293335, } };
const TfArray<1, int> quant46_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.067220568656921387, } };
const TfArray<1, int> quant50_zero = { 1, { -44 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.065464206039905548, } };
const TfArray<1, int> quant53_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.080967679619789124, } };
const TfArray<1, int> quant54_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.048156850039958954, } };
const TfArray<1, int> quant58_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.04748804122209549, } };
const TfArray<1, int> quant61_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069427475333213806, } };
const TfArray<1, int> quant62_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.019591338932514191, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.036124270409345627, } };
const TfArray<1, int> quant65_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.0756416916847229, } };
const TfArray<1, int> quant66_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.018703898414969444, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.043654635548591614, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.05469227209687233, } };
const TfArray<1, int> quant69_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension47, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension49, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension50, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension51, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension53, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension55, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension57, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9840), (TfLiteIntArray*)&g0::tensor_dimension58, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension59, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension61, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8640), (TfLiteIntArray*)&g0::tensor_dimension62, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension63, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4032), (TfLiteIntArray*)&g0::tensor_dimension65, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension66, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 3456, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3456), (TfLiteIntArray*)&g0::tensor_dimension68, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 144), (TfLiteIntArray*)&g0::tensor_dimension69, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
